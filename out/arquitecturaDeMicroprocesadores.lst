
out/arquitecturaDeMicroprocesadores.elf:     file format elf32-littlearm
out/arquitecturaDeMicroprocesadores.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c09

Program Header:
0x70000001 off    0x000094fc vaddr 0x1a0014fc paddr 0x1a0014fc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00001504 memsz 0x00001504 flags r-x
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014fc  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  10000000  10000000  00009504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00009504  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00009504  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00009504  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00009504  2**2
                  CONTENTS
  6 .bss          0000000c  10000000  10000000  00008000  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00009504  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00009504  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00009504  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00009504  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0014fc  1a0014fc  000094fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00009504  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00009504  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00009504  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00009504  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00009504  2**2
                  CONTENTS
 17 .noinit       00000000  1000000c  1000000c  00009504  2**2
                  CONTENTS
 18 .debug_info   0000804f  00000000  00000000  00009504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000016fb  00000000  00000000  00011553  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00002aab  00000000  00000000  00012c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000004b0  00000000  00000000  00015700  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000003b0  00000000  00000000  00015bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00006b70  00000000  00000000  00015f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00004f61  00000000  00000000  0001cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001983d  00000000  00000000  00021a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0003b26e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0003b2de  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00000acc  00000000  00000000  0003b318  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000000 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0014fc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000000c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 productoEscalar16C.c
00000000 l    df *ABS*	00000000 main.c
1a00031c l     F .text	00000070 Ejercicio3
1a00038c l     F .text	0000000c initHardware
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0003b0 l     F .text	0000002c Chip_UART_GetIndex
1a0013ac l     O .text	00000008 UART_BClock
1a0013b4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0013bc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000680 l     F .text	000000a8 pll_calc_divs
1a000728 l     F .text	000000fa pll_get_frac
1a000824 l     F .text	00000048 Chip_Clock_FindBaseClock
1a000a90 l     F .text	00000022 Chip_Clock_GetDivRate
10000000 l     O .bss	00000008 audio_usb_pll_freq
1a001410 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00147c l     O .text	0000000c InitClkStates
1a001488 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000d30 l     F .text	00000040 Board_LED_Init
1a0014f0 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 out/app/src/suma.o
00000000 l    df *ABS*	00000000 out/app/src/productoEscalar16ASM.o
1a000dec l       .text	00000000 lazo
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a001504 l       .ARM.exidx	00000000 __exidx_end
1a001504 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a0014fc l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000000c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a0008b8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000e60 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a00019c  w    F .text	00000002 TIMER2_IRQHandler
1a000190  w    F .text	00000002 DebugMon_Handler
1a00019c  w    F .text	00000002 RIT_IRQHandler
1a00019c  w    F .text	00000002 ADCHS_IRQHandler
1a000e94 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a00019c  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00019c  w    F .text	00000002 I2C0_IRQHandler
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000198  w    F .text	00000002 SysTick_Handler
1a00019c  w    F .text	00000002 SDIO_IRQHandler
1a00019c  w    F .text	00000002 ATIMER_IRQHandler
1a000194  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a00019c  w    F .text	00000002 I2C1_IRQHandler
1a00019c  w    F .text	00000002 UART1_IRQHandler
1a00019c  w    F .text	00000002 GPIO5_IRQHandler
1a00019c  w    F .text	00000002 CAN1_IRQHandler
1a000de6 g     F .text	00000000 productoEscalar16ASM
1a00019c  w    F .text	00000002 USB1_IRQHandler
1a00019c  w    F .text	00000002 I2S0_IRQHandler
1a00019c  w    F .text	00000002 TIMER3_IRQHandler
1a000b1c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00019c  w    F .text	00000002 UART0_IRQHandler
1a0001bc g     F .text	00000012 bss_init
1a00019c  w    F .text	00000002 SGPIO_IRQHandler
1a000e00 g     F .text	00000000 .hidden __aeabi_uldivmod
1000000c g       .noinit	00000000 _noinit
10000008 g     O .bss	00000004 SystemCoreClock
1a0003dc g     F .text	00000050 Chip_UART_Init
1a00019c  w    F .text	00000002 ADC0_IRQHandler
1a000188  w    F .text	00000002 UsageFault_Handler
1a000b64 g     F .text	0000004c Chip_Clock_GetRate
1a00019c  w    F .text	00000002 GPIO6_IRQHandler
1a000cb8 g     F .text	0000006c Board_SetupClocking
1a0014ec g     O .text	00000004 ExtRateIn
1a00019c  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00019c  w    F .text	00000002 GPIO1_IRQHandler
1a00019c  w    F .text	00000002 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1a001130 g     F .text	0000026a .hidden __udivdi3
1a00019c  w    F .text	00000002 ADC1_IRQHandler
1a000dac g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00019c  w    F .text	00000002 RTC_IRQHandler
1000000c g       .bss	00000000 _ebss
1a00019c  w    F .text	00000002 TIMER0_IRQHandler
1a00019c  w    F .text	00000002 SPI_IRQHandler
1a00019c  w    F .text	00000002 LCD_IRQHandler
1a00086c g     F .text	0000004c Chip_Clock_EnableCrystal
1a0001a0 g     F .text	0000001a data_init
1a00019c  w    F .text	00000002 TIMER1_IRQHandler
1a00019c  w    F .text	00000002 UART2_IRQHandler
1a000a28 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a00019c  w    F .text	00000002 GPIO2_IRQHandler
1a000af8 g     F .text	00000024 Chip_Clock_GetBaseClock
10000000 g       .bss	00000000 _bss
1a00019c  w    F .text	00000002 I2S1_IRQHandler
1a000668 g     F .text	00000002 Chip_GPIO_Init
1a0014e8 g     O .text	00000004 OscRateIn
1000000c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00019c  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000e90  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00019c  w    F .text	00000002 USB0_IRQHandler
1a00019c  w    F .text	00000002 GPIO3_IRQHandler
1a00019c  w    F .text	00000002 SCT_IRQHandler
1a0008d4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00139c g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000398 g     F .text	00000016 main
1a00019c  w    F .text	00000002 WDT_IRQHandler
1a00018c  w    F .text	00000002 SVC_Handler
1a00019c  w    F .text	00000002 GPIO7_IRQHandler
1a000b28 g     F .text	0000003c Chip_Clock_EnableOpts
1a0008f0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000bb0 g     F .text	00000058 fpuInit
1a0009a8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000dd4 g     F .text	0000000c SystemInit
1a00019c  w    F .text	00000002 SPIFI_IRQHandler
1a00019c  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000300 g     F .text	0000001c productoEscalar16C
1a000c84 g     F .text	00000034 Board_SetupMuxing
1a00042c g     F .text	000000e4 Chip_UART_SetBaudFDR
1a00019c  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00019c  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a00019c  w    F .text	00000002 GINT0_IRQHandler
1a00019c  w    F .text	00000002 DAC_IRQHandler
1a000d84 g     F .text	00000028 Board_Debug_Init
10000000 g       .data	00000000 _edata
1a000de0 g     F .text	00000000 asmSum
1a00019c  w    F .text	00000002 M0SUB_IRQHandler
1a000510 g     F .text	00000158 Chip_SetupCoreClock
1a00019c  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000c08 g     F .text	0000007c ResetISR
1a00066c g     F .text	00000014 SystemCoreClockUpdate
1a00019c  w    F .text	00000002 DMA_IRQHandler
1a00019c  w    F .text	00000002 EVRT_IRQHandler
1a000e90  w    F .text	00000002 .hidden __aeabi_idiv0
1a000184  w    F .text	00000002 BusFault_Handler
1a00019c  w    F .text	00000002 UART3_IRQHandler
1a00019c  w    F .text	00000002 MCPWM_IRQHandler
1a000e30 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00019c  w    F .text	00000002 M0APP_IRQHandler
1a00019c  w    F .text	00000002 GINT1_IRQHandler
1a000d70 g     F .text	00000014 Board_UART_Init
1a000ab4 g     F .text	00000044 Chip_Clock_SetBaseClock
1a00019c  w    F .text	00000002 GPIO4_IRQHandler
1a000d24 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 09 0c 00 1a 79 01 00 1a 7d 01 00 1a     ........y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a 00 00 00 00     ................
	...
1a00002c:	8d 01 00 1a 91 01 00 1a 00 00 00 00 95 01 00 1a     ................
1a00003c:	99 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00004c:	00 00 00 00 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00005c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00006c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00007c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00008c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00009c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ac:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000bc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000cc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000dc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ec:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a0000fc:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a00010c:	9d 01 00 1a 9d 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001504 	.word	0x1a001504
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000000 	.word	0x00000000
1a000120:	1a001504 	.word	0x1a001504
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001504 	.word	0x1a001504
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001504 	.word	0x1a001504
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001504 	.word	0x1a001504
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000000 	.word	0x10000000
1a000154:	0000000c 	.word	0x0000000c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop

1a000194 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <PendSV_Handler>
1a000196:	bf00      	nop

1a000198 <SysTick_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SysTick_Handler>
1a00019a:	bf00      	nop

1a00019c <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <ADC0_IRQHandler>
1a00019e:	bf00      	nop

1a0001a0 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a0:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	2300      	movs	r3, #0
1a0001a4:	e004      	b.n	1a0001b0 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a6:	6804      	ldr	r4, [r0, #0]
1a0001a8:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001ac:	3004      	adds	r0, #4
1a0001ae:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	4293      	cmp	r3, r2
1a0001b2:	d3f8      	bcc.n	1a0001a6 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b8:	4770      	bx	lr
1a0001ba:	bf00      	nop

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	2300      	movs	r3, #0
1a0001be:	e003      	b.n	1a0001c8 <bss_init+0xc>
        *pulDest++ = 0;
1a0001c0:	2200      	movs	r2, #0
1a0001c2:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c6:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	428b      	cmp	r3, r1
1a0001ca:	d3f9      	bcc.n	1a0001c0 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001cc:	4770      	bx	lr
1a0001ce:	bf00      	nop
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <productoEscalar16C>:
 */

#include <stdint.h>

void productoEscalar16C (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar)
{
1a000300:	b430      	push	{r4, r5}
	uint32_t i = 0;

	for(i = 0; i < longitud; i++)
1a000302:	2400      	movs	r4, #0
1a000304:	e006      	b.n	1a000314 <productoEscalar16C+0x14>
		vectorOut [i] = vectorIn[i] * escalar;
1a000306:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
1a00030a:	fb15 f503 	smulbb	r5, r5, r3
1a00030e:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]

void productoEscalar16C (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar)
{
	uint32_t i = 0;

	for(i = 0; i < longitud; i++)
1a000312:	3401      	adds	r4, #1
1a000314:	4294      	cmp	r4, r2
1a000316:	d3f6      	bcc.n	1a000306 <productoEscalar16C+0x6>
		vectorOut [i] = vectorIn[i] * escalar;

	return;
}
1a000318:	bc30      	pop	{r4, r5}
1a00031a:	4770      	bx	lr

1a00031c <Ejercicio3>:


	return;
}

void Ejercicio3 (void) {
1a00031c:	b500      	push	{lr}
1a00031e:	b093      	sub	sp, #76	; 0x4c

	volatile uint16_t arrayEntrada [ARRAY_L];
	volatile uint16_t arraySalida [ARRAY_L];

	volatile uint16_t ganancia = 2;
1a000320:	2302      	movs	r3, #2
1a000322:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t base = 1 << 14;
	uint32_t i;

	for (i = 0; i < ARRAY_L; i++){
1a000326:	2300      	movs	r3, #0
1a000328:	e00b      	b.n	1a000342 <Ejercicio3+0x26>
		arrayEntrada[i] = i + base;
1a00032a:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
1a00032e:	b292      	uxth	r2, r2
1a000330:	a912      	add	r1, sp, #72	; 0x48
1a000332:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000336:	f821 2c20 	strh.w	r2, [r1, #-32]
		arraySalida[i] = 0;
1a00033a:	2200      	movs	r2, #0
1a00033c:	f821 2c40 	strh.w	r2, [r1, #-64]

	volatile uint16_t ganancia = 2;
	uint16_t base = 1 << 14;
	uint32_t i;

	for (i = 0; i < ARRAY_L; i++){
1a000340:	3301      	adds	r3, #1
1a000342:	2b0f      	cmp	r3, #15
1a000344:	d9f1      	bls.n	1a00032a <Ejercicio3+0xe>
		arrayEntrada[i] = i + base;
		arraySalida[i] = 0;
	}


	productoEscalar16C(arrayEntrada, arraySalida, ARRAY_L, ganancia);
1a000346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a00034a:	a80a      	add	r0, sp, #40	; 0x28
1a00034c:	a902      	add	r1, sp, #8
1a00034e:	2210      	movs	r2, #16
1a000350:	b29b      	uxth	r3, r3
1a000352:	f7ff ffd5 	bl	1a000300 <productoEscalar16C>

	for (i = 0; i < ARRAY_L; i++){
1a000356:	2300      	movs	r3, #0
1a000358:	e00b      	b.n	1a000372 <Ejercicio3+0x56>
		arrayEntrada[i] = i + base;
1a00035a:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
1a00035e:	b292      	uxth	r2, r2
1a000360:	a912      	add	r1, sp, #72	; 0x48
1a000362:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000366:	f821 2c20 	strh.w	r2, [r1, #-32]
		arraySalida[i] = 0;
1a00036a:	2200      	movs	r2, #0
1a00036c:	f821 2c40 	strh.w	r2, [r1, #-64]
	}


	productoEscalar16C(arrayEntrada, arraySalida, ARRAY_L, ganancia);

	for (i = 0; i < ARRAY_L; i++){
1a000370:	3301      	adds	r3, #1
1a000372:	2b0f      	cmp	r3, #15
1a000374:	d9f1      	bls.n	1a00035a <Ejercicio3+0x3e>
		arrayEntrada[i] = i + base;
		arraySalida[i] = 0;
	}
	productoEscalar16ASM(arrayEntrada, arraySalida, ARRAY_L, ganancia);
1a000376:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a00037a:	a80a      	add	r0, sp, #40	; 0x28
1a00037c:	a902      	add	r1, sp, #8
1a00037e:	2210      	movs	r2, #16
1a000380:	b29b      	uxth	r3, r3
1a000382:	f000 fd30 	bl	1a000de6 <productoEscalar16ASM>


	return;
}
1a000386:	b013      	add	sp, #76	; 0x4c
1a000388:	f85d fb04 	ldr.w	pc, [sp], #4

1a00038c <initHardware>:
/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

static void initHardware(void)
{
1a00038c:	b508      	push	{r3, lr}
	Board_Init();
1a00038e:	f000 fd0d 	bl	1a000dac <Board_Init>
	SystemCoreClockUpdate();
1a000392:	f000 f96b 	bl	1a00066c <SystemCoreClockUpdate>
1a000396:	bd08      	pop	{r3, pc}

1a000398 <main>:
static void Ejercicio3(void);


int main(void)

{   /* como no hago nada con las variables, pasa los valores por registros y no reserva memoria ni stack*/
1a000398:	b508      	push	{r3, lr}
			 otherValue = 30,
			 sumResult;

	// Ejercicio1();
	// Ejercicio2();
	Ejercicio3();
1a00039a:	f7ff ffbf 	bl	1a00031c <Ejercicio3>

	initHardware();
1a00039e:	f7ff fff5 	bl	1a00038c <initHardware>

	sumResult = asmSum(aValue, otherValue);
1a0003a2:	2014      	movs	r0, #20
1a0003a4:	211e      	movs	r1, #30
1a0003a6:	f000 fd1b 	bl	1a000de0 <asmSum>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a0003aa:	bf30      	wfi
1a0003ac:	e7fd      	b.n	1a0003aa <main+0x12>
1a0003ae:	bf00      	nop

1a0003b0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a0003b0:	4b09      	ldr	r3, [pc, #36]	; (1a0003d8 <Chip_UART_GetIndex+0x28>)
1a0003b2:	4298      	cmp	r0, r3
1a0003b4:	d009      	beq.n	1a0003ca <Chip_UART_GetIndex+0x1a>
1a0003b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0003ba:	4298      	cmp	r0, r3
1a0003bc:	d007      	beq.n	1a0003ce <Chip_UART_GetIndex+0x1e>
1a0003be:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0003c2:	4298      	cmp	r0, r3
1a0003c4:	d005      	beq.n	1a0003d2 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a0003c6:	2000      	movs	r0, #0
1a0003c8:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a0003ca:	2002      	movs	r0, #2
1a0003cc:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a0003ce:	2003      	movs	r0, #3
1a0003d0:	4770      	bx	lr
   uint32_t base = (uint32_t) pUART;
   switch(base) {
       case LPC_USART0_BASE:
           return 0;
       case LPC_UART1_BASE:
           return 1;
1a0003d2:	2001      	movs	r0, #1
       case LPC_USART3_BASE:
           return 3;
       default:
           return 0; /* Should never come here */
   }
}
1a0003d4:	4770      	bx	lr
1a0003d6:	bf00      	nop
1a0003d8:	400c1000 	.word	0x400c1000

1a0003dc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0003dc:	b510      	push	{r4, lr}
1a0003de:	b082      	sub	sp, #8
1a0003e0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0003e2:	f7ff ffe5 	bl	1a0003b0 <Chip_UART_GetIndex>
1a0003e6:	4b0f      	ldr	r3, [pc, #60]	; (1a000424 <Chip_UART_Init+0x48>)
1a0003e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0003ec:	2101      	movs	r1, #1
1a0003ee:	460a      	mov	r2, r1
1a0003f0:	460b      	mov	r3, r1
1a0003f2:	f000 fb99 	bl	1a000b28 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a0003f6:	2307      	movs	r3, #7
1a0003f8:	60a3      	str	r3, [r4, #8]
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0003fa:	2300      	movs	r3, #0
1a0003fc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a0003fe:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000400:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000402:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000404:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000406:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000408:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00040a:	4b07      	ldr	r3, [pc, #28]	; (1a000428 <Chip_UART_Init+0x4c>)
1a00040c:	429c      	cmp	r4, r3
1a00040e:	d103      	bne.n	1a000418 <Chip_UART_Init+0x3c>
       /* Set Modem Control to default state */
       pUART->MCR = 0;
1a000410:	2300      	movs	r3, #0
1a000412:	6123      	str	r3, [r4, #16]
       /*Dummy Reading to Clear Status */
       tmp = pUART->MSR;
1a000414:	69a3      	ldr	r3, [r4, #24]
1a000416:	9301      	str	r3, [sp, #4]
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000418:	2303      	movs	r3, #3
1a00041a:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a00041c:	2310      	movs	r3, #16
1a00041e:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000420:	b002      	add	sp, #8
1a000422:	bd10      	pop	{r4, pc}
1a000424:	1a0013b4 	.word	0x1a0013b4
1a000428:	40082000 	.word	0x40082000

1a00042c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000430:	b083      	sub	sp, #12
1a000432:	4683      	mov	fp, r0
1a000434:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000436:	f7ff ffbb 	bl	1a0003b0 <Chip_UART_GetIndex>
1a00043a:	4b34      	ldr	r3, [pc, #208]	; (1a00050c <Chip_UART_SetBaudFDR+0xe0>)
1a00043c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000440:	f000 fb90 	bl	1a000b64 <Chip_Clock_GetRate>
1a000444:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */
1a000446:	f04f 37ff 	mov.w	r7, #4294967295

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a00044a:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a00044c:	2300      	movs	r3, #0
1a00044e:	9301      	str	r3, [sp, #4]
1a000450:	46a2      	mov	sl, r4
1a000452:	4699      	mov	r9, r3

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000454:	e029      	b.n	1a0004aa <Chip_UART_SetBaudFDR+0x7e>
       for (d = 0; d < m; d++) {
           uint32_t diff, div;
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000456:	2300      	movs	r3, #0
1a000458:	0932      	lsrs	r2, r6, #4
1a00045a:	0730      	lsls	r0, r6, #28
1a00045c:	fba0 0104 	umull	r0, r1, r0, r4
1a000460:	fb04 1102 	mla	r1, r4, r2, r1
1a000464:	1962      	adds	r2, r4, r5
1a000466:	fb08 f202 	mul.w	r2, r8, r2
1a00046a:	f000 fcc9 	bl	1a000e00 <__aeabi_uldivmod>

           /* Lower 32-bit of dval has diff */
           diff = (uint32_t) dval;
1a00046e:	4603      	mov	r3, r0
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);
1a000470:	460a      	mov	r2, r1

           /* Closer to next div */
           if ((int)diff < 0) {
1a000472:	2800      	cmp	r0, #0
1a000474:	da01      	bge.n	1a00047a <Chip_UART_SetBaudFDR+0x4e>
               diff = -diff;
1a000476:	4243      	negs	r3, r0
               div ++;
1a000478:	1c4a      	adds	r2, r1, #1
           }

           /* Check if new value is worse than old or out of range */
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00047a:	429f      	cmp	r7, r3
1a00047c:	d30a      	bcc.n	1a000494 <Chip_UART_SetBaudFDR+0x68>
1a00047e:	b14a      	cbz	r2, 1a000494 <Chip_UART_SetBaudFDR+0x68>
1a000480:	0c11      	lsrs	r1, r2, #16
1a000482:	d107      	bne.n	1a000494 <Chip_UART_SetBaudFDR+0x68>
1a000484:	2a02      	cmp	r2, #2
1a000486:	d800      	bhi.n	1a00048a <Chip_UART_SetBaudFDR+0x5e>
1a000488:	b925      	cbnz	r5, 1a000494 <Chip_UART_SetBaudFDR+0x68>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a00048a:	b14b      	cbz	r3, 1a0004a0 <Chip_UART_SetBaudFDR+0x74>

           /* Store the new better values */
           sdiv = div;
           sd = d;
           sm = m;
           odiff = diff;
1a00048c:	461f      	mov	r7, r3
               continue;
           }

           /* Store the new better values */
           sdiv = div;
           sd = d;
1a00048e:	9501      	str	r5, [sp, #4]
           sm = m;
1a000490:	46a2      	mov	sl, r4
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
               continue;
           }

           /* Store the new better values */
           sdiv = div;
1a000492:	4691      	mov	r9, r2
   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
       for (d = 0; d < m; d++) {
1a000494:	3501      	adds	r5, #1
1a000496:	e000      	b.n	1a00049a <Chip_UART_SetBaudFDR+0x6e>
1a000498:	2500      	movs	r5, #0
1a00049a:	42a5      	cmp	r5, r4
1a00049c:	d3db      	bcc.n	1a000456 <Chip_UART_SetBaudFDR+0x2a>
1a00049e:	e003      	b.n	1a0004a8 <Chip_UART_SetBaudFDR+0x7c>

           /* Store the new better values */
           sdiv = div;
           sd = d;
           sm = m;
           odiff = diff;
1a0004a0:	461f      	mov	r7, r3
               continue;
           }

           /* Store the new better values */
           sdiv = div;
           sd = d;
1a0004a2:	9501      	str	r5, [sp, #4]
           sm = m;
1a0004a4:	46a2      	mov	sl, r4
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
               continue;
           }

           /* Store the new better values */
           sdiv = div;
1a0004a6:	4691      	mov	r9, r2

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a0004a8:	3401      	adds	r4, #1
1a0004aa:	b10f      	cbz	r7, 1a0004b0 <Chip_UART_SetBaudFDR+0x84>
1a0004ac:	2c0f      	cmp	r4, #15
1a0004ae:	d9f3      	bls.n	1a000498 <Chip_UART_SetBaudFDR+0x6c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a0004b0:	f1b9 0f00 	cmp.w	r9, #0
1a0004b4:	d026      	beq.n	1a000504 <Chip_UART_SetBaudFDR+0xd8>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a0004b6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0004ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0004be:	f8cb 300c 	str.w	r3, [fp, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a0004c2:	fa5f f389 	uxtb.w	r3, r9
1a0004c6:	f8cb 3000 	str.w	r3, [fp]
   pUART->DLM = (uint32_t) dlm;
1a0004ca:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0004ce:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0004d2:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0004d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0004da:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0004de:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0004e2:	b2da      	uxtb	r2, r3
1a0004e4:	9901      	ldr	r1, [sp, #4]
1a0004e6:	f001 030f 	and.w	r3, r1, #15
1a0004ea:	4313      	orrs	r3, r2
1a0004ec:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0004f0:	0933      	lsrs	r3, r6, #4
1a0004f2:	fb0a f303 	mul.w	r3, sl, r3
1a0004f6:	eb0a 0001 	add.w	r0, sl, r1
1a0004fa:	fb09 f000 	mul.w	r0, r9, r0
1a0004fe:	fbb3 f0f0 	udiv	r0, r3, r0
1a000502:	e000      	b.n	1a000506 <Chip_UART_SetBaudFDR+0xda>
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
       return 0;
1a000504:	2000      	movs	r0, #0
   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a000506:	b003      	add	sp, #12
1a000508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00050c:	1a0013ac 	.word	0x1a0013ac

1a000510 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000510:	b570      	push	{r4, r5, r6, lr}
1a000512:	b092      	sub	sp, #72	; 0x48
1a000514:	4605      	mov	r5, r0
1a000516:	460e      	mov	r6, r1
1a000518:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a00051a:	f241 537c 	movw	r3, #5500	; 0x157c
1a00051e:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000520:	2806      	cmp	r0, #6
1a000522:	d101      	bne.n	1a000528 <Chip_SetupCoreClock+0x18>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
1a000524:	f000 f9a2 	bl	1a00086c <Chip_Clock_EnableCrystal>
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000528:	2004      	movs	r0, #4
1a00052a:	4629      	mov	r1, r5
1a00052c:	2201      	movs	r2, #1
1a00052e:	2300      	movs	r3, #0
1a000530:	f000 fac0 	bl	1a000ab4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000534:	4a49      	ldr	r2, [pc, #292]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a000536:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000538:	f043 0301 	orr.w	r3, r3, #1
1a00053c:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a00053e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000542:	4630      	mov	r0, r6
1a000544:	a909      	add	r1, sp, #36	; 0x24
1a000546:	f000 fa2f 	bl	1a0009a8 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a00054a:	4b45      	ldr	r3, [pc, #276]	; (1a000660 <Chip_SetupCoreClock+0x150>)
1a00054c:	429e      	cmp	r6, r3
1a00054e:	d935      	bls.n	1a0005bc <Chip_SetupCoreClock+0xac>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000550:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000552:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000556:	d001      	beq.n	1a00055c <Chip_SetupCoreClock+0x4c>
1a000558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00055a:	b352      	cbz	r2, 1a0005b2 <Chip_SetupCoreClock+0xa2>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a00055c:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000560:	483f      	ldr	r0, [pc, #252]	; (1a000660 <Chip_SetupCoreClock+0x150>)
1a000562:	a901      	add	r1, sp, #4
1a000564:	f000 fa20 	bl	1a0009a8 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000568:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00056c:	9b01      	ldr	r3, [sp, #4]
1a00056e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000572:	9a05      	ldr	r2, [sp, #20]
1a000574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000578:	9a03      	ldr	r2, [sp, #12]
1a00057a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00057e:	9a04      	ldr	r2, [sp, #16]
1a000580:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000584:	4a35      	ldr	r2, [pc, #212]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a000586:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000588:	4b34      	ldr	r3, [pc, #208]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a00058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a00058c:	f013 0f01 	tst.w	r3, #1
1a000590:	d0fa      	beq.n	1a000588 <Chip_SetupCoreClock+0x78>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000592:	2004      	movs	r0, #4
1a000594:	2109      	movs	r1, #9
1a000596:	2201      	movs	r2, #1
1a000598:	2300      	movs	r3, #0
1a00059a:	f000 fa8b 	bl	1a000ab4 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a00059e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0005a0:	1e5a      	subs	r2, r3, #1
1a0005a2:	9211      	str	r2, [sp, #68]	; 0x44
1a0005a4:	2b00      	cmp	r3, #0
1a0005a6:	d1fa      	bne.n	1a00059e <Chip_SetupCoreClock+0x8e>
           delay = 5500;
1a0005a8:	f241 537c 	movw	r3, #5500	; 0x157c
1a0005ac:	9311      	str	r3, [sp, #68]	; 0x44
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a0005ae:	2500      	movs	r5, #0
   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

   if (core_freq > 110000000UL) {
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0005b0:	e005      	b.n	1a0005be <Chip_SetupCoreClock+0xae>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a0005b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0005b6:	9309      	str	r3, [sp, #36]	; 0x24
           while(!Chip_Clock_MainPLLLocked()) {}
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
1a0005b8:	2501      	movs	r5, #1
1a0005ba:	e000      	b.n	1a0005be <Chip_SetupCoreClock+0xae>
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a0005bc:	2500      	movs	r5, #0
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a0005be:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a0005c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0005c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0005c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0005ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0005ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0005d0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0005d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0005d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0005da:	4a20      	ldr	r2, [pc, #128]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a0005dc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0005de:	4b1f      	ldr	r3, [pc, #124]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a0005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a0005e2:	f013 0f01 	tst.w	r3, #1
1a0005e6:	d0fa      	beq.n	1a0005de <Chip_SetupCoreClock+0xce>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0005e8:	2004      	movs	r0, #4
1a0005ea:	2109      	movs	r1, #9
1a0005ec:	2201      	movs	r2, #1
1a0005ee:	2300      	movs	r3, #0
1a0005f0:	f000 fa60 	bl	1a000ab4 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a0005f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0005f6:	1e5a      	subs	r2, r3, #1
1a0005f8:	9211      	str	r2, [sp, #68]	; 0x44
1a0005fa:	2b00      	cmp	r3, #0
1a0005fc:	d1fa      	bne.n	1a0005f4 <Chip_SetupCoreClock+0xe4>
   if (direct) {
1a0005fe:	b1d5      	cbz	r5, 1a000636 <Chip_SetupCoreClock+0x126>
       delay = 5500;
1a000600:	f241 537c 	movw	r3, #5500	; 0x157c
1a000604:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000606:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00060c:	9309      	str	r3, [sp, #36]	; 0x24
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00060e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000612:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00061c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00061e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000628:	4a0c      	ldr	r2, [pc, #48]	; (1a00065c <Chip_SetupCoreClock+0x14c>)
1a00062a:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a00062c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00062e:	1e5a      	subs	r2, r3, #1
1a000630:	9211      	str	r2, [sp, #68]	; 0x44
1a000632:	2b00      	cmp	r3, #0
1a000634:	d1fa      	bne.n	1a00062c <Chip_SetupCoreClock+0x11c>
   }

   if (setbase) {
1a000636:	b964      	cbnz	r4, 1a000652 <Chip_SetupCoreClock+0x142>
1a000638:	e00e      	b.n	1a000658 <Chip_SetupCoreClock+0x148>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00063a:	4a0a      	ldr	r2, [pc, #40]	; (1a000664 <Chip_SetupCoreClock+0x154>)
1a00063c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000640:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000644:	7859      	ldrb	r1, [r3, #1]
1a000646:	789a      	ldrb	r2, [r3, #2]
1a000648:	78db      	ldrb	r3, [r3, #3]
1a00064a:	f000 fa33 	bl	1a000ab4 <Chip_Clock_SetBaseClock>

   if (setbase) {
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00064e:	3401      	adds	r4, #1
1a000650:	e000      	b.n	1a000654 <Chip_SetupCoreClock+0x144>
1a000652:	2400      	movs	r4, #0
1a000654:	2c11      	cmp	r4, #17
1a000656:	d9f0      	bls.n	1a00063a <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000658:	b012      	add	sp, #72	; 0x48
1a00065a:	bd70      	pop	{r4, r5, r6, pc}
1a00065c:	40050000 	.word	0x40050000
1a000660:	068e7780 	.word	0x068e7780
1a000664:	1a0013bc 	.word	0x1a0013bc

1a000668 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000668:	4770      	bx	lr
1a00066a:	bf00      	nop

1a00066c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00066c:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00066e:	2069      	movs	r0, #105	; 0x69
1a000670:	f000 fa78 	bl	1a000b64 <Chip_Clock_GetRate>
1a000674:	4b01      	ldr	r3, [pc, #4]	; (1a00067c <SystemCoreClockUpdate+0x10>)
1a000676:	6018      	str	r0, [r3, #0]
1a000678:	bd08      	pop	{r3, pc}
1a00067a:	bf00      	nop
1a00067c:	10000008 	.word	0x10000008

1a000680 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000680:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000682:	680b      	ldr	r3, [r1, #0]
1a000684:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000688:	d002      	beq.n	1a000690 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a00068a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00068e:	600b      	str	r3, [r1, #0]
1a000690:	4686      	mov	lr, r0
1a000692:	2601      	movs	r6, #1
1a000694:	e041      	b.n	1a00071a <pll_calc_divs+0x9a>
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
1a000696:	680d      	ldr	r5, [r1, #0]
1a000698:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00069c:	d008      	beq.n	1a0006b0 <pll_calc_divs+0x30>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00069e:	1c7b      	adds	r3, r7, #1
1a0006a0:	fa04 f203 	lsl.w	r2, r4, r3
1a0006a4:	694b      	ldr	r3, [r1, #20]
1a0006a6:	fb03 f302 	mul.w	r3, r3, r2
1a0006aa:	fbb3 f3f6 	udiv	r3, r3, r6
1a0006ae:	e004      	b.n	1a0006ba <pll_calc_divs+0x3a>
               } else {
                   fcco = (m * ppll->fin) / n;
1a0006b0:	694b      	ldr	r3, [r1, #20]
1a0006b2:	fb04 f303 	mul.w	r3, r4, r3
1a0006b6:	fbb3 f3f6 	udiv	r3, r3, r6
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0006ba:	4a19      	ldr	r2, [pc, #100]	; (1a000720 <pll_calc_divs+0xa0>)
1a0006bc:	4293      	cmp	r3, r2
1a0006be:	d920      	bls.n	1a000702 <pll_calc_divs+0x82>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0006c0:	4a18      	ldr	r2, [pc, #96]	; (1a000724 <pll_calc_divs+0xa4>)
1a0006c2:	4293      	cmp	r3, r2
1a0006c4:	d823      	bhi.n	1a00070e <pll_calc_divs+0x8e>
               if (ppll->ctrl & (1 << 7)) {
1a0006c6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0006ca:	d103      	bne.n	1a0006d4 <pll_calc_divs+0x54>
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
1a0006cc:	1c7a      	adds	r2, r7, #1
1a0006ce:	fa23 f202 	lsr.w	r2, r3, r2
1a0006d2:	e000      	b.n	1a0006d6 <pll_calc_divs+0x56>
                   fcco = (m * ppll->fin) / n;
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0006d4:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0006d6:	1a85      	subs	r5, r0, r2
1a0006d8:	d502      	bpl.n	1a0006e0 <pll_calc_divs+0x60>
       return -val;
1a0006da:	f1c5 0c00 	rsb	ip, r5, #0
1a0006de:	e000      	b.n	1a0006e2 <pll_calc_divs+0x62>
   return val;
1a0006e0:	46ac      	mov	ip, r5
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a0006e2:	45e6      	cmp	lr, ip
1a0006e4:	d90d      	bls.n	1a000702 <pll_calc_divs+0x82>
                   ppll->nsel = n;
1a0006e6:	608e      	str	r6, [r1, #8]
                   ppll->psel = p + 1;
1a0006e8:	f107 0e01 	add.w	lr, r7, #1
1a0006ec:	f8c1 e00c 	str.w	lr, [r1, #12]
                   ppll->msel = m;
1a0006f0:	610c      	str	r4, [r1, #16]
                   ppll->fout = fout;
1a0006f2:	618a      	str	r2, [r1, #24]
                   ppll->fcco = fcco;
1a0006f4:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0006f6:	2d00      	cmp	r5, #0
1a0006f8:	da02      	bge.n	1a000700 <pll_calc_divs+0x80>
       return -val;
1a0006fa:	f1c5 0e00 	rsb	lr, r5, #0
1a0006fe:	e000      	b.n	1a000702 <pll_calc_divs+0x82>
   return val;
1a000700:	46ae      	mov	lr, r5
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
1a000702:	3401      	adds	r4, #1
1a000704:	e000      	b.n	1a000708 <pll_calc_divs+0x88>
1a000706:	2401      	movs	r4, #1
1a000708:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a00070c:	ddc3      	ble.n	1a000696 <pll_calc_divs+0x16>
   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a00070e:	3701      	adds	r7, #1
1a000710:	e000      	b.n	1a000714 <pll_calc_divs+0x94>
1a000712:	2700      	movs	r7, #0
1a000714:	2f03      	cmp	r7, #3
1a000716:	ddf6      	ble.n	1a000706 <pll_calc_divs+0x86>

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
1a000718:	3601      	adds	r6, #1
1a00071a:	2e04      	cmp	r6, #4
1a00071c:	ddf9      	ble.n	1a000712 <pll_calc_divs+0x92>
                   prev = ABS(freq - fout);
               }
           }
       }
   }
}
1a00071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000720:	094c5eff 	.word	0x094c5eff
1a000724:	1312d000 	.word	0x1312d000

1a000728 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000728:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00072a:	b099      	sub	sp, #100	; 0x64
1a00072c:	4605      	mov	r5, r0
1a00072e:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000730:	4668      	mov	r0, sp
1a000732:	2100      	movs	r1, #0
1a000734:	2260      	movs	r2, #96	; 0x60
1a000736:	f000 fe31 	bl	1a00139c <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00073a:	2380      	movs	r3, #128	; 0x80
1a00073c:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a00073e:	6963      	ldr	r3, [r4, #20]
1a000740:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000742:	7923      	ldrb	r3, [r4, #4]
1a000744:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000748:	4628      	mov	r0, r5
1a00074a:	4669      	mov	r1, sp
1a00074c:	f7ff ff98 	bl	1a000680 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000750:	9b06      	ldr	r3, [sp, #24]
1a000752:	42ab      	cmp	r3, r5
1a000754:	d107      	bne.n	1a000766 <pll_get_frac+0x3e>
       *ppll = pll[0];
1a000756:	466d      	mov	r5, sp
1a000758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00075a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00075c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000764:	e05b      	b.n	1a00081e <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a000766:	1aeb      	subs	r3, r5, r3
1a000768:	d500      	bpl.n	1a00076c <pll_get_frac+0x44>
       return -val;
1a00076a:	425b      	negs	r3, r3
   pll_calc_divs(freq, &pll[0]);
   if (pll[0].fout == freq) {
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a00076c:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a00076e:	2340      	movs	r3, #64	; 0x40
1a000770:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000772:	6963      	ldr	r3, [r4, #20]
1a000774:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000776:	7923      	ldrb	r3, [r4, #4]
1a000778:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a00077c:	4628      	mov	r0, r5
1a00077e:	a910      	add	r1, sp, #64	; 0x40
1a000780:	f7ff ff7e 	bl	1a000680 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000784:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000786:	42ab      	cmp	r3, r5
1a000788:	d107      	bne.n	1a00079a <pll_get_frac+0x72>
       *ppll = pll[2];
1a00078a:	ad10      	add	r5, sp, #64	; 0x40
1a00078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000790:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000798:	e041      	b.n	1a00081e <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a00079a:	1aeb      	subs	r3, r5, r3
1a00079c:	d500      	bpl.n	1a0007a0 <pll_get_frac+0x78>
       return -val;
1a00079e:	425b      	negs	r3, r3
   if (pll[2].fout == freq) {
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0007a0:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0007a2:	2340      	movs	r3, #64	; 0x40
1a0007a4:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0007a6:	6963      	ldr	r3, [r4, #20]
1a0007a8:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0007aa:	7923      	ldrb	r3, [r4, #4]
1a0007ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0007b0:	4628      	mov	r0, r5
1a0007b2:	a908      	add	r1, sp, #32
1a0007b4:	f7ff ff64 	bl	1a000680 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0007b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0007ba:	42ab      	cmp	r3, r5
1a0007bc:	d107      	bne.n	1a0007ce <pll_get_frac+0xa6>
       *ppll = pll[1];
1a0007be:	ad08      	add	r5, sp, #32
1a0007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0007cc:	e027      	b.n	1a00081e <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0007ce:	1aed      	subs	r5, r5, r3
1a0007d0:	d500      	bpl.n	1a0007d4 <pll_get_frac+0xac>
       return -val;
1a0007d2:	426d      	negs	r5, r5
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0007d4:	42ae      	cmp	r6, r5
1a0007d6:	dc11      	bgt.n	1a0007fc <pll_get_frac+0xd4>
       if (diff[0] <= diff[2]) {
1a0007d8:	42be      	cmp	r6, r7
1a0007da:	dc07      	bgt.n	1a0007ec <pll_get_frac+0xc4>
           *ppll = pll[0];
1a0007dc:	466d      	mov	r5, sp
1a0007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007ea:	e018      	b.n	1a00081e <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a0007ec:	ad10      	add	r5, sp, #64	; 0x40
1a0007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007fa:	e010      	b.n	1a00081e <pll_get_frac+0xf6>
       }
   } else {
       if (diff[1] <= diff[2]) {
1a0007fc:	42af      	cmp	r7, r5
1a0007fe:	db07      	blt.n	1a000810 <pll_get_frac+0xe8>
           *ppll = pll[1];
1a000800:	ad08      	add	r5, sp, #32
1a000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000806:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00080a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00080e:	e006      	b.n	1a00081e <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a000810:	ad10      	add	r5, sp, #64	; 0x40
1a000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000816:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00081a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       }
   }
}
1a00081e:	b019      	add	sp, #100	; 0x64
1a000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000822:	bf00      	nop

1a000824 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000824:	b430      	push	{r4, r5}
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000826:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000828:	211c      	movs	r1, #28
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00082a:	e010      	b.n	1a00084e <Chip_Clock_FindBaseClock+0x2a>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00082c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000830:	0052      	lsls	r2, r2, #1
1a000832:	4d0d      	ldr	r5, [pc, #52]	; (1a000868 <Chip_Clock_FindBaseClock+0x44>)
1a000834:	5aaa      	ldrh	r2, [r5, r2]
1a000836:	4282      	cmp	r2, r0
1a000838:	d806      	bhi.n	1a000848 <Chip_Clock_FindBaseClock+0x24>
1a00083a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00083e:	0052      	lsls	r2, r2, #1
1a000840:	442a      	add	r2, r5
1a000842:	8852      	ldrh	r2, [r2, #2]
1a000844:	4282      	cmp	r2, r0
1a000846:	d201      	bcs.n	1a00084c <Chip_Clock_FindBaseClock+0x28>
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000848:	3301      	adds	r3, #1
1a00084a:	e000      	b.n	1a00084e <Chip_Clock_FindBaseClock+0x2a>
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
1a00084c:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00084e:	291c      	cmp	r1, #28
1a000850:	d107      	bne.n	1a000862 <Chip_Clock_FindBaseClock+0x3e>
1a000852:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000856:	0052      	lsls	r2, r2, #1
1a000858:	4c03      	ldr	r4, [pc, #12]	; (1a000868 <Chip_Clock_FindBaseClock+0x44>)
1a00085a:	4422      	add	r2, r4
1a00085c:	7914      	ldrb	r4, [r2, #4]
1a00085e:	428c      	cmp	r4, r1
1a000860:	d1e4      	bne.n	1a00082c <Chip_Clock_FindBaseClock+0x8>
           i++;
       }
   }

   return baseclk;
}
1a000862:	4608      	mov	r0, r1
1a000864:	bc30      	pop	{r4, r5}
1a000866:	4770      	bx	lr
1a000868:	1a001410 	.word	0x1a001410

1a00086c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00086c:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000872:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000874:	4a0d      	ldr	r2, [pc, #52]	; (1a0008ac <Chip_Clock_EnableCrystal+0x40>)
1a000876:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000878:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00087c:	6992      	ldr	r2, [r2, #24]
1a00087e:	428a      	cmp	r2, r1
1a000880:	d001      	beq.n	1a000886 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000882:	4a0a      	ldr	r2, [pc, #40]	; (1a0008ac <Chip_Clock_EnableCrystal+0x40>)
1a000884:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000886:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a00088a:	4a09      	ldr	r2, [pc, #36]	; (1a0008b0 <Chip_Clock_EnableCrystal+0x44>)
1a00088c:	6811      	ldr	r1, [r2, #0]
1a00088e:	4a09      	ldr	r2, [pc, #36]	; (1a0008b4 <Chip_Clock_EnableCrystal+0x48>)
1a000890:	4291      	cmp	r1, r2
1a000892:	d901      	bls.n	1a000898 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000894:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000898:	4a04      	ldr	r2, [pc, #16]	; (1a0008ac <Chip_Clock_EnableCrystal+0x40>)
1a00089a:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a00089c:	9b01      	ldr	r3, [sp, #4]
1a00089e:	1e5a      	subs	r2, r3, #1
1a0008a0:	9201      	str	r2, [sp, #4]
1a0008a2:	2b00      	cmp	r3, #0
1a0008a4:	d1fa      	bne.n	1a00089c <Chip_Clock_EnableCrystal+0x30>
}
1a0008a6:	b002      	add	sp, #8
1a0008a8:	4770      	bx	lr
1a0008aa:	bf00      	nop
1a0008ac:	40050000 	.word	0x40050000
1a0008b0:	1a0014e8 	.word	0x1a0014e8
1a0008b4:	01312cff 	.word	0x01312cff

1a0008b8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0008b8:	3012      	adds	r0, #18
1a0008ba:	4b05      	ldr	r3, [pc, #20]	; (1a0008d0 <Chip_Clock_GetDividerSource+0x18>)
1a0008bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0008c0:	f010 0f01 	tst.w	r0, #1
1a0008c4:	d102      	bne.n	1a0008cc <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0008c6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0008ca:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

   if (reg & 1) {  /* divider is powered down */
       return CLKINPUT_PD;
1a0008cc:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0008ce:	4770      	bx	lr
1a0008d0:	40050000 	.word	0x40050000

1a0008d4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0008d4:	f100 0212 	add.w	r2, r0, #18
1a0008d8:	4b03      	ldr	r3, [pc, #12]	; (1a0008e8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0008da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0008de:	4b03      	ldr	r3, [pc, #12]	; (1a0008ec <Chip_Clock_GetDividerDivisor+0x18>)
1a0008e0:	5c18      	ldrb	r0, [r3, r0]
}
1a0008e2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0008e6:	4770      	bx	lr
1a0008e8:	40050000 	.word	0x40050000
1a0008ec:	1a001408 	.word	0x1a001408

1a0008f0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0008f0:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a0008f2:	2810      	cmp	r0, #16
1a0008f4:	d80a      	bhi.n	1a00090c <Chip_Clock_GetClockInputHz+0x1c>
1a0008f6:	e8df f000 	tbb	[pc, r0]
1a0008fa:	0b42      	.short	0x0b42
1a0008fc:	091f160d 	.word	0x091f160d
1a000900:	2b282522 	.word	0x2b282522
1a000904:	322e0909 	.word	0x322e0909
1a000908:	3a36      	.short	0x3a36
1a00090a:	3e          	.byte	0x3e
1a00090b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a00090c:	2000      	movs	r0, #0
1a00090e:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000910:	481e      	ldr	r0, [pc, #120]	; (1a00098c <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a000912:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000914:	4b1e      	ldr	r3, [pc, #120]	; (1a000990 <Chip_Clock_GetClockInputHz+0xa0>)
1a000916:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00091a:	f003 0307 	and.w	r3, r3, #7
1a00091e:	2b04      	cmp	r3, #4
1a000920:	d130      	bne.n	1a000984 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a000922:	2000      	movs	r0, #0
1a000924:	bd08      	pop	{r3, pc}
           rate = 25000000;
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000926:	4b1a      	ldr	r3, [pc, #104]	; (1a000990 <Chip_Clock_GetClockInputHz+0xa0>)
1a000928:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00092c:	f003 0307 	and.w	r3, r3, #7
1a000930:	2b04      	cmp	r3, #4
1a000932:	d029      	beq.n	1a000988 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000934:	4817      	ldr	r0, [pc, #92]	; (1a000994 <Chip_Clock_GetClockInputHz+0xa4>)
1a000936:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000938:	4b17      	ldr	r3, [pc, #92]	; (1a000998 <Chip_Clock_GetClockInputHz+0xa8>)
1a00093a:	6818      	ldr	r0, [r3, #0]
       break;
1a00093c:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00093e:	4b17      	ldr	r3, [pc, #92]	; (1a00099c <Chip_Clock_GetClockInputHz+0xac>)
1a000940:	6818      	ldr	r0, [r3, #0]
       break;
1a000942:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000944:	4b16      	ldr	r3, [pc, #88]	; (1a0009a0 <Chip_Clock_GetClockInputHz+0xb0>)
1a000946:	6818      	ldr	r0, [r3, #0]
       break;
1a000948:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00094a:	4b15      	ldr	r3, [pc, #84]	; (1a0009a0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00094c:	6858      	ldr	r0, [r3, #4]
       break;
1a00094e:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000950:	f000 f86a 	bl	1a000a28 <Chip_Clock_GetMainPLLHz>
       break;
1a000954:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000956:	2100      	movs	r1, #0
1a000958:	f000 f89a 	bl	1a000a90 <Chip_Clock_GetDivRate>
       break;
1a00095c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00095e:	2101      	movs	r1, #1
1a000960:	f000 f896 	bl	1a000a90 <Chip_Clock_GetDivRate>
       break;
1a000964:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000966:	2102      	movs	r1, #2
1a000968:	f000 f892 	bl	1a000a90 <Chip_Clock_GetDivRate>
       break;
1a00096c:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00096e:	2103      	movs	r1, #3
1a000970:	f000 f88e 	bl	1a000a90 <Chip_Clock_GetDivRate>
       break;
1a000974:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000976:	2104      	movs	r1, #4
1a000978:	f000 f88a 	bl	1a000a90 <Chip_Clock_GetDivRate>
       break;
1a00097c:	bd08      	pop	{r3, pc}
{
   uint32_t rate = 0;

   switch (input) {
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
1a00097e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000982:	bd08      	pop	{r3, pc}
       break;

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a000984:	4803      	ldr	r0, [pc, #12]	; (1a000994 <Chip_Clock_GetClockInputHz+0xa4>)
1a000986:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           rate = 25000000; /* MII uses 25 MHz */
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
1a000988:	4806      	ldr	r0, [pc, #24]	; (1a0009a4 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a00098a:	bd08      	pop	{r3, pc}
1a00098c:	00b71b00 	.word	0x00b71b00
1a000990:	40043000 	.word	0x40043000
1a000994:	017d7840 	.word	0x017d7840
1a000998:	1a0014ec 	.word	0x1a0014ec
1a00099c:	1a0014e8 	.word	0x1a0014e8
1a0009a0:	10000000 	.word	0x10000000
1a0009a4:	02faf080 	.word	0x02faf080

1a0009a8 <Chip_Clock_CalcMainPLLValue>:
   while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0009a8:	b538      	push	{r3, r4, r5, lr}
1a0009aa:	4605      	mov	r5, r0
1a0009ac:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0009ae:	7908      	ldrb	r0, [r1, #4]
1a0009b0:	f7ff ff9e 	bl	1a0008f0 <Chip_Clock_GetClockInputHz>
1a0009b4:	6160      	str	r0, [r4, #20]

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0009b6:	4b19      	ldr	r3, [pc, #100]	; (1a000a1c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0009b8:	442b      	add	r3, r5
1a0009ba:	4a19      	ldr	r2, [pc, #100]	; (1a000a20 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0009bc:	4293      	cmp	r3, r2
1a0009be:	d821      	bhi.n	1a000a04 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0009c0:	b318      	cbz	r0, 1a000a0a <Chip_Clock_CalcMainPLLValue+0x62>
       return -1;
   }

   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0009c2:	2380      	movs	r3, #128	; 0x80
1a0009c4:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0009c6:	2300      	movs	r3, #0
1a0009c8:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0009ca:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0009cc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0009d0:	6123      	str	r3, [r4, #16]

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0009d2:	4a14      	ldr	r2, [pc, #80]	; (1a000a24 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0009d4:	4295      	cmp	r5, r2
1a0009d6:	d903      	bls.n	1a0009e0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0009d8:	fb03 f000 	mul.w	r0, r3, r0
1a0009dc:	42a8      	cmp	r0, r5
1a0009de:	d007      	beq.n	1a0009f0 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a0009e0:	4628      	mov	r0, r5
1a0009e2:	4621      	mov	r1, r4
1a0009e4:	f7ff fea0 	bl	1a000728 <pll_get_frac>
       if (!ppll->nsel) {
1a0009e8:	68a3      	ldr	r3, [r4, #8]
1a0009ea:	b18b      	cbz	r3, 1a000a10 <Chip_Clock_CalcMainPLLValue+0x68>
           return -1;
       }
       ppll->nsel --;
1a0009ec:	3b01      	subs	r3, #1
1a0009ee:	60a3      	str	r3, [r4, #8]
   }

   if (ppll->msel == 0) {
1a0009f0:	6923      	ldr	r3, [r4, #16]
1a0009f2:	b183      	cbz	r3, 1a000a16 <Chip_Clock_CalcMainPLLValue+0x6e>
       return - 1;
   }

   if (ppll->psel) {
1a0009f4:	68e2      	ldr	r2, [r4, #12]
1a0009f6:	b10a      	cbz	r2, 1a0009fc <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a0009f8:	3a01      	subs	r2, #1
1a0009fa:	60e2      	str	r2, [r4, #12]
   }

   ppll->msel --;
1a0009fc:	3b01      	subs	r3, #1
1a0009fe:	6123      	str	r3, [r4, #16]

   return 0;
1a000a00:	2000      	movs	r0, #0
1a000a02:	bd38      	pop	{r3, r4, r5, pc}
{
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
       return -1;
1a000a04:	f04f 30ff 	mov.w	r0, #4294967295
1a000a08:	bd38      	pop	{r3, r4, r5, pc}
1a000a0a:	f04f 30ff 	mov.w	r0, #4294967295
1a000a0e:	bd38      	pop	{r3, r4, r5, pc}
   ppll->msel = freq / ppll->fin;

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
       pll_get_frac(freq, ppll);
       if (!ppll->nsel) {
           return -1;
1a000a10:	f04f 30ff 	mov.w	r0, #4294967295
1a000a14:	bd38      	pop	{r3, r4, r5, pc}
       }
       ppll->nsel --;
   }

   if (ppll->msel == 0) {
       return - 1;
1a000a16:	f04f 30ff 	mov.w	r0, #4294967295
   }

   ppll->msel --;

   return 0;
}
1a000a1a:	bd38      	pop	{r3, r4, r5, pc}
1a000a1c:	ff6b3a10 	.word	0xff6b3a10
1a000a20:	0b940510 	.word	0x0b940510
1a000a24:	094c5eff 	.word	0x094c5eff

1a000a28 <Chip_Clock_GetMainPLLHz>:
   return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a000a28:	b570      	push	{r4, r5, r6, lr}
1a000a2a:	b082      	sub	sp, #8
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000a2c:	4d16      	ldr	r5, [pc, #88]	; (1a000a88 <Chip_Clock_GetMainPLLHz+0x60>)
1a000a2e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000a30:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000a34:	f7ff ff5c 	bl	1a0008f0 <Chip_Clock_GetClockInputHz>
1a000a38:	4606      	mov	r6, r0
   uint32_t msel, nsel, psel, direct, fbsel;
   uint32_t m, n, p;
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000a3a:	4b14      	ldr	r3, [pc, #80]	; (1a000a8c <Chip_Clock_GetMainPLLHz+0x64>)
1a000a3c:	6818      	ldr	r0, [r3, #0]
1a000a3e:	9001      	str	r0, [sp, #4]

   /* No lock? */
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000a40:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000a42:	f010 0001 	ands.w	r0, r0, #1
1a000a46:	d01d      	beq.n	1a000a84 <Chip_Clock_GetMainPLLHz+0x5c>
       return 0;
   }

   msel = (PLLReg >> 16) & 0xFF;
1a000a48:	f3c4 4007 	ubfx	r0, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000a4c:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000a50:	f3c4 2101 	ubfx	r1, r4, #8, #2
   direct = (PLLReg >> 7) & 0x1;
   fbsel = (PLLReg >> 6) & 0x1;
1a000a54:	f3c4 1580 	ubfx	r5, r4, #6, #1

   m = msel + 1;
1a000a58:	1c43      	adds	r3, r0, #1
   n = nsel + 1;
1a000a5a:	3201      	adds	r2, #1
   p = ptab[psel];
1a000a5c:	a802      	add	r0, sp, #8
1a000a5e:	4401      	add	r1, r0
1a000a60:	f811 0c04 	ldrb.w	r0, [r1, #-4]

   if (direct || fbsel) {
1a000a64:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a68:	d100      	bne.n	1a000a6c <Chip_Clock_GetMainPLLHz+0x44>
1a000a6a:	b125      	cbz	r5, 1a000a76 <Chip_Clock_GetMainPLLHz+0x4e>
       return m * (freq / n);
1a000a6c:	fbb6 f0f2 	udiv	r0, r6, r2
1a000a70:	fb03 f000 	mul.w	r0, r3, r0
1a000a74:	e006      	b.n	1a000a84 <Chip_Clock_GetMainPLLHz+0x5c>
   }

   return (m / (2 * p)) * (freq / n);
1a000a76:	0040      	lsls	r0, r0, #1
1a000a78:	fbb3 f3f0 	udiv	r3, r3, r0
1a000a7c:	fbb6 f0f2 	udiv	r0, r6, r2
1a000a80:	fb00 f003 	mul.w	r0, r0, r3
}
1a000a84:	b002      	add	sp, #8
1a000a86:	bd70      	pop	{r4, r5, r6, pc}
1a000a88:	40050000 	.word	0x40050000
1a000a8c:	1a001404 	.word	0x1a001404

1a000a90 <Chip_Clock_GetDivRate>:
   return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000a90:	b538      	push	{r3, r4, r5, lr}
1a000a92:	460c      	mov	r4, r1
   CHIP_CGU_CLKIN_T input;
   uint32_t div;

   input = Chip_Clock_GetDividerSource(divider);
1a000a94:	4608      	mov	r0, r1
1a000a96:	f7ff ff0f 	bl	1a0008b8 <Chip_Clock_GetDividerSource>
1a000a9a:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000a9c:	4620      	mov	r0, r4
1a000a9e:	f7ff ff19 	bl	1a0008d4 <Chip_Clock_GetDividerDivisor>
1a000aa2:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000aa4:	4628      	mov	r0, r5
1a000aa6:	f7ff ff23 	bl	1a0008f0 <Chip_Clock_GetClockInputHz>
1a000aaa:	3401      	adds	r4, #1
}
1a000aac:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ab0:	bd38      	pop	{r3, r4, r5, pc}
1a000ab2:	bf00      	nop

1a000ab4 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000ab4:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000ab6:	0085      	lsls	r5, r0, #2
1a000ab8:	4c0d      	ldr	r4, [pc, #52]	; (1a000af0 <Chip_Clock_SetBaseClock+0x3c>)
1a000aba:	5965      	ldr	r5, [r4, r5]

   if (BaseClock < CLK_BASE_NONE) {
1a000abc:	281b      	cmp	r0, #27
1a000abe:	d80f      	bhi.n	1a000ae0 <Chip_Clock_SetBaseClock+0x2c>
       if (Input != CLKINPUT_PD) {
1a000ac0:	2911      	cmp	r1, #17
1a000ac2:	d012      	beq.n	1a000aea <Chip_Clock_SetBaseClock+0x36>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000ac4:	4c0b      	ldr	r4, [pc, #44]	; (1a000af4 <Chip_Clock_SetBaseClock+0x40>)
1a000ac6:	402c      	ands	r4, r5

           if (autoblocken) {
1a000ac8:	b10a      	cbz	r2, 1a000ace <Chip_Clock_SetBaseClock+0x1a>
               reg |= (1 << 11);
1a000aca:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000ace:	b10b      	cbz	r3, 1a000ad4 <Chip_Clock_SetBaseClock+0x20>
               reg |= (1 << 0);
1a000ad0:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000ad4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000ad8:	0080      	lsls	r0, r0, #2
1a000ada:	4b05      	ldr	r3, [pc, #20]	; (1a000af0 <Chip_Clock_SetBaseClock+0x3c>)
1a000adc:	501c      	str	r4, [r3, r0]
1a000ade:	e004      	b.n	1a000aea <Chip_Clock_SetBaseClock+0x36>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000ae0:	f045 0501 	orr.w	r5, r5, #1
1a000ae4:	0080      	lsls	r0, r0, #2
1a000ae6:	4b02      	ldr	r3, [pc, #8]	; (1a000af0 <Chip_Clock_SetBaseClock+0x3c>)
1a000ae8:	501d      	str	r5, [r3, r0]
   }
}
1a000aea:	bc30      	pop	{r4, r5}
1a000aec:	4770      	bx	lr
1a000aee:	bf00      	nop
1a000af0:	4005005c 	.word	0x4005005c
1a000af4:	e0fff7fe 	.word	0xe0fff7fe

1a000af8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000af8:	281b      	cmp	r0, #27
1a000afa:	d808      	bhi.n	1a000b0e <Chip_Clock_GetBaseClock+0x16>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000afc:	0080      	lsls	r0, r0, #2
1a000afe:	4b06      	ldr	r3, [pc, #24]	; (1a000b18 <Chip_Clock_GetBaseClock+0x20>)
1a000b00:	5818      	ldr	r0, [r3, r0]

   /* base clock is powered down? */
   if (reg & 1) {
1a000b02:	f010 0f01 	tst.w	r0, #1
1a000b06:	d104      	bne.n	1a000b12 <Chip_Clock_GetBaseClock+0x1a>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b08:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b0c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
       return CLKINPUT_PD;
1a000b0e:	2011      	movs	r0, #17
1a000b10:	4770      	bx	lr

   reg = LPC_CGU->BASE_CLK[BaseClock];

   /* base clock is powered down? */
   if (reg & 1) {
       return CLKINPUT_PD;
1a000b12:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000b14:	4770      	bx	lr
1a000b16:	bf00      	nop
1a000b18:	4005005c 	.word	0x4005005c

1a000b1c <Chip_Clock_GetBaseClocktHz>:
   return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a000b1c:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000b1e:	f7ff ffeb 	bl	1a000af8 <Chip_Clock_GetBaseClock>
1a000b22:	f7ff fee5 	bl	1a0008f0 <Chip_Clock_GetClockInputHz>
}
1a000b26:	bd08      	pop	{r3, pc}

1a000b28 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000b28:	b909      	cbnz	r1, 1a000b2e <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;
1a000b2a:	2101      	movs	r1, #1
1a000b2c:	e000      	b.n	1a000b30 <Chip_Clock_EnableOpts+0x8>

   if (autoen) {
       reg |= (1 << 1);
1a000b2e:	2103      	movs	r1, #3
   }
   if (wakeupen) {
1a000b30:	b10a      	cbz	r2, 1a000b36 <Chip_Clock_EnableOpts+0xe>
       reg |= (1 << 2);
1a000b32:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000b36:	2b02      	cmp	r3, #2
1a000b38:	d101      	bne.n	1a000b3e <Chip_Clock_EnableOpts+0x16>
       reg |= (1 << 5);
1a000b3a:	f041 0120 	orr.w	r1, r1, #32
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000b3e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000b42:	d305      	bcc.n	1a000b50 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000b44:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000b48:	4b04      	ldr	r3, [pc, #16]	; (1a000b5c <Chip_Clock_EnableOpts+0x34>)
1a000b4a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000b4e:	4770      	bx	lr
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000b50:	3020      	adds	r0, #32
1a000b52:	4b03      	ldr	r3, [pc, #12]	; (1a000b60 <Chip_Clock_EnableOpts+0x38>)
1a000b54:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000b58:	4770      	bx	lr
1a000b5a:	bf00      	nop
1a000b5c:	40052000 	.word	0x40052000
1a000b60:	40051000 	.word	0x40051000

1a000b64 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000b64:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000b66:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000b6a:	d305      	bcc.n	1a000b78 <Chip_Clock_GetRate+0x14>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000b6c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000b70:	4a0d      	ldr	r2, [pc, #52]	; (1a000ba8 <Chip_Clock_GetRate+0x44>)
1a000b72:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000b76:	e004      	b.n	1a000b82 <Chip_Clock_GetRate+0x1e>
   }
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000b78:	f100 0320 	add.w	r3, r0, #32
1a000b7c:	4a0b      	ldr	r2, [pc, #44]	; (1a000bac <Chip_Clock_GetRate+0x48>)
1a000b7e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000b82:	f014 0f01 	tst.w	r4, #1
1a000b86:	d00c      	beq.n	1a000ba2 <Chip_Clock_GetRate+0x3e>
       /* Get base clock for this peripheral clock */
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000b88:	f7ff fe4c 	bl	1a000824 <Chip_Clock_FindBaseClock>

       /* Get base clock rate */
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000b8c:	f7ff ffc6 	bl	1a000b1c <Chip_Clock_GetBaseClocktHz>

       /* Get divider for this clock */
       if (((reg >> 5) & 0x7) == 0) {
1a000b90:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000b94:	d101      	bne.n	1a000b9a <Chip_Clock_GetRate+0x36>
           div = 1;
1a000b96:	2301      	movs	r3, #1
1a000b98:	e000      	b.n	1a000b9c <Chip_Clock_GetRate+0x38>
       }
       else {
           div = 2;/* No other dividers supported */
1a000b9a:	2302      	movs	r3, #2

       }
       rate = rate / div;
1a000b9c:	fbb0 f0f3 	udiv	r0, r0, r3
1a000ba0:	bd10      	pop	{r4, pc}
   }
   else {
       rate = 0;
1a000ba2:	2000      	movs	r0, #0
   }

   return rate;
}
1a000ba4:	bd10      	pop	{r4, pc}
1a000ba6:	bf00      	nop
1a000ba8:	40052000 	.word	0x40052000
1a000bac:	40051000 	.word	0x40051000

1a000bb0 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000bb0:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000bb2:	4b10      	ldr	r3, [pc, #64]	; (1a000bf4 <fpuInit+0x44>)
1a000bb4:	681b      	ldr	r3, [r3, #0]
1a000bb6:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000bb8:	4b0f      	ldr	r3, [pc, #60]	; (1a000bf8 <fpuInit+0x48>)
1a000bba:	681b      	ldr	r3, [r3, #0]
1a000bbc:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000bbe:	9a02      	ldr	r2, [sp, #8]
1a000bc0:	4b0e      	ldr	r3, [pc, #56]	; (1a000bfc <fpuInit+0x4c>)
1a000bc2:	429a      	cmp	r2, r3
1a000bc4:	d105      	bne.n	1a000bd2 <fpuInit+0x22>
1a000bc6:	9a01      	ldr	r2, [sp, #4]
1a000bc8:	4b0d      	ldr	r3, [pc, #52]	; (1a000c00 <fpuInit+0x50>)
1a000bca:	429a      	cmp	r2, r3
1a000bcc:	d003      	beq.n	1a000bd6 <fpuInit+0x26>
1a000bce:	2300      	movs	r3, #0
1a000bd0:	e002      	b.n	1a000bd8 <fpuInit+0x28>
1a000bd2:	2300      	movs	r3, #0
1a000bd4:	e000      	b.n	1a000bd8 <fpuInit+0x28>
1a000bd6:	2301      	movs	r3, #1

   if (vfpPresent) {
1a000bd8:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000bdc:	d008      	beq.n	1a000bf0 <fpuInit+0x40>
       Cpacr = *regCpacr;
1a000bde:	4a09      	ldr	r2, [pc, #36]	; (1a000c04 <fpuInit+0x54>)
1a000be0:	6813      	ldr	r3, [r2, #0]
1a000be2:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000be4:	9b03      	ldr	r3, [sp, #12]
1a000be6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000bea:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000bec:	9b03      	ldr	r3, [sp, #12]
1a000bee:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000bf0:	b004      	add	sp, #16
1a000bf2:	4770      	bx	lr
1a000bf4:	e000ef40 	.word	0xe000ef40
1a000bf8:	e000ef44 	.word	0xe000ef44
1a000bfc:	10110021 	.word	0x10110021
1a000c00:	11000011 	.word	0x11000011
1a000c04:	e000ed88 	.word	0xe000ed88

1a000c08 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a000c08:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c0a:	4a17      	ldr	r2, [pc, #92]	; (1a000c68 <ResetISR+0x60>)
1a000c0c:	4b17      	ldr	r3, [pc, #92]	; (1a000c6c <ResetISR+0x64>)
1a000c0e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c10:	4a17      	ldr	r2, [pc, #92]	; (1a000c70 <ResetISR+0x68>)
1a000c12:	3304      	adds	r3, #4
1a000c14:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c16:	2300      	movs	r3, #0
1a000c18:	e005      	b.n	1a000c26 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c1a:	f04f 31ff 	mov.w	r1, #4294967295
1a000c1e:	4a15      	ldr	r2, [pc, #84]	; (1a000c74 <ResetISR+0x6c>)
1a000c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c24:	3301      	adds	r3, #1
1a000c26:	2b07      	cmp	r3, #7
1a000c28:	d9f7      	bls.n	1a000c1a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a000c2a:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a000c2c:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a000c2e:	f000 f8d1 	bl	1a000dd4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a000c32:	4b11      	ldr	r3, [pc, #68]	; (1a000c78 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000c34:	e007      	b.n	1a000c46 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000c36:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000c3a:	6818      	ldr	r0, [r3, #0]
1a000c3c:	6859      	ldr	r1, [r3, #4]
1a000c3e:	689a      	ldr	r2, [r3, #8]
1a000c40:	f7ff faae 	bl	1a0001a0 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000c44:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000c46:	4a0d      	ldr	r2, [pc, #52]	; (1a000c7c <ResetISR+0x74>)
1a000c48:	4293      	cmp	r3, r2
1a000c4a:	d3f4      	bcc.n	1a000c36 <ResetISR+0x2e>
1a000c4c:	e006      	b.n	1a000c5c <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a000c4e:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a000c50:	f854 0b08 	ldr.w	r0, [r4], #8
1a000c54:	6859      	ldr	r1, [r3, #4]
1a000c56:	f7ff fab1 	bl	1a0001bc <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000c5a:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a000c5c:	4a08      	ldr	r2, [pc, #32]	; (1a000c80 <ResetISR+0x78>)
1a000c5e:	4293      	cmp	r3, r2
1a000c60:	d3f5      	bcc.n	1a000c4e <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a000c62:	f7ff fb99 	bl	1a000398 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a000c66:	e7fe      	b.n	1a000c66 <ResetISR+0x5e>
1a000c68:	10df1000 	.word	0x10df1000
1a000c6c:	40053100 	.word	0x40053100
1a000c70:	01dff7ff 	.word	0x01dff7ff
1a000c74:	e000e280 	.word	0xe000e280
1a000c78:	1a000114 	.word	0x1a000114
1a000c7c:	1a000150 	.word	0x1a000150
1a000c80:	1a000178 	.word	0x1a000178

1a000c84 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000c84:	b410      	push	{r4}
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000c86:	2300      	movs	r3, #0
1a000c88:	e00c      	b.n	1a000ca4 <Board_SetupMuxing+0x20>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000c8a:	4a09      	ldr	r2, [pc, #36]	; (1a000cb0 <Board_SetupMuxing+0x2c>)
1a000c8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000c90:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000c94:	784a      	ldrb	r2, [r1, #1]
1a000c96:	8848      	ldrh	r0, [r1, #2]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000c98:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000c9c:	4905      	ldr	r1, [pc, #20]	; (1a000cb4 <Board_SetupMuxing+0x30>)
1a000c9e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000ca2:	3301      	adds	r3, #1
1a000ca4:	2b17      	cmp	r3, #23
1a000ca6:	d9f0      	bls.n	1a000c8a <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000cac:	4770      	bx	lr
1a000cae:	bf00      	nop
1a000cb0:	1a001488 	.word	0x1a001488
1a000cb4:	40086000 	.word	0x40086000

1a000cb8 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000cb8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000cba:	4a17      	ldr	r2, [pc, #92]	; (1a000d18 <Board_SetupClocking+0x60>)
1a000cbc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cc4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cc8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000ccc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cd4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cd8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000cdc:	2006      	movs	r0, #6
1a000cde:	490f      	ldr	r1, [pc, #60]	; (1a000d1c <Board_SetupClocking+0x64>)
1a000ce0:	2201      	movs	r2, #1
1a000ce2:	f7ff fc15 	bl	1a000510 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000ce6:	2400      	movs	r4, #0
1a000ce8:	e00a      	b.n	1a000d00 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000cea:	4a0d      	ldr	r2, [pc, #52]	; (1a000d20 <Board_SetupClocking+0x68>)
1a000cec:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000cf0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000cf4:	7859      	ldrb	r1, [r3, #1]
1a000cf6:	789a      	ldrb	r2, [r3, #2]
1a000cf8:	78db      	ldrb	r3, [r3, #3]
1a000cfa:	f7ff fedb 	bl	1a000ab4 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000cfe:	3401      	adds	r4, #1
1a000d00:	2c02      	cmp	r4, #2
1a000d02:	d9f2      	bls.n	1a000cea <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000d04:	4b04      	ldr	r3, [pc, #16]	; (1a000d18 <Board_SetupClocking+0x60>)
1a000d06:	685a      	ldr	r2, [r3, #4]
1a000d08:	f022 020c 	bic.w	r2, r2, #12
1a000d0c:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000d0e:	685a      	ldr	r2, [r3, #4]
1a000d10:	f042 0203 	orr.w	r2, r2, #3
1a000d14:	605a      	str	r2, [r3, #4]
1a000d16:	bd10      	pop	{r4, pc}
1a000d18:	40043000 	.word	0x40043000
1a000d1c:	0c28cb00 	.word	0x0c28cb00
1a000d20:	1a00147c 	.word	0x1a00147c

1a000d24 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d24:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000d26:	f7ff ffad 	bl	1a000c84 <Board_SetupMuxing>
   Board_SetupClocking();
1a000d2a:	f7ff ffc5 	bl	1a000cb8 <Board_SetupClocking>
1a000d2e:	bd08      	pop	{r3, pc}

1a000d30 <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a000d30:	b470      	push	{r4, r5, r6}
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000d32:	2200      	movs	r2, #0
1a000d34:	e014      	b.n	1a000d60 <Board_LED_Init+0x30>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000d36:	4b0c      	ldr	r3, [pc, #48]	; (1a000d68 <Board_LED_Init+0x38>)
1a000d38:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000d3c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000d40:	7859      	ldrb	r1, [r3, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000d42:	480a      	ldr	r0, [pc, #40]	; (1a000d6c <Board_LED_Init+0x3c>)
1a000d44:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000d48:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a000d4c:	2301      	movs	r3, #1
1a000d4e:	408b      	lsls	r3, r1
1a000d50:	4333      	orrs	r3, r6
1a000d52:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return Nothing
 * @note   This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
   pGPIO->B[port][pin] = setting;
1a000d56:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a000d5a:	2300      	movs	r3, #0
1a000d5c:	5443      	strb	r3, [r0, r1]

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000d5e:	3201      	adds	r2, #1
1a000d60:	2a05      	cmp	r2, #5
1a000d62:	d9e8      	bls.n	1a000d36 <Board_LED_Init+0x6>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000d64:	bc70      	pop	{r4, r5, r6}
1a000d66:	4770      	bx	lr
1a000d68:	1a0014f0 	.word	0x1a0014f0
1a000d6c:	400f4000 	.word	0x400f4000

1a000d70 <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d70:	4b03      	ldr	r3, [pc, #12]	; (1a000d80 <Board_UART_Init+0x10>)
1a000d72:	2212      	movs	r2, #18
1a000d74:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000d78:	22d1      	movs	r2, #209	; 0xd1
1a000d7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000d7e:	4770      	bx	lr
1a000d80:	40086000 	.word	0x40086000

1a000d84 <Board_Debug_Init>:
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
}

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a000d84:	b510      	push	{r4, lr}
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a000d86:	4c08      	ldr	r4, [pc, #32]	; (1a000da8 <Board_Debug_Init+0x24>)
1a000d88:	4620      	mov	r0, r4
1a000d8a:	f7ff fff1 	bl	1a000d70 <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a000d8e:	4620      	mov	r0, r4
1a000d90:	f7ff fb24 	bl	1a0003dc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000d94:	4620      	mov	r0, r4
1a000d96:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000d9a:	f7ff fb47 	bl	1a00042c <Chip_UART_SetBaudFDR>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000d9e:	2303      	movs	r3, #3
1a000da0:	60e3      	str	r3, [r4, #12]
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000da2:	2301      	movs	r3, #1
1a000da4:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000da6:	bd10      	pop	{r4, pc}
1a000da8:	400c1000 	.word	0x400c1000

1a000dac <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000dac:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000dae:	f7ff ffe9 	bl	1a000d84 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000db2:	4806      	ldr	r0, [pc, #24]	; (1a000dcc <Board_Init+0x20>)
1a000db4:	f7ff fc58 	bl	1a000668 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000db8:	f7ff ffba 	bl	1a000d30 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000dbc:	4a04      	ldr	r2, [pc, #16]	; (1a000dd0 <Board_Init+0x24>)
1a000dbe:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000dc2:	f043 0304 	orr.w	r3, r3, #4
1a000dc6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000dca:	bd08      	pop	{r3, pc}
1a000dcc:	400f4000 	.word	0x400f4000
1a000dd0:	40043000 	.word	0x40043000

1a000dd4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000dd4:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000dd6:	f7ff feeb 	bl	1a000bb0 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000dda:	f7ff ffa3 	bl	1a000d24 <Board_SystemInit>
1a000dde:	bd08      	pop	{r3, pc}

1a000de0 <asmSum>:

 * etiqueta que tiene que coincidir con el nombre de la funcion.
*/

asmSum:
    push {lr}  /* guardamos la direccion de retorno en la pila */
1a000de0:	b500      	push	{lr}
	add r0, r1 /* r0 = r0 + r1 */
1a000de2:	4408      	add	r0, r1
	pop {pc}   /* retorno */
1a000de4:	bd00      	pop	{pc}

1a000de6 <productoEscalar16ASM>:
/*
 * el array se incrementa cada 4, en la ultima posicion la tengo en vector + (longitud - 1)*4
 */

productoEscalar16ASM:
   push {auxiliar, lr}  									/* guardamos la direccion de retorno en la pila */
1a000de6:	b510      	push	{r4, lr}
   sub longitud, 1											/* decremento el registro longitud */
1a000de8:	f1a2 0201 	sub.w	r2, r2, #1

1a000dec <lazo>:

lazo:
   ldrsh 	auxiliar, [vectorIn, longitud, LSL 1]  			/* levanto un elemento desde el final hacia abajo */
1a000dec:	f930 4012 	ldrsh.w	r4, [r0, r2, lsl #1]
   mul 		auxiliar, escalar, auxiliar						/* multiplico el elemento por un escalar */
1a000df0:	fb03 f404 	mul.w	r4, r3, r4
   strh 	auxiliar, [vectorOut, longitud, LSL 1]
1a000df4:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
   subs 	longitud, 1						/* decremento el "contador" */
1a000df8:	3a01      	subs	r2, #1
   bpl 		lazo
1a000dfa:	d5f7      	bpl.n	1a000dec <lazo>


	/* las unicas instrucciones con las que accedo a memoria son load y store */

	pop {auxiliar, pc}   /* retorno */
1a000dfc:	bd10      	pop	{r4, pc}
	...

1a000e00 <__aeabi_uldivmod>:
1a000e00:	b953      	cbnz	r3, 1a000e18 <__aeabi_uldivmod+0x18>
1a000e02:	b94a      	cbnz	r2, 1a000e18 <__aeabi_uldivmod+0x18>
1a000e04:	2900      	cmp	r1, #0
1a000e06:	bf08      	it	eq
1a000e08:	2800      	cmpeq	r0, #0
1a000e0a:	bf1c      	itt	ne
1a000e0c:	f04f 31ff 	movne.w	r1, #4294967295
1a000e10:	f04f 30ff 	movne.w	r0, #4294967295
1a000e14:	f000 b83c 	b.w	1a000e90 <__aeabi_idiv0>
1a000e18:	b082      	sub	sp, #8
1a000e1a:	46ec      	mov	ip, sp
1a000e1c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a000e20:	f000 f81e 	bl	1a000e60 <__gnu_uldivmod_helper>
1a000e24:	f8dd e004 	ldr.w	lr, [sp, #4]
1a000e28:	b002      	add	sp, #8
1a000e2a:	bc0c      	pop	{r2, r3}
1a000e2c:	4770      	bx	lr
1a000e2e:	bf00      	nop

1a000e30 <__gnu_ldivmod_helper>:
1a000e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e34:	9c06      	ldr	r4, [sp, #24]
1a000e36:	4615      	mov	r5, r2
1a000e38:	4606      	mov	r6, r0
1a000e3a:	460f      	mov	r7, r1
1a000e3c:	4698      	mov	r8, r3
1a000e3e:	f000 f829 	bl	1a000e94 <__divdi3>
1a000e42:	fb05 f301 	mul.w	r3, r5, r1
1a000e46:	fb00 3808 	mla	r8, r0, r8, r3
1a000e4a:	fba5 2300 	umull	r2, r3, r5, r0
1a000e4e:	1ab2      	subs	r2, r6, r2
1a000e50:	4443      	add	r3, r8
1a000e52:	eb67 0303 	sbc.w	r3, r7, r3
1a000e56:	e9c4 2300 	strd	r2, r3, [r4]
1a000e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e5e:	bf00      	nop

1a000e60 <__gnu_uldivmod_helper>:
1a000e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e64:	9c06      	ldr	r4, [sp, #24]
1a000e66:	4690      	mov	r8, r2
1a000e68:	4606      	mov	r6, r0
1a000e6a:	460f      	mov	r7, r1
1a000e6c:	461d      	mov	r5, r3
1a000e6e:	f000 f95f 	bl	1a001130 <__udivdi3>
1a000e72:	fb00 f505 	mul.w	r5, r0, r5
1a000e76:	fba0 2308 	umull	r2, r3, r0, r8
1a000e7a:	fb08 5501 	mla	r5, r8, r1, r5
1a000e7e:	1ab2      	subs	r2, r6, r2
1a000e80:	442b      	add	r3, r5
1a000e82:	eb67 0303 	sbc.w	r3, r7, r3
1a000e86:	e9c4 2300 	strd	r2, r3, [r4]
1a000e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e8e:	bf00      	nop

1a000e90 <__aeabi_idiv0>:
1a000e90:	4770      	bx	lr
1a000e92:	bf00      	nop

1a000e94 <__divdi3>:
1a000e94:	2900      	cmp	r1, #0
1a000e96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a000e9a:	f2c0 80a6 	blt.w	1a000fea <__divdi3+0x156>
1a000e9e:	2600      	movs	r6, #0
1a000ea0:	2b00      	cmp	r3, #0
1a000ea2:	f2c0 809c 	blt.w	1a000fde <__divdi3+0x14a>
1a000ea6:	4688      	mov	r8, r1
1a000ea8:	4694      	mov	ip, r2
1a000eaa:	469e      	mov	lr, r3
1a000eac:	4615      	mov	r5, r2
1a000eae:	4604      	mov	r4, r0
1a000eb0:	460f      	mov	r7, r1
1a000eb2:	2b00      	cmp	r3, #0
1a000eb4:	d13d      	bne.n	1a000f32 <__divdi3+0x9e>
1a000eb6:	428a      	cmp	r2, r1
1a000eb8:	d959      	bls.n	1a000f6e <__divdi3+0xda>
1a000eba:	fab2 f382 	clz	r3, r2
1a000ebe:	b13b      	cbz	r3, 1a000ed0 <__divdi3+0x3c>
1a000ec0:	f1c3 0220 	rsb	r2, r3, #32
1a000ec4:	409f      	lsls	r7, r3
1a000ec6:	fa20 f202 	lsr.w	r2, r0, r2
1a000eca:	409d      	lsls	r5, r3
1a000ecc:	4317      	orrs	r7, r2
1a000ece:	409c      	lsls	r4, r3
1a000ed0:	0c29      	lsrs	r1, r5, #16
1a000ed2:	0c22      	lsrs	r2, r4, #16
1a000ed4:	fbb7 fef1 	udiv	lr, r7, r1
1a000ed8:	b2a8      	uxth	r0, r5
1a000eda:	fb01 771e 	mls	r7, r1, lr, r7
1a000ede:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a000ee2:	fb00 f30e 	mul.w	r3, r0, lr
1a000ee6:	42bb      	cmp	r3, r7
1a000ee8:	d90a      	bls.n	1a000f00 <__divdi3+0x6c>
1a000eea:	197f      	adds	r7, r7, r5
1a000eec:	f10e 32ff 	add.w	r2, lr, #4294967295
1a000ef0:	f080 8105 	bcs.w	1a0010fe <__divdi3+0x26a>
1a000ef4:	42bb      	cmp	r3, r7
1a000ef6:	f240 8102 	bls.w	1a0010fe <__divdi3+0x26a>
1a000efa:	f1ae 0e02 	sub.w	lr, lr, #2
1a000efe:	442f      	add	r7, r5
1a000f00:	1aff      	subs	r7, r7, r3
1a000f02:	b2a4      	uxth	r4, r4
1a000f04:	fbb7 f3f1 	udiv	r3, r7, r1
1a000f08:	fb01 7713 	mls	r7, r1, r3, r7
1a000f0c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a000f10:	fb00 f003 	mul.w	r0, r0, r3
1a000f14:	42b8      	cmp	r0, r7
1a000f16:	d908      	bls.n	1a000f2a <__divdi3+0x96>
1a000f18:	197f      	adds	r7, r7, r5
1a000f1a:	f103 32ff 	add.w	r2, r3, #4294967295
1a000f1e:	f080 80f0 	bcs.w	1a001102 <__divdi3+0x26e>
1a000f22:	42b8      	cmp	r0, r7
1a000f24:	f240 80ed 	bls.w	1a001102 <__divdi3+0x26e>
1a000f28:	3b02      	subs	r3, #2
1a000f2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a000f2e:	2200      	movs	r2, #0
1a000f30:	e003      	b.n	1a000f3a <__divdi3+0xa6>
1a000f32:	428b      	cmp	r3, r1
1a000f34:	d90f      	bls.n	1a000f56 <__divdi3+0xc2>
1a000f36:	2200      	movs	r2, #0
1a000f38:	4613      	mov	r3, r2
1a000f3a:	1c34      	adds	r4, r6, #0
1a000f3c:	bf18      	it	ne
1a000f3e:	2401      	movne	r4, #1
1a000f40:	4260      	negs	r0, r4
1a000f42:	f04f 0500 	mov.w	r5, #0
1a000f46:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a000f4a:	4058      	eors	r0, r3
1a000f4c:	4051      	eors	r1, r2
1a000f4e:	1900      	adds	r0, r0, r4
1a000f50:	4169      	adcs	r1, r5
1a000f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a000f56:	fab3 f283 	clz	r2, r3
1a000f5a:	2a00      	cmp	r2, #0
1a000f5c:	f040 8086 	bne.w	1a00106c <__divdi3+0x1d8>
1a000f60:	428b      	cmp	r3, r1
1a000f62:	d302      	bcc.n	1a000f6a <__divdi3+0xd6>
1a000f64:	4584      	cmp	ip, r0
1a000f66:	f200 80db 	bhi.w	1a001120 <__divdi3+0x28c>
1a000f6a:	2301      	movs	r3, #1
1a000f6c:	e7e5      	b.n	1a000f3a <__divdi3+0xa6>
1a000f6e:	b912      	cbnz	r2, 1a000f76 <__divdi3+0xe2>
1a000f70:	2301      	movs	r3, #1
1a000f72:	fbb3 f5f2 	udiv	r5, r3, r2
1a000f76:	fab5 f085 	clz	r0, r5
1a000f7a:	2800      	cmp	r0, #0
1a000f7c:	d13b      	bne.n	1a000ff6 <__divdi3+0x162>
1a000f7e:	1b78      	subs	r0, r7, r5
1a000f80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a000f84:	fa1f fc85 	uxth.w	ip, r5
1a000f88:	2201      	movs	r2, #1
1a000f8a:	fbb0 f8fe 	udiv	r8, r0, lr
1a000f8e:	0c21      	lsrs	r1, r4, #16
1a000f90:	fb0e 0718 	mls	r7, lr, r8, r0
1a000f94:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a000f98:	fb0c f308 	mul.w	r3, ip, r8
1a000f9c:	42bb      	cmp	r3, r7
1a000f9e:	d907      	bls.n	1a000fb0 <__divdi3+0x11c>
1a000fa0:	197f      	adds	r7, r7, r5
1a000fa2:	f108 31ff 	add.w	r1, r8, #4294967295
1a000fa6:	d202      	bcs.n	1a000fae <__divdi3+0x11a>
1a000fa8:	42bb      	cmp	r3, r7
1a000faa:	f200 80bd 	bhi.w	1a001128 <__divdi3+0x294>
1a000fae:	4688      	mov	r8, r1
1a000fb0:	1aff      	subs	r7, r7, r3
1a000fb2:	b2a4      	uxth	r4, r4
1a000fb4:	fbb7 f3fe 	udiv	r3, r7, lr
1a000fb8:	fb0e 7713 	mls	r7, lr, r3, r7
1a000fbc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a000fc0:	fb0c fc03 	mul.w	ip, ip, r3
1a000fc4:	45bc      	cmp	ip, r7
1a000fc6:	d907      	bls.n	1a000fd8 <__divdi3+0x144>
1a000fc8:	197f      	adds	r7, r7, r5
1a000fca:	f103 31ff 	add.w	r1, r3, #4294967295
1a000fce:	d202      	bcs.n	1a000fd6 <__divdi3+0x142>
1a000fd0:	45bc      	cmp	ip, r7
1a000fd2:	f200 80a7 	bhi.w	1a001124 <__divdi3+0x290>
1a000fd6:	460b      	mov	r3, r1
1a000fd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a000fdc:	e7ad      	b.n	1a000f3a <__divdi3+0xa6>
1a000fde:	4252      	negs	r2, r2
1a000fe0:	ea6f 0606 	mvn.w	r6, r6
1a000fe4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a000fe8:	e75d      	b.n	1a000ea6 <__divdi3+0x12>
1a000fea:	4240      	negs	r0, r0
1a000fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a000ff0:	f04f 36ff 	mov.w	r6, #4294967295
1a000ff4:	e754      	b.n	1a000ea0 <__divdi3+0xc>
1a000ff6:	f1c0 0220 	rsb	r2, r0, #32
1a000ffa:	fa24 f102 	lsr.w	r1, r4, r2
1a000ffe:	fa07 f300 	lsl.w	r3, r7, r0
1a001002:	4085      	lsls	r5, r0
1a001004:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001008:	40d7      	lsrs	r7, r2
1a00100a:	4319      	orrs	r1, r3
1a00100c:	fbb7 f2fe 	udiv	r2, r7, lr
1a001010:	0c0b      	lsrs	r3, r1, #16
1a001012:	fb0e 7712 	mls	r7, lr, r2, r7
1a001016:	fa1f fc85 	uxth.w	ip, r5
1a00101a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a00101e:	fb0c f702 	mul.w	r7, ip, r2
1a001022:	429f      	cmp	r7, r3
1a001024:	fa04 f400 	lsl.w	r4, r4, r0
1a001028:	d907      	bls.n	1a00103a <__divdi3+0x1a6>
1a00102a:	195b      	adds	r3, r3, r5
1a00102c:	f102 30ff 	add.w	r0, r2, #4294967295
1a001030:	d274      	bcs.n	1a00111c <__divdi3+0x288>
1a001032:	429f      	cmp	r7, r3
1a001034:	d972      	bls.n	1a00111c <__divdi3+0x288>
1a001036:	3a02      	subs	r2, #2
1a001038:	442b      	add	r3, r5
1a00103a:	1bdf      	subs	r7, r3, r7
1a00103c:	b289      	uxth	r1, r1
1a00103e:	fbb7 f8fe 	udiv	r8, r7, lr
1a001042:	fb0e 7318 	mls	r3, lr, r8, r7
1a001046:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00104a:	fb0c f708 	mul.w	r7, ip, r8
1a00104e:	429f      	cmp	r7, r3
1a001050:	d908      	bls.n	1a001064 <__divdi3+0x1d0>
1a001052:	195b      	adds	r3, r3, r5
1a001054:	f108 31ff 	add.w	r1, r8, #4294967295
1a001058:	d25c      	bcs.n	1a001114 <__divdi3+0x280>
1a00105a:	429f      	cmp	r7, r3
1a00105c:	d95a      	bls.n	1a001114 <__divdi3+0x280>
1a00105e:	f1a8 0802 	sub.w	r8, r8, #2
1a001062:	442b      	add	r3, r5
1a001064:	1bd8      	subs	r0, r3, r7
1a001066:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a00106a:	e78e      	b.n	1a000f8a <__divdi3+0xf6>
1a00106c:	f1c2 0320 	rsb	r3, r2, #32
1a001070:	fa2c f103 	lsr.w	r1, ip, r3
1a001074:	fa0e fe02 	lsl.w	lr, lr, r2
1a001078:	fa20 f703 	lsr.w	r7, r0, r3
1a00107c:	ea41 0e0e 	orr.w	lr, r1, lr
1a001080:	fa08 f002 	lsl.w	r0, r8, r2
1a001084:	fa28 f103 	lsr.w	r1, r8, r3
1a001088:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a00108c:	4338      	orrs	r0, r7
1a00108e:	fbb1 f8f5 	udiv	r8, r1, r5
1a001092:	0c03      	lsrs	r3, r0, #16
1a001094:	fb05 1118 	mls	r1, r5, r8, r1
1a001098:	fa1f f78e 	uxth.w	r7, lr
1a00109c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0010a0:	fb07 f308 	mul.w	r3, r7, r8
1a0010a4:	428b      	cmp	r3, r1
1a0010a6:	fa0c fc02 	lsl.w	ip, ip, r2
1a0010aa:	d909      	bls.n	1a0010c0 <__divdi3+0x22c>
1a0010ac:	eb11 010e 	adds.w	r1, r1, lr
1a0010b0:	f108 39ff 	add.w	r9, r8, #4294967295
1a0010b4:	d230      	bcs.n	1a001118 <__divdi3+0x284>
1a0010b6:	428b      	cmp	r3, r1
1a0010b8:	d92e      	bls.n	1a001118 <__divdi3+0x284>
1a0010ba:	f1a8 0802 	sub.w	r8, r8, #2
1a0010be:	4471      	add	r1, lr
1a0010c0:	1ac9      	subs	r1, r1, r3
1a0010c2:	b280      	uxth	r0, r0
1a0010c4:	fbb1 f3f5 	udiv	r3, r1, r5
1a0010c8:	fb05 1113 	mls	r1, r5, r3, r1
1a0010cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0010d0:	fb07 f703 	mul.w	r7, r7, r3
1a0010d4:	428f      	cmp	r7, r1
1a0010d6:	d908      	bls.n	1a0010ea <__divdi3+0x256>
1a0010d8:	eb11 010e 	adds.w	r1, r1, lr
1a0010dc:	f103 30ff 	add.w	r0, r3, #4294967295
1a0010e0:	d216      	bcs.n	1a001110 <__divdi3+0x27c>
1a0010e2:	428f      	cmp	r7, r1
1a0010e4:	d914      	bls.n	1a001110 <__divdi3+0x27c>
1a0010e6:	3b02      	subs	r3, #2
1a0010e8:	4471      	add	r1, lr
1a0010ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0010ee:	1bc9      	subs	r1, r1, r7
1a0010f0:	fba3 890c 	umull	r8, r9, r3, ip
1a0010f4:	4549      	cmp	r1, r9
1a0010f6:	d309      	bcc.n	1a00110c <__divdi3+0x278>
1a0010f8:	d005      	beq.n	1a001106 <__divdi3+0x272>
1a0010fa:	2200      	movs	r2, #0
1a0010fc:	e71d      	b.n	1a000f3a <__divdi3+0xa6>
1a0010fe:	4696      	mov	lr, r2
1a001100:	e6fe      	b.n	1a000f00 <__divdi3+0x6c>
1a001102:	4613      	mov	r3, r2
1a001104:	e711      	b.n	1a000f2a <__divdi3+0x96>
1a001106:	4094      	lsls	r4, r2
1a001108:	4544      	cmp	r4, r8
1a00110a:	d2f6      	bcs.n	1a0010fa <__divdi3+0x266>
1a00110c:	3b01      	subs	r3, #1
1a00110e:	e7f4      	b.n	1a0010fa <__divdi3+0x266>
1a001110:	4603      	mov	r3, r0
1a001112:	e7ea      	b.n	1a0010ea <__divdi3+0x256>
1a001114:	4688      	mov	r8, r1
1a001116:	e7a5      	b.n	1a001064 <__divdi3+0x1d0>
1a001118:	46c8      	mov	r8, r9
1a00111a:	e7d1      	b.n	1a0010c0 <__divdi3+0x22c>
1a00111c:	4602      	mov	r2, r0
1a00111e:	e78c      	b.n	1a00103a <__divdi3+0x1a6>
1a001120:	4613      	mov	r3, r2
1a001122:	e70a      	b.n	1a000f3a <__divdi3+0xa6>
1a001124:	3b02      	subs	r3, #2
1a001126:	e757      	b.n	1a000fd8 <__divdi3+0x144>
1a001128:	f1a8 0802 	sub.w	r8, r8, #2
1a00112c:	442f      	add	r7, r5
1a00112e:	e73f      	b.n	1a000fb0 <__divdi3+0x11c>

1a001130 <__udivdi3>:
1a001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001134:	2b00      	cmp	r3, #0
1a001136:	d144      	bne.n	1a0011c2 <__udivdi3+0x92>
1a001138:	428a      	cmp	r2, r1
1a00113a:	4615      	mov	r5, r2
1a00113c:	4604      	mov	r4, r0
1a00113e:	d94f      	bls.n	1a0011e0 <__udivdi3+0xb0>
1a001140:	fab2 f782 	clz	r7, r2
1a001144:	460e      	mov	r6, r1
1a001146:	b14f      	cbz	r7, 1a00115c <__udivdi3+0x2c>
1a001148:	f1c7 0320 	rsb	r3, r7, #32
1a00114c:	40b9      	lsls	r1, r7
1a00114e:	fa20 f603 	lsr.w	r6, r0, r3
1a001152:	fa02 f507 	lsl.w	r5, r2, r7
1a001156:	430e      	orrs	r6, r1
1a001158:	fa00 f407 	lsl.w	r4, r0, r7
1a00115c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001160:	0c23      	lsrs	r3, r4, #16
1a001162:	fbb6 f0fe 	udiv	r0, r6, lr
1a001166:	b2af      	uxth	r7, r5
1a001168:	fb0e 6110 	mls	r1, lr, r0, r6
1a00116c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001170:	fb07 f100 	mul.w	r1, r7, r0
1a001174:	4299      	cmp	r1, r3
1a001176:	d909      	bls.n	1a00118c <__udivdi3+0x5c>
1a001178:	195b      	adds	r3, r3, r5
1a00117a:	f100 32ff 	add.w	r2, r0, #4294967295
1a00117e:	f080 80ec 	bcs.w	1a00135a <__udivdi3+0x22a>
1a001182:	4299      	cmp	r1, r3
1a001184:	f240 80e9 	bls.w	1a00135a <__udivdi3+0x22a>
1a001188:	3802      	subs	r0, #2
1a00118a:	442b      	add	r3, r5
1a00118c:	1a5a      	subs	r2, r3, r1
1a00118e:	b2a4      	uxth	r4, r4
1a001190:	fbb2 f3fe 	udiv	r3, r2, lr
1a001194:	fb0e 2213 	mls	r2, lr, r3, r2
1a001198:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a00119c:	fb07 f703 	mul.w	r7, r7, r3
1a0011a0:	4297      	cmp	r7, r2
1a0011a2:	d908      	bls.n	1a0011b6 <__udivdi3+0x86>
1a0011a4:	1952      	adds	r2, r2, r5
1a0011a6:	f103 31ff 	add.w	r1, r3, #4294967295
1a0011aa:	f080 80d8 	bcs.w	1a00135e <__udivdi3+0x22e>
1a0011ae:	4297      	cmp	r7, r2
1a0011b0:	f240 80d5 	bls.w	1a00135e <__udivdi3+0x22e>
1a0011b4:	3b02      	subs	r3, #2
1a0011b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0011ba:	2600      	movs	r6, #0
1a0011bc:	4631      	mov	r1, r6
1a0011be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0011c2:	428b      	cmp	r3, r1
1a0011c4:	d847      	bhi.n	1a001256 <__udivdi3+0x126>
1a0011c6:	fab3 f683 	clz	r6, r3
1a0011ca:	2e00      	cmp	r6, #0
1a0011cc:	d148      	bne.n	1a001260 <__udivdi3+0x130>
1a0011ce:	428b      	cmp	r3, r1
1a0011d0:	d302      	bcc.n	1a0011d8 <__udivdi3+0xa8>
1a0011d2:	4282      	cmp	r2, r0
1a0011d4:	f200 80cd 	bhi.w	1a001372 <__udivdi3+0x242>
1a0011d8:	2001      	movs	r0, #1
1a0011da:	4631      	mov	r1, r6
1a0011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0011e0:	b912      	cbnz	r2, 1a0011e8 <__udivdi3+0xb8>
1a0011e2:	2501      	movs	r5, #1
1a0011e4:	fbb5 f5f2 	udiv	r5, r5, r2
1a0011e8:	fab5 f885 	clz	r8, r5
1a0011ec:	f1b8 0f00 	cmp.w	r8, #0
1a0011f0:	d177      	bne.n	1a0012e2 <__udivdi3+0x1b2>
1a0011f2:	1b4a      	subs	r2, r1, r5
1a0011f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0011f8:	b2af      	uxth	r7, r5
1a0011fa:	2601      	movs	r6, #1
1a0011fc:	fbb2 f0fe 	udiv	r0, r2, lr
1a001200:	0c23      	lsrs	r3, r4, #16
1a001202:	fb0e 2110 	mls	r1, lr, r0, r2
1a001206:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a00120a:	fb07 f300 	mul.w	r3, r7, r0
1a00120e:	428b      	cmp	r3, r1
1a001210:	d907      	bls.n	1a001222 <__udivdi3+0xf2>
1a001212:	1949      	adds	r1, r1, r5
1a001214:	f100 32ff 	add.w	r2, r0, #4294967295
1a001218:	d202      	bcs.n	1a001220 <__udivdi3+0xf0>
1a00121a:	428b      	cmp	r3, r1
1a00121c:	f200 80ba 	bhi.w	1a001394 <__udivdi3+0x264>
1a001220:	4610      	mov	r0, r2
1a001222:	1ac9      	subs	r1, r1, r3
1a001224:	b2a4      	uxth	r4, r4
1a001226:	fbb1 f3fe 	udiv	r3, r1, lr
1a00122a:	fb0e 1113 	mls	r1, lr, r3, r1
1a00122e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001232:	fb07 f703 	mul.w	r7, r7, r3
1a001236:	42a7      	cmp	r7, r4
1a001238:	d908      	bls.n	1a00124c <__udivdi3+0x11c>
1a00123a:	1964      	adds	r4, r4, r5
1a00123c:	f103 32ff 	add.w	r2, r3, #4294967295
1a001240:	f080 808f 	bcs.w	1a001362 <__udivdi3+0x232>
1a001244:	42a7      	cmp	r7, r4
1a001246:	f240 808c 	bls.w	1a001362 <__udivdi3+0x232>
1a00124a:	3b02      	subs	r3, #2
1a00124c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001250:	4631      	mov	r1, r6
1a001252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001256:	2600      	movs	r6, #0
1a001258:	4630      	mov	r0, r6
1a00125a:	4631      	mov	r1, r6
1a00125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001260:	f1c6 0420 	rsb	r4, r6, #32
1a001264:	fa22 f504 	lsr.w	r5, r2, r4
1a001268:	40b3      	lsls	r3, r6
1a00126a:	432b      	orrs	r3, r5
1a00126c:	fa20 fc04 	lsr.w	ip, r0, r4
1a001270:	fa01 f706 	lsl.w	r7, r1, r6
1a001274:	fa21 f504 	lsr.w	r5, r1, r4
1a001278:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a00127c:	ea4c 0707 	orr.w	r7, ip, r7
1a001280:	fbb5 f8fe 	udiv	r8, r5, lr
1a001284:	0c39      	lsrs	r1, r7, #16
1a001286:	fb0e 5518 	mls	r5, lr, r8, r5
1a00128a:	fa1f fc83 	uxth.w	ip, r3
1a00128e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a001292:	fb0c f108 	mul.w	r1, ip, r8
1a001296:	42a9      	cmp	r1, r5
1a001298:	fa02 f206 	lsl.w	r2, r2, r6
1a00129c:	d904      	bls.n	1a0012a8 <__udivdi3+0x178>
1a00129e:	18ed      	adds	r5, r5, r3
1a0012a0:	f108 34ff 	add.w	r4, r8, #4294967295
1a0012a4:	d367      	bcc.n	1a001376 <__udivdi3+0x246>
1a0012a6:	46a0      	mov	r8, r4
1a0012a8:	1a6d      	subs	r5, r5, r1
1a0012aa:	b2bf      	uxth	r7, r7
1a0012ac:	fbb5 f4fe 	udiv	r4, r5, lr
1a0012b0:	fb0e 5514 	mls	r5, lr, r4, r5
1a0012b4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a0012b8:	fb0c fc04 	mul.w	ip, ip, r4
1a0012bc:	458c      	cmp	ip, r1
1a0012be:	d904      	bls.n	1a0012ca <__udivdi3+0x19a>
1a0012c0:	18c9      	adds	r1, r1, r3
1a0012c2:	f104 35ff 	add.w	r5, r4, #4294967295
1a0012c6:	d35c      	bcc.n	1a001382 <__udivdi3+0x252>
1a0012c8:	462c      	mov	r4, r5
1a0012ca:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a0012ce:	ebcc 0101 	rsb	r1, ip, r1
1a0012d2:	fba4 2302 	umull	r2, r3, r4, r2
1a0012d6:	4299      	cmp	r1, r3
1a0012d8:	d348      	bcc.n	1a00136c <__udivdi3+0x23c>
1a0012da:	d044      	beq.n	1a001366 <__udivdi3+0x236>
1a0012dc:	4620      	mov	r0, r4
1a0012de:	2600      	movs	r6, #0
1a0012e0:	e76c      	b.n	1a0011bc <__udivdi3+0x8c>
1a0012e2:	f1c8 0420 	rsb	r4, r8, #32
1a0012e6:	fa01 f308 	lsl.w	r3, r1, r8
1a0012ea:	fa05 f508 	lsl.w	r5, r5, r8
1a0012ee:	fa20 f704 	lsr.w	r7, r0, r4
1a0012f2:	40e1      	lsrs	r1, r4
1a0012f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0012f8:	431f      	orrs	r7, r3
1a0012fa:	fbb1 f6fe 	udiv	r6, r1, lr
1a0012fe:	0c3a      	lsrs	r2, r7, #16
1a001300:	fb0e 1116 	mls	r1, lr, r6, r1
1a001304:	fa1f fc85 	uxth.w	ip, r5
1a001308:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a00130c:	fb0c f206 	mul.w	r2, ip, r6
1a001310:	429a      	cmp	r2, r3
1a001312:	fa00 f408 	lsl.w	r4, r0, r8
1a001316:	d907      	bls.n	1a001328 <__udivdi3+0x1f8>
1a001318:	195b      	adds	r3, r3, r5
1a00131a:	f106 31ff 	add.w	r1, r6, #4294967295
1a00131e:	d237      	bcs.n	1a001390 <__udivdi3+0x260>
1a001320:	429a      	cmp	r2, r3
1a001322:	d935      	bls.n	1a001390 <__udivdi3+0x260>
1a001324:	3e02      	subs	r6, #2
1a001326:	442b      	add	r3, r5
1a001328:	1a9b      	subs	r3, r3, r2
1a00132a:	b2bf      	uxth	r7, r7
1a00132c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001330:	fb0e 3310 	mls	r3, lr, r0, r3
1a001334:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a001338:	fb0c f100 	mul.w	r1, ip, r0
1a00133c:	4299      	cmp	r1, r3
1a00133e:	d907      	bls.n	1a001350 <__udivdi3+0x220>
1a001340:	195b      	adds	r3, r3, r5
1a001342:	f100 32ff 	add.w	r2, r0, #4294967295
1a001346:	d221      	bcs.n	1a00138c <__udivdi3+0x25c>
1a001348:	4299      	cmp	r1, r3
1a00134a:	d91f      	bls.n	1a00138c <__udivdi3+0x25c>
1a00134c:	3802      	subs	r0, #2
1a00134e:	442b      	add	r3, r5
1a001350:	1a5a      	subs	r2, r3, r1
1a001352:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a001356:	4667      	mov	r7, ip
1a001358:	e750      	b.n	1a0011fc <__udivdi3+0xcc>
1a00135a:	4610      	mov	r0, r2
1a00135c:	e716      	b.n	1a00118c <__udivdi3+0x5c>
1a00135e:	460b      	mov	r3, r1
1a001360:	e729      	b.n	1a0011b6 <__udivdi3+0x86>
1a001362:	4613      	mov	r3, r2
1a001364:	e772      	b.n	1a00124c <__udivdi3+0x11c>
1a001366:	40b0      	lsls	r0, r6
1a001368:	4290      	cmp	r0, r2
1a00136a:	d2b7      	bcs.n	1a0012dc <__udivdi3+0x1ac>
1a00136c:	1e60      	subs	r0, r4, #1
1a00136e:	2600      	movs	r6, #0
1a001370:	e724      	b.n	1a0011bc <__udivdi3+0x8c>
1a001372:	4630      	mov	r0, r6
1a001374:	e722      	b.n	1a0011bc <__udivdi3+0x8c>
1a001376:	42a9      	cmp	r1, r5
1a001378:	d995      	bls.n	1a0012a6 <__udivdi3+0x176>
1a00137a:	f1a8 0802 	sub.w	r8, r8, #2
1a00137e:	441d      	add	r5, r3
1a001380:	e792      	b.n	1a0012a8 <__udivdi3+0x178>
1a001382:	458c      	cmp	ip, r1
1a001384:	d9a0      	bls.n	1a0012c8 <__udivdi3+0x198>
1a001386:	3c02      	subs	r4, #2
1a001388:	4419      	add	r1, r3
1a00138a:	e79e      	b.n	1a0012ca <__udivdi3+0x19a>
1a00138c:	4610      	mov	r0, r2
1a00138e:	e7df      	b.n	1a001350 <__udivdi3+0x220>
1a001390:	460e      	mov	r6, r1
1a001392:	e7c9      	b.n	1a001328 <__udivdi3+0x1f8>
1a001394:	3802      	subs	r0, #2
1a001396:	4429      	add	r1, r5
1a001398:	e743      	b.n	1a001222 <__udivdi3+0xf2>
1a00139a:	bf00      	nop

1a00139c <memset>:
1a00139c:	4402      	add	r2, r0
1a00139e:	4603      	mov	r3, r0
1a0013a0:	4293      	cmp	r3, r2
1a0013a2:	d002      	beq.n	1a0013aa <memset+0xe>
1a0013a4:	f803 1b01 	strb.w	r1, [r3], #1
1a0013a8:	e7fa      	b.n	1a0013a0 <memset+0x4>
1a0013aa:	4770      	bx	lr

1a0013ac <UART_BClock>:
1a0013ac:	01c2 01a2 0182 0162                         ......b.

1a0013b4 <UART_PClock>:
1a0013b4:	0081 0082 00a1 00a2                         ........

1a0013bc <InitClkStates>:
1a0013bc:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0013cc:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0013dc:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0013ec:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0013fc:	111a 0001 111b 0001 0201 0804 0f03 0f0f     ................
1a00140c:	00ff 0000                                   ....

1a001410 <periph_to_base>:
1a001410:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001420:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001430:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001440:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001450:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001460:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001470:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a00147c <InitClkStates>:
1a00147c:	0308 0001 0307 0001 0f01 0101               ............

1a001488 <pinmuxing>:
1a001488:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a001498:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a0014a8:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a0014b8:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a0014c8:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a0014d8:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a0014e8 <OscRateIn>:
1a0014e8:	1b00 00b7                                   ....

1a0014ec <ExtRateIn>:
1a0014ec:	0000 0000                                   ....

1a0014f0 <gpioLEDBits>:
1a0014f0:	0e00 0b01 0c01 0005 0105 0205               ............
