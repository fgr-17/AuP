
out/arquitecturaDeMicroprocesadores.elf:     file format elf32-littlearm
out/arquitecturaDeMicroprocesadores.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0012a5

Program Header:
0x70000001 off    0x00009e24 vaddr 0x1a001e24 paddr 0x1a001e24 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00001e2c memsz 0x00001e2c flags r-x
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e24  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  10000000  10000000  00009e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00009e2c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00009e2c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00009e2c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00009e2c  2**2
                  CONTENTS
  6 .bss          0000000c  10000000  10000000  00008000  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00009e2c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00009e2c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00009e2c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00009e2c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001e24  1a001e24  00009e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00009e2c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00009e2c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00009e2c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00009e2c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00009e2c  2**2
                  CONTENTS
 17 .noinit       00000000  1000000c  1000000c  00009e2c  2**2
                  CONTENTS
 18 .debug_info   00006e1d  00000000  00000000  00009e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000011ff  00000000  00000000  00010c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00000620  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000508  00000000  00000000  00012468  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00006b9e  00000000  00000000  00012970  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000532d  00000000  00000000  0001950e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    000198c9  00000000  00000000  0001e83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  00038104  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000037  00000000  00000000  00038174  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000016d8  00000000  00000000  000381ac  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000000 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001e24 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000000c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 maxC.c
00000000 l    df *ABS*	00000000 main.c
1a000350 l     F .text	0000000e initHardware
1a000388 l     F .text	00000044 Ejercicio7
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0003cc l     F .text	00000018 Chip_UART_TXDisable
1a0003e4 l     F .text	0000001a Chip_UART_SetupFIFOS
1a000400 l     F .text	0000001a Chip_UART_ConfigData
1a00041c l     F .text	0000001e Chip_UART_EnableDivisorAccess
1a00043c l     F .text	0000001e Chip_UART_DisableDivisorAccess
1a00045c l     F .text	00000026 Chip_UART_SetDivisorLatches
1a001cd4 l     O .text	00000008 UART_PClock
1a001cdc l     O .text	00000008 UART_BClock
1a000484 l     F .text	00000060 Chip_UART_GetIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0006dc l     F .text	0000001c Chip_Clock_DisableMainPLL
1a0006f8 l     F .text	00000040 Chip_Clock_SetupMainPLL
1a000738 l     F .text	00000024 Chip_Clock_MainPLLLocked
1a001ce4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001d2c l     O .text	0000006c periph_to_base
10000000 l     O .bss	00000008 audio_usb_pll_freq
1a0008e4 l     F .text	00000022 ABS
1a000908 l     F .text	0000011c pll_calc_divs
1a000a24 l     F .text	00000176 pll_get_frac
1a000b9c l     F .text	00000040 Chip_Clock_GetDivRate
1a000bdc l     F .text	00000088 Chip_Clock_FindBaseClock
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001368 l     F .text	00000030 Chip_SCU_PinMuxSet
1a001398 l     F .text	00000048 Chip_SCU_SetPinMuxing
1a0013e0 l     F .text	00000054 Chip_CREG_SetFlashAcceleration
1a001da4 l     O .text	0000000c InitClkStates
1a001db0 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a0014d8 l     F .text	00000030 Chip_SCU_PinMuxSet
1a001508 l     F .text	00000028 Chip_ENET_RMIIEnable
1a001530 l     F .text	00000036 Chip_GPIO_SetPinState
1a001568 l     F .text	0000003c Chip_GPIO_SetPinDIROutput
1a0015a4 l     F .text	00000018 Chip_UART_TXEnable
1a0015bc l     F .text	0000001a Chip_UART_ConfigData
1a001e18 l     O .text	0000000c gpioLEDBits
1a00162c l     F .text	0000005c Board_LED_Init
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 out/app/src/suma.o
00000000 l    df *ABS*	00000000 out/app/src/maxASM.o
1a0016d8 l       .text	00000000 lazo
1a0016e2 l       .text	00000000 cierroLazo
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a001e2c l       .ARM.exidx	00000000 __exidx_end
1a001e2c l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a001e24 l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000000c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a000e68 g     F .text	00000040 Chip_Clock_GetDividerSource
1a001750 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a00023c  w    F .text	00000006 TIMER2_IRQHandler
1a000224  w    F .text	00000006 DebugMon_Handler
1a00023c  w    F .text	00000006 RIT_IRQHandler
1a00023c  w    F .text	00000006 ADCHS_IRQHandler
1a001784 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a00023c  w    F .text	00000006 FLASH_EEPROM_IRQHandler
1a00023c  w    F .text	00000006 I2C0_IRQHandler
1a0001fc  w    F .text	00000006 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000234  w    F .text	00000006 SysTick_Handler
1a00023c  w    F .text	00000006 SDIO_IRQHandler
1a00023c  w    F .text	00000006 ATIMER_IRQHandler
1a00022c  w    F .text	00000006 PendSV_Handler
1a0001f4  w    F .text	00000006 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a00023c  w    F .text	00000006 I2C1_IRQHandler
1a00023c  w    F .text	00000006 UART1_IRQHandler
1a00023c  w    F .text	00000006 GPIO5_IRQHandler
1a00023c  w    F .text	00000006 CAN1_IRQHandler
1a00023c  w    F .text	00000006 USB1_IRQHandler
1a00023c  w    F .text	00000006 I2S0_IRQHandler
1a00023c  w    F .text	00000006 TIMER3_IRQHandler
1a001020 g     F .text	00000024 Chip_Clock_GetBaseClocktHz
1a00023c  w    F .text	00000006 UART0_IRQHandler
1a0001bc g     F .text	00000036 bss_init
1a00023c  w    F .text	00000006 SGPIO_IRQHandler
1a0016f0 g     F .text	00000000 .hidden __aeabi_uldivmod
1000000c g       .noinit	00000000 _noinit
10000008 g     O .bss	00000004 SystemCoreClock
1a0004e4 g     F .text	00000084 Chip_UART_Init
1a00023c  w    F .text	00000006 ADC0_IRQHandler
1a000214  w    F .text	00000006 UsageFault_Handler
1a000300 g     F .text	00000050 maxC
1a0011a8 g     F .text	00000088 Chip_Clock_GetRate
1a00023c  w    F .text	00000006 GPIO6_IRQHandler
1a001448 g     F .text	00000080 Board_SetupClocking
1a001e10 g     O .text	00000004 ExtRateIn
1a00023c  w    F .text	00000006 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00023c  w    F .text	00000006 GPIO1_IRQHandler
1a00023c  w    F .text	00000006 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1a001a20 g     F .text	0000026a .hidden __udivdi3
1a00023c  w    F .text	00000006 ADC1_IRQHandler
1a001688 g     F .text	00000024 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00023c  w    F .text	00000006 RTC_IRQHandler
1000000c g       .bss	00000000 _ebss
1a00023c  w    F .text	00000006 TIMER0_IRQHandler
1a00023c  w    F .text	00000006 SPI_IRQHandler
1a00023c  w    F .text	00000006 LCD_IRQHandler
1a000c64 g     F .text	0000006c Chip_Clock_EnableCrystal
1a000178 g     F .text	00000042 data_init
1a00023c  w    F .text	00000006 TIMER1_IRQHandler
1a00023c  w    F .text	00000006 UART2_IRQHandler
1a000da8 g     F .text	000000c0 Chip_Clock_GetMainPLLHz
1a00023c  w    F .text	00000006 GPIO2_IRQHandler
1a0010e0 g     F .text	0000004c Chip_Clock_GetBaseClock
10000000 g       .bss	00000000 _bss
1a00023c  w    F .text	00000006 I2S1_IRQHandler
1a0008b8 g     F .text	00000012 Chip_GPIO_Init
1a001e14 g     O .text	00000004 OscRateIn
1000000c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00023c  w    F .text	00000006 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001780  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00023c  w    F .text	00000006 USB0_IRQHandler
1a00023c  w    F .text	00000006 GPIO3_IRQHandler
1a00023c  w    F .text	00000006 SCT_IRQHandler
1a000ea8 g     F .text	00000038 Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001c8c g     F .text	00000010 memset
1a000204  w    F .text	00000006 MemManage_Handler
1a000360 g     F .text	00000026 main
1a00023c  w    F .text	00000006 WDT_IRQHandler
1a00021c  w    F .text	00000006 SVC_Handler
1a00023c  w    F .text	00000006 GPIO7_IRQHandler
1a00112c g     F .text	0000007c Chip_Clock_EnableOpts
1a000ee0 g     F .text	00000140 Chip_Clock_GetClockInputHz
1a001230 g     F .text	00000074 fpuInit
1a000cd0 g     F .text	000000d8 Chip_Clock_CalcMainPLLValue
1a0016ac g     F .text	0000001c SystemInit
1a00023c  w    F .text	00000006 SPIFI_IRQHandler
1a00023c  w    F .text	00000006 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001434 g     F .text	00000014 Board_SetupMuxing
1a000568 g     F .text	00000174 Chip_UART_SetBaudFDR
1a00023c  w    F .text	00000006 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00023c  w    F .text	00000006 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a00023c  w    F .text	00000006 GINT0_IRQHandler
1a00023c  w    F .text	00000006 DAC_IRQHandler
1a0015fc g     F .text	00000030 Board_Debug_Init
10000000 g       .data	00000000 _edata
1a0016d0 g     F .text	00000000 maxASM
1a0016c8 g     F .text	00000000 asmSum
1a00023c  w    F .text	00000006 M0SUB_IRQHandler
1a00075c g     F .text	0000015c Chip_SetupCoreClock
1a00023c  w    F .text	00000006 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0012a4 g     F .text	000000c4 ResetISR
1a0008cc g     F .text	00000018 SystemCoreClockUpdate
1a00023c  w    F .text	00000006 DMA_IRQHandler
1a00023c  w    F .text	00000006 EVRT_IRQHandler
1a001780  w    F .text	00000002 .hidden __aeabi_idiv0
1a00020c  w    F .text	00000006 BusFault_Handler
1a00023c  w    F .text	00000006 UART3_IRQHandler
1a00023c  w    F .text	00000006 MCPWM_IRQHandler
1a001720 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00023c  w    F .text	00000006 M0APP_IRQHandler
1a00023c  w    F .text	00000006 GINT1_IRQHandler
1a0015d8 g     F .text	00000022 Board_UART_Init
1a001044 g     F .text	0000009c Chip_Clock_SetBaseClock
1a00023c  w    F .text	00000006 GPIO4_IRQHandler
1a0014c8 g     F .text	0000000e Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 a5 12 00 1a f5 01 00 1a fd 01 00 1a     ................
1a000010:	05 02 00 1a 0d 02 00 1a 15 02 00 1a 00 00 00 00     ................
	...
1a00002c:	1d 02 00 1a 25 02 00 1a 00 00 00 00 2d 02 00 1a     ....%.......-...
1a00003c:	35 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     5...=...=...=...
1a00004c:	00 00 00 00 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     ....=...=...=...
1a00005c:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a00006c:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a00007c:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a00008c:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a00009c:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a0000ac:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a0000bc:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a0000cc:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a0000dc:	3d 02 00 1a 3d 02 00 1a 3d 02 00 1a 3d 02 00 1a     =...=...=...=...
1a0000ec:	3d 02 00 1a 00 00 00 00 3d 02 00 1a 3d 02 00 1a     =.......=...=...
1a0000fc:	3d 02 00 1a 00 00 00 00 3d 02 00 1a 3d 02 00 1a     =.......=...=...
1a00010c:	3d 02 00 1a 3d 02 00 1a                             =...=...

1a000114 <__data_section_table>:
1a000114:	1a001e2c 	.word	0x1a001e2c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000000 	.word	0x00000000
1a000120:	1a001e2c 	.word	0x1a001e2c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001e2c 	.word	0x1a001e2c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001e2c 	.word	0x1a001e2c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001e2c 	.word	0x1a001e2c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000000 	.word	0x10000000
1a000154:	0000000c 	.word	0x0000000c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000178:	b480      	push	{r7}
1a00017a:	b089      	sub	sp, #36	; 0x24
1a00017c:	af00      	add	r7, sp, #0
1a00017e:	60f8      	str	r0, [r7, #12]
1a000180:	60b9      	str	r1, [r7, #8]
1a000182:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
1a000184:	68bb      	ldr	r3, [r7, #8]
1a000186:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
1a000188:	68fb      	ldr	r3, [r7, #12]
1a00018a:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	617b      	str	r3, [r7, #20]
1a000190:	e00a      	b.n	1a0001a8 <data_init+0x30>
        *pulDest++ = *pulSrc++;
1a000192:	69fb      	ldr	r3, [r7, #28]
1a000194:	1d1a      	adds	r2, r3, #4
1a000196:	61fa      	str	r2, [r7, #28]
1a000198:	69ba      	ldr	r2, [r7, #24]
1a00019a:	1d11      	adds	r1, r2, #4
1a00019c:	61b9      	str	r1, [r7, #24]
1a00019e:	6812      	ldr	r2, [r2, #0]
1a0001a0:	601a      	str	r2, [r3, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	697b      	ldr	r3, [r7, #20]
1a0001a4:	3304      	adds	r3, #4
1a0001a6:	617b      	str	r3, [r7, #20]
1a0001a8:	697a      	ldr	r2, [r7, #20]
1a0001aa:	687b      	ldr	r3, [r7, #4]
1a0001ac:	429a      	cmp	r2, r3
1a0001ae:	d3f0      	bcc.n	1a000192 <data_init+0x1a>
        *pulDest++ = *pulSrc++;
}
1a0001b0:	3724      	adds	r7, #36	; 0x24
1a0001b2:	46bd      	mov	sp, r7
1a0001b4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001b8:	4770      	bx	lr
1a0001ba:	bf00      	nop

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a0001bc:	b480      	push	{r7}
1a0001be:	b085      	sub	sp, #20
1a0001c0:	af00      	add	r7, sp, #0
1a0001c2:	6078      	str	r0, [r7, #4]
1a0001c4:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
1a0001c6:	687b      	ldr	r3, [r7, #4]
1a0001c8:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ca:	2300      	movs	r3, #0
1a0001cc:	60bb      	str	r3, [r7, #8]
1a0001ce:	e007      	b.n	1a0001e0 <bss_init+0x24>
        *pulDest++ = 0;
1a0001d0:	68fb      	ldr	r3, [r7, #12]
1a0001d2:	1d1a      	adds	r2, r3, #4
1a0001d4:	60fa      	str	r2, [r7, #12]
1a0001d6:	2200      	movs	r2, #0
1a0001d8:	601a      	str	r2, [r3, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001da:	68bb      	ldr	r3, [r7, #8]
1a0001dc:	3304      	adds	r3, #4
1a0001de:	60bb      	str	r3, [r7, #8]
1a0001e0:	68ba      	ldr	r2, [r7, #8]
1a0001e2:	683b      	ldr	r3, [r7, #0]
1a0001e4:	429a      	cmp	r2, r3
1a0001e6:	d3f3      	bcc.n	1a0001d0 <bss_init+0x14>
        *pulDest++ = 0;
}
1a0001e8:	3714      	adds	r7, #20
1a0001ea:	46bd      	mov	sp, r7
1a0001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001f0:	4770      	bx	lr
1a0001f2:	bf00      	nop

1a0001f4 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001f4:	b480      	push	{r7}
1a0001f6:	af00      	add	r7, sp, #0
    while (1) {
    }
1a0001f8:	e7fe      	b.n	1a0001f8 <NMI_Handler+0x4>
1a0001fa:	bf00      	nop

1a0001fc <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001fc:	b480      	push	{r7}
1a0001fe:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000200:	e7fe      	b.n	1a000200 <HardFault_Handler+0x4>
1a000202:	bf00      	nop

1a000204 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000204:	b480      	push	{r7}
1a000206:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000208:	e7fe      	b.n	1a000208 <MemManage_Handler+0x4>
1a00020a:	bf00      	nop

1a00020c <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00020c:	b480      	push	{r7}
1a00020e:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000210:	e7fe      	b.n	1a000210 <BusFault_Handler+0x4>
1a000212:	bf00      	nop

1a000214 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000214:	b480      	push	{r7}
1a000216:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000218:	e7fe      	b.n	1a000218 <UsageFault_Handler+0x4>
1a00021a:	bf00      	nop

1a00021c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00021c:	b480      	push	{r7}
1a00021e:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000220:	e7fe      	b.n	1a000220 <SVC_Handler+0x4>
1a000222:	bf00      	nop

1a000224 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000224:	b480      	push	{r7}
1a000226:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000228:	e7fe      	b.n	1a000228 <DebugMon_Handler+0x4>
1a00022a:	bf00      	nop

1a00022c <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a00022c:	b480      	push	{r7}
1a00022e:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000230:	e7fe      	b.n	1a000230 <PendSV_Handler+0x4>
1a000232:	bf00      	nop

1a000234 <SysTick_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000234:	b480      	push	{r7}
1a000236:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000238:	e7fe      	b.n	1a000238 <SysTick_Handler+0x4>
1a00023a:	bf00      	nop

1a00023c <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00023c:	b480      	push	{r7}
1a00023e:	af00      	add	r7, sp, #0
    while (1) {
    }
1a000240:	e7fe      	b.n	1a000240 <ADC0_IRQHandler+0x4>
1a000242:	bf00      	nop
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <maxC>:
 * @author Federico G. Roux (froux@citedef.gob.ar)
 *
 */

uint32_t maxC (uint32_t * vectorIn, uint32_t longitud)
{
1a000300:	b480      	push	{r7}
1a000302:	b085      	sub	sp, #20
1a000304:	af00      	add	r7, sp, #0
1a000306:	6078      	str	r0, [r7, #4]
1a000308:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
1a00030a:	2300      	movs	r3, #0
1a00030c:	60fb      	str	r3, [r7, #12]
	uint32_t max = 0;
1a00030e:	2300      	movs	r3, #0
1a000310:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < longitud; i++){
1a000312:	2300      	movs	r3, #0
1a000314:	60fb      	str	r3, [r7, #12]
1a000316:	e010      	b.n	1a00033a <maxC+0x3a>

		if (vectorIn[i] > max){
1a000318:	68fb      	ldr	r3, [r7, #12]
1a00031a:	009b      	lsls	r3, r3, #2
1a00031c:	687a      	ldr	r2, [r7, #4]
1a00031e:	4413      	add	r3, r2
1a000320:	681a      	ldr	r2, [r3, #0]
1a000322:	68bb      	ldr	r3, [r7, #8]
1a000324:	429a      	cmp	r2, r3
1a000326:	d905      	bls.n	1a000334 <maxC+0x34>
			max = vectorIn[i];
1a000328:	68fb      	ldr	r3, [r7, #12]
1a00032a:	009b      	lsls	r3, r3, #2
1a00032c:	687a      	ldr	r2, [r7, #4]
1a00032e:	4413      	add	r3, r2
1a000330:	681b      	ldr	r3, [r3, #0]
1a000332:	60bb      	str	r3, [r7, #8]
uint32_t maxC (uint32_t * vectorIn, uint32_t longitud)
{
	uint32_t i = 0;
	uint32_t max = 0;

	for(i = 0; i < longitud; i++){
1a000334:	68fb      	ldr	r3, [r7, #12]
1a000336:	3301      	adds	r3, #1
1a000338:	60fb      	str	r3, [r7, #12]
1a00033a:	68fa      	ldr	r2, [r7, #12]
1a00033c:	683b      	ldr	r3, [r7, #0]
1a00033e:	429a      	cmp	r2, r3
1a000340:	d3ea      	bcc.n	1a000318 <maxC+0x18>
		}

	}


	return max;
1a000342:	68bb      	ldr	r3, [r7, #8]
}
1a000344:	4618      	mov	r0, r3
1a000346:	3714      	adds	r7, #20
1a000348:	46bd      	mov	sp, r7
1a00034a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00034e:	4770      	bx	lr

1a000350 <initHardware>:
/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

static void initHardware(void)
{
1a000350:	b580      	push	{r7, lr}
1a000352:	af00      	add	r7, sp, #0
	Board_Init();
1a000354:	f001 f998 	bl	1a001688 <Board_Init>
	SystemCoreClockUpdate();
1a000358:	f000 fab8 	bl	1a0008cc <SystemCoreClockUpdate>
	//SysTick_Config(SystemCoreClock / 1000);
}
1a00035c:	bd80      	pop	{r7, pc}
1a00035e:	bf00      	nop

1a000360 <main>:
static void Ejercicio6(void);
static void Ejercicio7(void);

int main(void)

{   /* como no hago nada con las variables, pasa los valores por registros y no reserva memoria ni stack*/
1a000360:	b580      	push	{r7, lr}
1a000362:	b084      	sub	sp, #16
1a000364:	af00      	add	r7, sp, #0
	uint32_t aValue = 20,
1a000366:	2314      	movs	r3, #20
1a000368:	60fb      	str	r3, [r7, #12]
			 otherValue = 30,
1a00036a:	231e      	movs	r3, #30
1a00036c:	60bb      	str	r3, [r7, #8]
	// Ejercicio2();
	// Ejercicio3();
	// Ejercicio4();
	// Ejercicio5();
	// Ejercicio6();
	Ejercicio7();
1a00036e:	f000 f80b 	bl	1a000388 <Ejercicio7>


	initHardware();
1a000372:	f7ff ffed 	bl	1a000350 <initHardware>

	sumResult = asmSum(aValue, otherValue);
1a000376:	68f8      	ldr	r0, [r7, #12]
1a000378:	68b9      	ldr	r1, [r7, #8]
1a00037a:	f001 f9a5 	bl	1a0016c8 <asmSum>
1a00037e:	4603      	mov	r3, r0
1a000380:	607b      	str	r3, [r7, #4]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a000382:	bf30      	wfi

	while (1)
	{
		__WFI();
	}
1a000384:	e7fd      	b.n	1a000382 <main+0x22>
1a000386:	bf00      	nop

1a000388 <Ejercicio7>:
 * @fn void Ejercicio7(void)
 *
 */


void Ejercicio7 (void) {
1a000388:	b5b0      	push	{r4, r5, r7, lr}
1a00038a:	b08c      	sub	sp, #48	; 0x30
1a00038c:	af00      	add	r7, sp, #0

	uint32_t array [ARRAY_MAX] = {1, 43, 22, 432, 653, 2, 887, 47, 58, 321};
1a00038e:	4b0e      	ldr	r3, [pc, #56]	; (1a0003c8 <Ejercicio7+0x40>)
1a000390:	463c      	mov	r4, r7
1a000392:	461d      	mov	r5, r3
1a000394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00039a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00039c:	e895 0003 	ldmia.w	r5, {r0, r1}
1a0003a0:	e884 0003 	stmia.w	r4, {r0, r1}

	uint32_t maximoC, maximoASM;

	maximoC = maxC(array, ARRAY_MAX);
1a0003a4:	463b      	mov	r3, r7
1a0003a6:	4618      	mov	r0, r3
1a0003a8:	210a      	movs	r1, #10
1a0003aa:	f7ff ffa9 	bl	1a000300 <maxC>
1a0003ae:	4603      	mov	r3, r0
1a0003b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	maximoASM = maxASM(array, ARRAY_MAX);
1a0003b2:	463b      	mov	r3, r7
1a0003b4:	4618      	mov	r0, r3
1a0003b6:	210a      	movs	r1, #10
1a0003b8:	f001 f98a 	bl	1a0016d0 <maxASM>
1a0003bc:	4603      	mov	r3, r0
1a0003be:	62bb      	str	r3, [r7, #40]	; 0x28
}
1a0003c0:	3730      	adds	r7, #48	; 0x30
1a0003c2:	46bd      	mov	sp, r7
1a0003c4:	bdb0      	pop	{r4, r5, r7, pc}
1a0003c6:	bf00      	nop
1a0003c8:	1a001cac 	.word	0x1a001cac

1a0003cc <Chip_UART_TXDisable>:
 * @brief  Disable transmission on UART TxD pin
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
1a0003cc:	b480      	push	{r7}
1a0003ce:	b083      	sub	sp, #12
1a0003d0:	af00      	add	r7, sp, #0
1a0003d2:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a0003d4:	687b      	ldr	r3, [r7, #4]
1a0003d6:	2200      	movs	r2, #0
1a0003d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a0003da:	370c      	adds	r7, #12
1a0003dc:	46bd      	mov	sp, r7
1a0003de:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003e2:	4770      	bx	lr

1a0003e4 <Chip_UART_SetupFIFOS>:
 *         to select specific options. For example, to enable the FIFOs
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
1a0003e4:	b480      	push	{r7}
1a0003e6:	b083      	sub	sp, #12
1a0003e8:	af00      	add	r7, sp, #0
1a0003ea:	6078      	str	r0, [r7, #4]
1a0003ec:	6039      	str	r1, [r7, #0]
   pUART->FCR = fcr;
1a0003ee:	687b      	ldr	r3, [r7, #4]
1a0003f0:	683a      	ldr	r2, [r7, #0]
1a0003f2:	609a      	str	r2, [r3, #8]
}
1a0003f4:	370c      	adds	r7, #12
1a0003f6:	46bd      	mov	sp, r7
1a0003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003fc:	4770      	bx	lr
1a0003fe:	bf00      	nop

1a000400 <Chip_UART_ConfigData>:
 *         definitions. For example, a configuration of 8 data bits, 1
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a000400:	b480      	push	{r7}
1a000402:	b083      	sub	sp, #12
1a000404:	af00      	add	r7, sp, #0
1a000406:	6078      	str	r0, [r7, #4]
1a000408:	6039      	str	r1, [r7, #0]
   pUART->LCR = config;
1a00040a:	687b      	ldr	r3, [r7, #4]
1a00040c:	683a      	ldr	r2, [r7, #0]
1a00040e:	60da      	str	r2, [r3, #12]
}
1a000410:	370c      	adds	r7, #12
1a000412:	46bd      	mov	sp, r7
1a000414:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000418:	4770      	bx	lr
1a00041a:	bf00      	nop

1a00041c <Chip_UART_EnableDivisorAccess>:
 * @brief  Enable access to Divisor Latches
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
1a00041c:	b480      	push	{r7}
1a00041e:	b083      	sub	sp, #12
1a000420:	af00      	add	r7, sp, #0
1a000422:	6078      	str	r0, [r7, #4]
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000424:	687b      	ldr	r3, [r7, #4]
1a000426:	68db      	ldr	r3, [r3, #12]
1a000428:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a00042c:	687b      	ldr	r3, [r7, #4]
1a00042e:	60da      	str	r2, [r3, #12]
}
1a000430:	370c      	adds	r7, #12
1a000432:	46bd      	mov	sp, r7
1a000434:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000438:	4770      	bx	lr
1a00043a:	bf00      	nop

1a00043c <Chip_UART_DisableDivisorAccess>:
 * @brief  Disable access to Divisor Latches
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
1a00043c:	b480      	push	{r7}
1a00043e:	b083      	sub	sp, #12
1a000440:	af00      	add	r7, sp, #0
1a000442:	6078      	str	r0, [r7, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000444:	687b      	ldr	r3, [r7, #4]
1a000446:	68db      	ldr	r3, [r3, #12]
1a000448:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a00044c:	687b      	ldr	r3, [r7, #4]
1a00044e:	60da      	str	r2, [r3, #12]
}
1a000450:	370c      	adds	r7, #12
1a000452:	46bd      	mov	sp, r7
1a000454:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000458:	4770      	bx	lr
1a00045a:	bf00      	nop

1a00045c <Chip_UART_SetDivisorLatches>:
 * @note   The Divisor Latch Access Bit (DLAB) in LCR must be set in
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
1a00045c:	b480      	push	{r7}
1a00045e:	b083      	sub	sp, #12
1a000460:	af00      	add	r7, sp, #0
1a000462:	6078      	str	r0, [r7, #4]
1a000464:	460b      	mov	r3, r1
1a000466:	70fb      	strb	r3, [r7, #3]
1a000468:	4613      	mov	r3, r2
1a00046a:	70bb      	strb	r3, [r7, #2]
   pUART->DLL = (uint32_t) dll;
1a00046c:	78fa      	ldrb	r2, [r7, #3]
1a00046e:	687b      	ldr	r3, [r7, #4]
1a000470:	601a      	str	r2, [r3, #0]
   pUART->DLM = (uint32_t) dlm;
1a000472:	78ba      	ldrb	r2, [r7, #2]
1a000474:	687b      	ldr	r3, [r7, #4]
1a000476:	605a      	str	r2, [r3, #4]
}
1a000478:	370c      	adds	r7, #12
1a00047a:	46bd      	mov	sp, r7
1a00047c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000480:	4770      	bx	lr
1a000482:	bf00      	nop

1a000484 <Chip_UART_GetIndex>:
/* UART Bus clocks */
static const CHIP_CCU_CLK_T UART_BClock[] = {CLK_APB0_UART0, CLK_APB0_UART1, CLK_APB2_UART2, CLK_APB2_UART3};

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
1a000484:	b480      	push	{r7}
1a000486:	b085      	sub	sp, #20
1a000488:	af00      	add	r7, sp, #0
1a00048a:	6078      	str	r0, [r7, #4]
   uint32_t base = (uint32_t) pUART;
1a00048c:	687b      	ldr	r3, [r7, #4]
1a00048e:	60fb      	str	r3, [r7, #12]
   switch(base) {
1a000490:	68fb      	ldr	r3, [r7, #12]
1a000492:	4a10      	ldr	r2, [pc, #64]	; (1a0004d4 <Chip_UART_GetIndex+0x50>)
1a000494:	4293      	cmp	r3, r2
1a000496:	d00f      	beq.n	1a0004b8 <Chip_UART_GetIndex+0x34>
1a000498:	4a0e      	ldr	r2, [pc, #56]	; (1a0004d4 <Chip_UART_GetIndex+0x50>)
1a00049a:	4293      	cmp	r3, r2
1a00049c:	d803      	bhi.n	1a0004a6 <Chip_UART_GetIndex+0x22>
1a00049e:	4a0e      	ldr	r2, [pc, #56]	; (1a0004d8 <Chip_UART_GetIndex+0x54>)
1a0004a0:	4293      	cmp	r3, r2
1a0004a2:	d007      	beq.n	1a0004b4 <Chip_UART_GetIndex+0x30>
1a0004a4:	e00e      	b.n	1a0004c4 <Chip_UART_GetIndex+0x40>
1a0004a6:	4a0d      	ldr	r2, [pc, #52]	; (1a0004dc <Chip_UART_GetIndex+0x58>)
1a0004a8:	4293      	cmp	r3, r2
1a0004aa:	d007      	beq.n	1a0004bc <Chip_UART_GetIndex+0x38>
1a0004ac:	4a0c      	ldr	r2, [pc, #48]	; (1a0004e0 <Chip_UART_GetIndex+0x5c>)
1a0004ae:	4293      	cmp	r3, r2
1a0004b0:	d006      	beq.n	1a0004c0 <Chip_UART_GetIndex+0x3c>
1a0004b2:	e007      	b.n	1a0004c4 <Chip_UART_GetIndex+0x40>
       case LPC_USART0_BASE:
           return 0;
1a0004b4:	2300      	movs	r3, #0
1a0004b6:	e006      	b.n	1a0004c6 <Chip_UART_GetIndex+0x42>
       case LPC_UART1_BASE:
           return 1;
1a0004b8:	2301      	movs	r3, #1
1a0004ba:	e004      	b.n	1a0004c6 <Chip_UART_GetIndex+0x42>
       case LPC_USART2_BASE:
           return 2;
1a0004bc:	2302      	movs	r3, #2
1a0004be:	e002      	b.n	1a0004c6 <Chip_UART_GetIndex+0x42>
       case LPC_USART3_BASE:
           return 3;
1a0004c0:	2303      	movs	r3, #3
1a0004c2:	e000      	b.n	1a0004c6 <Chip_UART_GetIndex+0x42>
       default:
           return 0; /* Should never come here */
1a0004c4:	2300      	movs	r3, #0
   }
}
1a0004c6:	4618      	mov	r0, r3
1a0004c8:	3714      	adds	r7, #20
1a0004ca:	46bd      	mov	sp, r7
1a0004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004d0:	4770      	bx	lr
1a0004d2:	bf00      	nop
1a0004d4:	40082000 	.word	0x40082000
1a0004d8:	40081000 	.word	0x40081000
1a0004dc:	400c1000 	.word	0x400c1000
1a0004e0:	400c2000 	.word	0x400c2000

1a0004e4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0004e4:	b580      	push	{r7, lr}
1a0004e6:	b084      	sub	sp, #16
1a0004e8:	af00      	add	r7, sp, #0
1a0004ea:	6078      	str	r0, [r7, #4]
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0004ec:	6878      	ldr	r0, [r7, #4]
1a0004ee:	f7ff ffc9 	bl	1a000484 <Chip_UART_GetIndex>
1a0004f2:	4602      	mov	r2, r0
1a0004f4:	4b1a      	ldr	r3, [pc, #104]	; (1a000560 <Chip_UART_Init+0x7c>)
1a0004f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a0004fa:	4618      	mov	r0, r3
1a0004fc:	2101      	movs	r1, #1
1a0004fe:	2201      	movs	r2, #1
1a000500:	2301      	movs	r3, #1
1a000502:	f000 fe13 	bl	1a00112c <Chip_Clock_EnableOpts>

   /* Enable FIFOs by default, reset them */
   Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a000506:	6878      	ldr	r0, [r7, #4]
1a000508:	2107      	movs	r1, #7
1a00050a:	f7ff ff6b 	bl	1a0003e4 <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a00050e:	6878      	ldr	r0, [r7, #4]
1a000510:	f7ff ff5c 	bl	1a0003cc <Chip_UART_TXDisable>

    /* Disable interrupts */
   pUART->IER = 0;
1a000514:	687b      	ldr	r3, [r7, #4]
1a000516:	2200      	movs	r2, #0
1a000518:	605a      	str	r2, [r3, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a00051a:	687b      	ldr	r3, [r7, #4]
1a00051c:	2200      	movs	r2, #0
1a00051e:	60da      	str	r2, [r3, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000520:	687b      	ldr	r3, [r7, #4]
1a000522:	2200      	movs	r2, #0
1a000524:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000526:	687b      	ldr	r3, [r7, #4]
1a000528:	2200      	movs	r2, #0
1a00052a:	64da      	str	r2, [r3, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a00052c:	687b      	ldr	r3, [r7, #4]
1a00052e:	2200      	movs	r2, #0
1a000530:	655a      	str	r2, [r3, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000532:	687b      	ldr	r3, [r7, #4]
1a000534:	2200      	movs	r2, #0
1a000536:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000538:	687b      	ldr	r3, [r7, #4]
1a00053a:	4a0a      	ldr	r2, [pc, #40]	; (1a000564 <Chip_UART_Init+0x80>)
1a00053c:	4293      	cmp	r3, r2
1a00053e:	d105      	bne.n	1a00054c <Chip_UART_Init+0x68>
       /* Set Modem Control to default state */
       pUART->MCR = 0;
1a000540:	687b      	ldr	r3, [r7, #4]
1a000542:	2200      	movs	r2, #0
1a000544:	611a      	str	r2, [r3, #16]
       /*Dummy Reading to Clear Status */
       tmp = pUART->MSR;
1a000546:	687b      	ldr	r3, [r7, #4]
1a000548:	699b      	ldr	r3, [r3, #24]
1a00054a:	60fb      	str	r3, [r7, #12]
   }

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a00054c:	6878      	ldr	r0, [r7, #4]
1a00054e:	2103      	movs	r1, #3
1a000550:	f7ff ff56 	bl	1a000400 <Chip_UART_ConfigData>

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000554:	687b      	ldr	r3, [r7, #4]
1a000556:	2210      	movs	r2, #16
1a000558:	629a      	str	r2, [r3, #40]	; 0x28
}
1a00055a:	3710      	adds	r7, #16
1a00055c:	46bd      	mov	sp, r7
1a00055e:	bd80      	pop	{r7, pc}
1a000560:	1a001cd4 	.word	0x1a001cd4
1a000564:	40082000 	.word	0x40082000

1a000568 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
1a00056c:	b08e      	sub	sp, #56	; 0x38
1a00056e:	af00      	add	r7, sp, #0
1a000570:	6078      	str	r0, [r7, #4]
1a000572:	6039      	str	r1, [r7, #0]
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000574:	2300      	movs	r3, #0
1a000576:	637b      	str	r3, [r7, #52]	; 0x34
1a000578:	2301      	movs	r3, #1
1a00057a:	633b      	str	r3, [r7, #48]	; 0x30
1a00057c:	2300      	movs	r3, #0
1a00057e:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */
1a000580:	f04f 33ff 	mov.w	r3, #4294967295
1a000584:	623b      	str	r3, [r7, #32]

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000586:	6878      	ldr	r0, [r7, #4]
1a000588:	f7ff ff7c 	bl	1a000484 <Chip_UART_GetIndex>
1a00058c:	4602      	mov	r2, r0
1a00058e:	4b52      	ldr	r3, [pc, #328]	; (1a0006d8 <Chip_UART_SetBaudFDR+0x170>)
1a000590:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a000594:	4618      	mov	r0, r3
1a000596:	f000 fe07 	bl	1a0011a8 <Chip_Clock_GetRate>
1a00059a:	6178      	str	r0, [r7, #20]

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a00059c:	2301      	movs	r3, #1
1a00059e:	62bb      	str	r3, [r7, #40]	; 0x28
1a0005a0:	e064      	b.n	1a00066c <Chip_UART_SetBaudFDR+0x104>
       for (d = 0; d < m; d++) {
1a0005a2:	2300      	movs	r3, #0
1a0005a4:	627b      	str	r3, [r7, #36]	; 0x24
1a0005a6:	e05a      	b.n	1a00065e <Chip_UART_SetBaudFDR+0xf6>
           uint32_t diff, div;
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0005a8:	697b      	ldr	r3, [r7, #20]
1a0005aa:	461a      	mov	r2, r3
1a0005ac:	f04f 0300 	mov.w	r3, #0
1a0005b0:	071d      	lsls	r5, r3, #28
1a0005b2:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
1a0005b6:	0714      	lsls	r4, r2, #28
1a0005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0005ba:	461a      	mov	r2, r3
1a0005bc:	f04f 0300 	mov.w	r3, #0
1a0005c0:	fb02 f005 	mul.w	r0, r2, r5
1a0005c4:	fb04 f103 	mul.w	r1, r4, r3
1a0005c8:	4401      	add	r1, r0
1a0005ca:	fba4 2302 	umull	r2, r3, r4, r2
1a0005ce:	4419      	add	r1, r3
1a0005d0:	460b      	mov	r3, r1
1a0005d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a0005d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
1a0005d6:	4401      	add	r1, r0
1a0005d8:	6838      	ldr	r0, [r7, #0]
1a0005da:	fb00 f101 	mul.w	r1, r0, r1
1a0005de:	468a      	mov	sl, r1
1a0005e0:	f04f 0b00 	mov.w	fp, #0
1a0005e4:	4610      	mov	r0, r2
1a0005e6:	4619      	mov	r1, r3
1a0005e8:	4652      	mov	r2, sl
1a0005ea:	465b      	mov	r3, fp
1a0005ec:	f001 f880 	bl	1a0016f0 <__aeabi_uldivmod>
1a0005f0:	4602      	mov	r2, r0
1a0005f2:	460b      	mov	r3, r1
1a0005f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

           /* Lower 32-bit of dval has diff */
           diff = (uint32_t) dval;
1a0005f8:	68bb      	ldr	r3, [r7, #8]
1a0005fa:	61fb      	str	r3, [r7, #28]
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);
1a0005fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
1a000600:	4698      	mov	r8, r3
1a000602:	f04f 0900 	mov.w	r9, #0
1a000606:	4643      	mov	r3, r8
1a000608:	61bb      	str	r3, [r7, #24]

           /* Closer to next div */
           if ((int)diff < 0) {
1a00060a:	69fb      	ldr	r3, [r7, #28]
1a00060c:	2b00      	cmp	r3, #0
1a00060e:	da05      	bge.n	1a00061c <Chip_UART_SetBaudFDR+0xb4>
               diff = -diff;
1a000610:	69fb      	ldr	r3, [r7, #28]
1a000612:	425b      	negs	r3, r3
1a000614:	61fb      	str	r3, [r7, #28]
               div ++;
1a000616:	69bb      	ldr	r3, [r7, #24]
1a000618:	3301      	adds	r3, #1
1a00061a:	61bb      	str	r3, [r7, #24]
           }

           /* Check if new value is worse than old or out of range */
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00061c:	6a3a      	ldr	r2, [r7, #32]
1a00061e:	69fb      	ldr	r3, [r7, #28]
1a000620:	429a      	cmp	r2, r3
1a000622:	d30c      	bcc.n	1a00063e <Chip_UART_SetBaudFDR+0xd6>
1a000624:	69bb      	ldr	r3, [r7, #24]
1a000626:	2b00      	cmp	r3, #0
1a000628:	d009      	beq.n	1a00063e <Chip_UART_SetBaudFDR+0xd6>
1a00062a:	69bb      	ldr	r3, [r7, #24]
1a00062c:	0c1b      	lsrs	r3, r3, #16
1a00062e:	2b00      	cmp	r3, #0
1a000630:	d105      	bne.n	1a00063e <Chip_UART_SetBaudFDR+0xd6>
1a000632:	69bb      	ldr	r3, [r7, #24]
1a000634:	2b02      	cmp	r3, #2
1a000636:	d803      	bhi.n	1a000640 <Chip_UART_SetBaudFDR+0xd8>
1a000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00063a:	2b00      	cmp	r3, #0
1a00063c:	d000      	beq.n	1a000640 <Chip_UART_SetBaudFDR+0xd8>
               continue;
1a00063e:	e00b      	b.n	1a000658 <Chip_UART_SetBaudFDR+0xf0>
           }

           /* Store the new better values */
           sdiv = div;
1a000640:	69bb      	ldr	r3, [r7, #24]
1a000642:	637b      	str	r3, [r7, #52]	; 0x34
           sd = d;
1a000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000646:	62fb      	str	r3, [r7, #44]	; 0x2c
           sm = m;
1a000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00064a:	633b      	str	r3, [r7, #48]	; 0x30
           odiff = diff;
1a00064c:	69fb      	ldr	r3, [r7, #28]
1a00064e:	623b      	str	r3, [r7, #32]

           /* On perfect match, break loop */
           if(!diff) {
1a000650:	69fb      	ldr	r3, [r7, #28]
1a000652:	2b00      	cmp	r3, #0
1a000654:	d100      	bne.n	1a000658 <Chip_UART_SetBaudFDR+0xf0>
               break;
1a000656:	e006      	b.n	1a000666 <Chip_UART_SetBaudFDR+0xfe>
   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
       for (d = 0; d < m; d++) {
1a000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00065a:	3301      	adds	r3, #1
1a00065c:	627b      	str	r3, [r7, #36]	; 0x24
1a00065e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a000660:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000662:	429a      	cmp	r2, r3
1a000664:	d3a0      	bcc.n	1a0005a8 <Chip_UART_SetBaudFDR+0x40>

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000666:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000668:	3301      	adds	r3, #1
1a00066a:	62bb      	str	r3, [r7, #40]	; 0x28
1a00066c:	6a3b      	ldr	r3, [r7, #32]
1a00066e:	2b00      	cmp	r3, #0
1a000670:	d002      	beq.n	1a000678 <Chip_UART_SetBaudFDR+0x110>
1a000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a000674:	2b0f      	cmp	r3, #15
1a000676:	d994      	bls.n	1a0005a2 <Chip_UART_SetBaudFDR+0x3a>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a00067a:	2b00      	cmp	r3, #0
1a00067c:	d101      	bne.n	1a000682 <Chip_UART_SetBaudFDR+0x11a>
       return 0;
1a00067e:	2300      	movs	r3, #0
1a000680:	e025      	b.n	1a0006ce <Chip_UART_SetBaudFDR+0x166>
   }

   /* Update UART registers */
   Chip_UART_EnableDivisorAccess(pUART);
1a000682:	6878      	ldr	r0, [r7, #4]
1a000684:	f7ff feca 	bl	1a00041c <Chip_UART_EnableDivisorAccess>
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a000688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a00068a:	b2da      	uxtb	r2, r3
1a00068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a00068e:	0a1b      	lsrs	r3, r3, #8
1a000690:	b2db      	uxtb	r3, r3
1a000692:	6878      	ldr	r0, [r7, #4]
1a000694:	4611      	mov	r1, r2
1a000696:	461a      	mov	r2, r3
1a000698:	f7ff fee0 	bl	1a00045c <Chip_UART_SetDivisorLatches>
   Chip_UART_DisableDivisorAccess(pUART);
1a00069c:	6878      	ldr	r0, [r7, #4]
1a00069e:	f7ff fecd 	bl	1a00043c <Chip_UART_DisableDivisorAccess>

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0006a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a0006a4:	011b      	lsls	r3, r3, #4
1a0006a6:	b2da      	uxtb	r2, r3
1a0006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0006aa:	f003 030f 	and.w	r3, r3, #15
1a0006ae:	431a      	orrs	r2, r3
1a0006b0:	687b      	ldr	r3, [r7, #4]
1a0006b2:	629a      	str	r2, [r3, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0006b4:	697b      	ldr	r3, [r7, #20]
1a0006b6:	091b      	lsrs	r3, r3, #4
1a0006b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a0006ba:	fb02 f203 	mul.w	r2, r2, r3
1a0006be:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a0006c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0006c2:	440b      	add	r3, r1
1a0006c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a0006c6:	fb01 f303 	mul.w	r3, r1, r3
1a0006ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a0006ce:	4618      	mov	r0, r3
1a0006d0:	3738      	adds	r7, #56	; 0x38
1a0006d2:	46bd      	mov	sp, r7
1a0006d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
1a0006d8:	1a001cdc 	.word	0x1a001cdc

1a0006dc <Chip_Clock_DisableMainPLL>:
 * @return none
 * Make sure the main PLL is not needed to clock the part before disabling it.
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
1a0006dc:	b480      	push	{r7}
1a0006de:	af00      	add	r7, sp, #0
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a0006e0:	4a04      	ldr	r2, [pc, #16]	; (1a0006f4 <Chip_Clock_DisableMainPLL+0x18>)
1a0006e2:	4b04      	ldr	r3, [pc, #16]	; (1a0006f4 <Chip_Clock_DisableMainPLL+0x18>)
1a0006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0006e6:	f043 0301 	orr.w	r3, r3, #1
1a0006ea:	6453      	str	r3, [r2, #68]	; 0x44
}
1a0006ec:	46bd      	mov	sp, r7
1a0006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0006f2:	4770      	bx	lr
1a0006f4:	40050000 	.word	0x40050000

1a0006f8 <Chip_Clock_SetupMainPLL>:
 * @param  ppll    : Pointer to pll param structure #PLL_PARAM_T
 * @return none
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
1a0006f8:	b480      	push	{r7}
1a0006fa:	b083      	sub	sp, #12
1a0006fc:	af00      	add	r7, sp, #0
1a0006fe:	6078      	str	r0, [r7, #4]
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000700:	490c      	ldr	r1, [pc, #48]	; (1a000734 <Chip_Clock_SetupMainPLL+0x3c>)
1a000702:	687b      	ldr	r3, [r7, #4]
1a000704:	681b      	ldr	r3, [r3, #0]
1a000706:	461a      	mov	r2, r3
1a000708:	687b      	ldr	r3, [r7, #4]
1a00070a:	791b      	ldrb	r3, [r3, #4]
1a00070c:	061b      	lsls	r3, r3, #24
1a00070e:	4313      	orrs	r3, r2
1a000710:	687a      	ldr	r2, [r7, #4]
1a000712:	6912      	ldr	r2, [r2, #16]
1a000714:	0412      	lsls	r2, r2, #16
1a000716:	4313      	orrs	r3, r2
1a000718:	687a      	ldr	r2, [r7, #4]
1a00071a:	6892      	ldr	r2, [r2, #8]
1a00071c:	0312      	lsls	r2, r2, #12
1a00071e:	4313      	orrs	r3, r2
1a000720:	687a      	ldr	r2, [r7, #4]
1a000722:	68d2      	ldr	r2, [r2, #12]
1a000724:	0212      	lsls	r2, r2, #8
1a000726:	4313      	orrs	r3, r2
1a000728:	644b      	str	r3, [r1, #68]	; 0x44
}
1a00072a:	370c      	adds	r7, #12
1a00072c:	46bd      	mov	sp, r7
1a00072e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000732:	4770      	bx	lr
1a000734:	40050000 	.word	0x40050000

1a000738 <Chip_Clock_MainPLLLocked>:
 * @brief  Wait for Main PLL to be locked
 * @return 1 - PLL is LOCKED; 0 - PLL is not locked
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
1a000738:	b480      	push	{r7}
1a00073a:	af00      	add	r7, sp, #0
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00073c:	4b06      	ldr	r3, [pc, #24]	; (1a000758 <Chip_Clock_MainPLLLocked+0x20>)
1a00073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000740:	f003 0301 	and.w	r3, r3, #1
1a000744:	2b00      	cmp	r3, #0
1a000746:	bf14      	ite	ne
1a000748:	2301      	movne	r3, #1
1a00074a:	2300      	moveq	r3, #0
1a00074c:	b2db      	uxtb	r3, r3
}
1a00074e:	4618      	mov	r0, r3
1a000750:	46bd      	mov	sp, r7
1a000752:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000756:	4770      	bx	lr
1a000758:	40050000 	.word	0x40050000

1a00075c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00075c:	b590      	push	{r4, r7, lr}
1a00075e:	b097      	sub	sp, #92	; 0x5c
1a000760:	af00      	add	r7, sp, #0
1a000762:	4603      	mov	r3, r0
1a000764:	6039      	str	r1, [r7, #0]
1a000766:	71fb      	strb	r3, [r7, #7]
1a000768:	4613      	mov	r3, r2
1a00076a:	71bb      	strb	r3, [r7, #6]
   int i;
   volatile uint32_t delay = 5500;
1a00076c:	f241 537c 	movw	r3, #5500	; 0x157c
1a000770:	64fb      	str	r3, [r7, #76]	; 0x4c
   uint32_t direct = 0;
1a000772:	2300      	movs	r3, #0
1a000774:	653b      	str	r3, [r7, #80]	; 0x50
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000776:	79fb      	ldrb	r3, [r7, #7]
1a000778:	2b06      	cmp	r3, #6
1a00077a:	d101      	bne.n	1a000780 <Chip_SetupCoreClock+0x24>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
1a00077c:	f000 fa72 	bl	1a000c64 <Chip_Clock_EnableCrystal>
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000780:	79fb      	ldrb	r3, [r7, #7]
1a000782:	2004      	movs	r0, #4
1a000784:	4619      	mov	r1, r3
1a000786:	2201      	movs	r2, #1
1a000788:	2300      	movs	r3, #0
1a00078a:	f000 fc5b 	bl	1a001044 <Chip_Clock_SetBaseClock>
   Chip_Clock_DisableMainPLL(); /* Disable PLL */
1a00078e:	f7ff ffa5 	bl	1a0006dc <Chip_Clock_DisableMainPLL>

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000792:	79fb      	ldrb	r3, [r7, #7]
1a000794:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a00079c:	6838      	ldr	r0, [r7, #0]
1a00079e:	4619      	mov	r1, r3
1a0007a0:	f000 fa96 	bl	1a000cd0 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a0007a4:	683b      	ldr	r3, [r7, #0]
1a0007a6:	4a42      	ldr	r2, [pc, #264]	; (1a0008b0 <Chip_SetupCoreClock+0x154>)
1a0007a8:	4293      	cmp	r3, r2
1a0007aa:	d930      	bls.n	1a00080e <Chip_SetupCoreClock+0xb2>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a0007b2:	2b00      	cmp	r3, #0
1a0007b4:	d002      	beq.n	1a0007bc <Chip_SetupCoreClock+0x60>
1a0007b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a0007b8:	2b00      	cmp	r3, #0
1a0007ba:	d022      	beq.n	1a000802 <Chip_SetupCoreClock+0xa6>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a0007bc:	79fb      	ldrb	r3, [r7, #7]
1a0007be:	743b      	strb	r3, [r7, #16]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a0007c0:	f107 030c 	add.w	r3, r7, #12
1a0007c4:	483a      	ldr	r0, [pc, #232]	; (1a0008b0 <Chip_SetupCoreClock+0x154>)
1a0007c6:	4619      	mov	r1, r3
1a0007c8:	f000 fa82 	bl	1a000cd0 <Chip_Clock_CalcMainPLLValue>
           Chip_Clock_SetupMainPLL(&lpll);
1a0007cc:	f107 030c 	add.w	r3, r7, #12
1a0007d0:	4618      	mov	r0, r3
1a0007d2:	f7ff ff91 	bl	1a0006f8 <Chip_Clock_SetupMainPLL>
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a0007d6:	bf00      	nop
1a0007d8:	f7ff ffae 	bl	1a000738 <Chip_Clock_MainPLLLocked>
1a0007dc:	4603      	mov	r3, r0
1a0007de:	2b00      	cmp	r3, #0
1a0007e0:	d0fa      	beq.n	1a0007d8 <Chip_SetupCoreClock+0x7c>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0007e2:	2004      	movs	r0, #4
1a0007e4:	2109      	movs	r1, #9
1a0007e6:	2201      	movs	r2, #1
1a0007e8:	2300      	movs	r3, #0
1a0007ea:	f000 fc2b 	bl	1a001044 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a0007ee:	bf00      	nop
1a0007f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0007f2:	1e5a      	subs	r2, r3, #1
1a0007f4:	64fa      	str	r2, [r7, #76]	; 0x4c
1a0007f6:	2b00      	cmp	r3, #0
1a0007f8:	d1fa      	bne.n	1a0007f0 <Chip_SetupCoreClock+0x94>
           delay = 5500;
1a0007fa:	f241 537c 	movw	r3, #5500	; 0x157c
1a0007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

   if (core_freq > 110000000UL) {
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000800:	e005      	b.n	1a00080e <Chip_SetupCoreClock+0xb2>
           while(!Chip_Clock_MainPLLLocked()) {}
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
1a000802:	2301      	movs	r3, #1
1a000804:	653b      	str	r3, [r7, #80]	; 0x50
           ppll.ctrl &= ~(1 << 7);
1a000806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00080c:	62fb      	str	r3, [r7, #44]	; 0x2c
       }
   }

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);
1a00080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a000812:	4618      	mov	r0, r3
1a000814:	f7ff ff70 	bl	1a0006f8 <Chip_Clock_SetupMainPLL>

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000818:	bf00      	nop
1a00081a:	f7ff ff8d 	bl	1a000738 <Chip_Clock_MainPLLLocked>
1a00081e:	4603      	mov	r3, r0
1a000820:	2b00      	cmp	r3, #0
1a000822:	d0fa      	beq.n	1a00081a <Chip_SetupCoreClock+0xbe>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000824:	2004      	movs	r0, #4
1a000826:	2109      	movs	r1, #9
1a000828:	2201      	movs	r2, #1
1a00082a:	2300      	movs	r3, #0
1a00082c:	f000 fc0a 	bl	1a001044 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000830:	bf00      	nop
1a000832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a000834:	1e5a      	subs	r2, r3, #1
1a000836:	64fa      	str	r2, [r7, #76]	; 0x4c
1a000838:	2b00      	cmp	r3, #0
1a00083a:	d1fa      	bne.n	1a000832 <Chip_SetupCoreClock+0xd6>
   if (direct) {
1a00083c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1a00083e:	2b00      	cmp	r3, #0
1a000840:	d011      	beq.n	1a000866 <Chip_SetupCoreClock+0x10a>
       delay = 5500;
1a000842:	f241 537c 	movw	r3, #5500	; 0x157c
1a000846:	64fb      	str	r3, [r7, #76]	; 0x4c
       ppll.ctrl |= 1 << 7;
1a000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00084a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00084e:	62fb      	str	r3, [r7, #44]	; 0x2c
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
1a000850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
1a000854:	4618      	mov	r0, r3
1a000856:	f7ff ff4f 	bl	1a0006f8 <Chip_Clock_SetupMainPLL>
       while(delay --){} /* Wait for approx 50 uSec */
1a00085a:	bf00      	nop
1a00085c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00085e:	1e5a      	subs	r2, r3, #1
1a000860:	64fa      	str	r2, [r7, #76]	; 0x4c
1a000862:	2b00      	cmp	r3, #0
1a000864:	d1fa      	bne.n	1a00085c <Chip_SetupCoreClock+0x100>
   }

   if (setbase) {
1a000866:	79bb      	ldrb	r3, [r7, #6]
1a000868:	2b00      	cmp	r3, #0
1a00086a:	d01e      	beq.n	1a0008aa <Chip_SetupCoreClock+0x14e>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00086c:	2300      	movs	r3, #0
1a00086e:	657b      	str	r3, [r7, #84]	; 0x54
1a000870:	e018      	b.n	1a0008a4 <Chip_SetupCoreClock+0x148>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000872:	4a10      	ldr	r2, [pc, #64]	; (1a0008b4 <Chip_SetupCoreClock+0x158>)
1a000874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a000876:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a00087a:	4a0e      	ldr	r2, [pc, #56]	; (1a0008b4 <Chip_SetupCoreClock+0x158>)
1a00087c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a00087e:	009b      	lsls	r3, r3, #2
1a000880:	4413      	add	r3, r2
1a000882:	7859      	ldrb	r1, [r3, #1]
1a000884:	4a0b      	ldr	r2, [pc, #44]	; (1a0008b4 <Chip_SetupCoreClock+0x158>)
1a000886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a000888:	009b      	lsls	r3, r3, #2
1a00088a:	4413      	add	r3, r2
1a00088c:	789c      	ldrb	r4, [r3, #2]
1a00088e:	4a09      	ldr	r2, [pc, #36]	; (1a0008b4 <Chip_SetupCoreClock+0x158>)
1a000890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a000892:	009b      	lsls	r3, r3, #2
1a000894:	4413      	add	r3, r2
1a000896:	78db      	ldrb	r3, [r3, #3]
1a000898:	4622      	mov	r2, r4
1a00089a:	f000 fbd3 	bl	1a001044 <Chip_Clock_SetBaseClock>

   if (setbase) {
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00089e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0008a0:	3301      	adds	r3, #1
1a0008a2:	657b      	str	r3, [r7, #84]	; 0x54
1a0008a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1a0008a6:	2b11      	cmp	r3, #17
1a0008a8:	d9e3      	bls.n	1a000872 <Chip_SetupCoreClock+0x116>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a0008aa:	375c      	adds	r7, #92	; 0x5c
1a0008ac:	46bd      	mov	sp, r7
1a0008ae:	bd90      	pop	{r4, r7, pc}
1a0008b0:	068e7780 	.word	0x068e7780
1a0008b4:	1a001ce4 	.word	0x1a001ce4

1a0008b8 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0008b8:	b480      	push	{r7}
1a0008ba:	b083      	sub	sp, #12
1a0008bc:	af00      	add	r7, sp, #0
1a0008be:	6078      	str	r0, [r7, #4]
}
1a0008c0:	370c      	adds	r7, #12
1a0008c2:	46bd      	mov	sp, r7
1a0008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0008c8:	4770      	bx	lr
1a0008ca:	bf00      	nop

1a0008cc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0008cc:	b580      	push	{r7, lr}
1a0008ce:	af00      	add	r7, sp, #0
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0008d0:	2069      	movs	r0, #105	; 0x69
1a0008d2:	f000 fc69 	bl	1a0011a8 <Chip_Clock_GetRate>
1a0008d6:	4602      	mov	r2, r0
1a0008d8:	4b01      	ldr	r3, [pc, #4]	; (1a0008e0 <SystemCoreClockUpdate+0x14>)
1a0008da:	601a      	str	r2, [r3, #0]
}
1a0008dc:	bd80      	pop	{r7, pc}
1a0008de:	bf00      	nop
1a0008e0:	10000008 	.word	0x10000008

1a0008e4 <ABS>:

/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
1a0008e4:	b480      	push	{r7}
1a0008e6:	b083      	sub	sp, #12
1a0008e8:	af00      	add	r7, sp, #0
1a0008ea:	6078      	str	r0, [r7, #4]
   if (val < 0)
1a0008ec:	687b      	ldr	r3, [r7, #4]
1a0008ee:	2b00      	cmp	r3, #0
1a0008f0:	da02      	bge.n	1a0008f8 <ABS+0x14>
       return -val;
1a0008f2:	687b      	ldr	r3, [r7, #4]
1a0008f4:	425b      	negs	r3, r3
1a0008f6:	e000      	b.n	1a0008fa <ABS+0x16>
   return val;
1a0008f8:	687b      	ldr	r3, [r7, #4]
}
1a0008fa:	4618      	mov	r0, r3
1a0008fc:	370c      	adds	r7, #12
1a0008fe:	46bd      	mov	sp, r7
1a000900:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000904:	4770      	bx	lr
1a000906:	bf00      	nop

1a000908 <pll_calc_divs>:

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000908:	b580      	push	{r7, lr}
1a00090a:	b088      	sub	sp, #32
1a00090c:	af00      	add	r7, sp, #0
1a00090e:	6078      	str	r0, [r7, #4]
1a000910:	6039      	str	r1, [r7, #0]

   uint32_t prev = freq;
1a000912:	687b      	ldr	r3, [r7, #4]
1a000914:	61fb      	str	r3, [r7, #28]
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000916:	683b      	ldr	r3, [r7, #0]
1a000918:	681b      	ldr	r3, [r3, #0]
1a00091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a00091e:	2b00      	cmp	r3, #0
1a000920:	d005      	beq.n	1a00092e <pll_calc_divs+0x26>
       ppll->ctrl &= ~(1 << 6);
1a000922:	683b      	ldr	r3, [r7, #0]
1a000924:	681b      	ldr	r3, [r3, #0]
1a000926:	f023 0240 	bic.w	r2, r3, #64	; 0x40
1a00092a:	683b      	ldr	r3, [r7, #0]
1a00092c:	601a      	str	r2, [r3, #0]
   }
   for (n = 1; n <= 4; n++) {
1a00092e:	2301      	movs	r3, #1
1a000930:	61bb      	str	r3, [r7, #24]
1a000932:	e06d      	b.n	1a000a10 <pll_calc_divs+0x108>
       for (p = 0; p < 4; p ++) {
1a000934:	2300      	movs	r3, #0
1a000936:	613b      	str	r3, [r7, #16]
1a000938:	e064      	b.n	1a000a04 <pll_calc_divs+0xfc>
           for (m = 1; m <= 256; m++) {
1a00093a:	2301      	movs	r3, #1
1a00093c:	617b      	str	r3, [r7, #20]
1a00093e:	e05a      	b.n	1a0009f6 <pll_calc_divs+0xee>
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
1a000940:	683b      	ldr	r3, [r7, #0]
1a000942:	681b      	ldr	r3, [r3, #0]
1a000944:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a000948:	2b00      	cmp	r3, #0
1a00094a:	d00e      	beq.n	1a00096a <pll_calc_divs+0x62>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00094c:	693b      	ldr	r3, [r7, #16]
1a00094e:	3301      	adds	r3, #1
1a000950:	697a      	ldr	r2, [r7, #20]
1a000952:	fa02 f303 	lsl.w	r3, r2, r3
1a000956:	461a      	mov	r2, r3
1a000958:	683b      	ldr	r3, [r7, #0]
1a00095a:	695b      	ldr	r3, [r3, #20]
1a00095c:	fb03 f202 	mul.w	r2, r3, r2
1a000960:	69bb      	ldr	r3, [r7, #24]
1a000962:	fbb2 f3f3 	udiv	r3, r2, r3
1a000966:	60fb      	str	r3, [r7, #12]
1a000968:	e008      	b.n	1a00097c <pll_calc_divs+0x74>
               } else {
                   fcco = (m * ppll->fin) / n;
1a00096a:	683b      	ldr	r3, [r7, #0]
1a00096c:	695b      	ldr	r3, [r3, #20]
1a00096e:	697a      	ldr	r2, [r7, #20]
1a000970:	fb02 f203 	mul.w	r2, r2, r3
1a000974:	69bb      	ldr	r3, [r7, #24]
1a000976:	fbb2 f3f3 	udiv	r3, r2, r3
1a00097a:	60fb      	str	r3, [r7, #12]
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00097c:	68fb      	ldr	r3, [r7, #12]
1a00097e:	4a27      	ldr	r2, [pc, #156]	; (1a000a1c <pll_calc_divs+0x114>)
1a000980:	4293      	cmp	r3, r2
1a000982:	d800      	bhi.n	1a000986 <pll_calc_divs+0x7e>
1a000984:	e034      	b.n	1a0009f0 <pll_calc_divs+0xe8>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000986:	68fb      	ldr	r3, [r7, #12]
1a000988:	4a25      	ldr	r2, [pc, #148]	; (1a000a20 <pll_calc_divs+0x118>)
1a00098a:	4293      	cmp	r3, r2
1a00098c:	d900      	bls.n	1a000990 <pll_calc_divs+0x88>
1a00098e:	e036      	b.n	1a0009fe <pll_calc_divs+0xf6>
               if (ppll->ctrl & (1 << 7)) {
1a000990:	683b      	ldr	r3, [r7, #0]
1a000992:	681b      	ldr	r3, [r3, #0]
1a000994:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000998:	2b00      	cmp	r3, #0
1a00099a:	d002      	beq.n	1a0009a2 <pll_calc_divs+0x9a>
                   fout = fcco;
1a00099c:	68fb      	ldr	r3, [r7, #12]
1a00099e:	60bb      	str	r3, [r7, #8]
1a0009a0:	e005      	b.n	1a0009ae <pll_calc_divs+0xa6>
               } else {
                   fout = fcco >> (p + 1);
1a0009a2:	693b      	ldr	r3, [r7, #16]
1a0009a4:	3301      	adds	r3, #1
1a0009a6:	68fa      	ldr	r2, [r7, #12]
1a0009a8:	fa22 f303 	lsr.w	r3, r2, r3
1a0009ac:	60bb      	str	r3, [r7, #8]
               }

               if (ABS(freq - fout) < prev) {
1a0009ae:	687a      	ldr	r2, [r7, #4]
1a0009b0:	68bb      	ldr	r3, [r7, #8]
1a0009b2:	1ad3      	subs	r3, r2, r3
1a0009b4:	4618      	mov	r0, r3
1a0009b6:	f7ff ff95 	bl	1a0008e4 <ABS>
1a0009ba:	4602      	mov	r2, r0
1a0009bc:	69fb      	ldr	r3, [r7, #28]
1a0009be:	429a      	cmp	r2, r3
1a0009c0:	d216      	bcs.n	1a0009f0 <pll_calc_divs+0xe8>
                   ppll->nsel = n;
1a0009c2:	683b      	ldr	r3, [r7, #0]
1a0009c4:	69ba      	ldr	r2, [r7, #24]
1a0009c6:	609a      	str	r2, [r3, #8]
                   ppll->psel = p + 1;
1a0009c8:	693b      	ldr	r3, [r7, #16]
1a0009ca:	1c5a      	adds	r2, r3, #1
1a0009cc:	683b      	ldr	r3, [r7, #0]
1a0009ce:	60da      	str	r2, [r3, #12]
                   ppll->msel = m;
1a0009d0:	683b      	ldr	r3, [r7, #0]
1a0009d2:	697a      	ldr	r2, [r7, #20]
1a0009d4:	611a      	str	r2, [r3, #16]
                   ppll->fout = fout;
1a0009d6:	683b      	ldr	r3, [r7, #0]
1a0009d8:	68ba      	ldr	r2, [r7, #8]
1a0009da:	619a      	str	r2, [r3, #24]
                   ppll->fcco = fcco;
1a0009dc:	683b      	ldr	r3, [r7, #0]
1a0009de:	68fa      	ldr	r2, [r7, #12]
1a0009e0:	61da      	str	r2, [r3, #28]
                   prev = ABS(freq - fout);
1a0009e2:	687a      	ldr	r2, [r7, #4]
1a0009e4:	68bb      	ldr	r3, [r7, #8]
1a0009e6:	1ad3      	subs	r3, r2, r3
1a0009e8:	4618      	mov	r0, r3
1a0009ea:	f7ff ff7b 	bl	1a0008e4 <ABS>
1a0009ee:	61f8      	str	r0, [r7, #28]
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
1a0009f0:	697b      	ldr	r3, [r7, #20]
1a0009f2:	3301      	adds	r3, #1
1a0009f4:	617b      	str	r3, [r7, #20]
1a0009f6:	697b      	ldr	r3, [r7, #20]
1a0009f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a0009fc:	dda0      	ble.n	1a000940 <pll_calc_divs+0x38>
   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a0009fe:	693b      	ldr	r3, [r7, #16]
1a000a00:	3301      	adds	r3, #1
1a000a02:	613b      	str	r3, [r7, #16]
1a000a04:	693b      	ldr	r3, [r7, #16]
1a000a06:	2b03      	cmp	r3, #3
1a000a08:	dd97      	ble.n	1a00093a <pll_calc_divs+0x32>

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
1a000a0a:	69bb      	ldr	r3, [r7, #24]
1a000a0c:	3301      	adds	r3, #1
1a000a0e:	61bb      	str	r3, [r7, #24]
1a000a10:	69bb      	ldr	r3, [r7, #24]
1a000a12:	2b04      	cmp	r3, #4
1a000a14:	dd8e      	ble.n	1a000934 <pll_calc_divs+0x2c>
                   prev = ABS(freq - fout);
               }
           }
       }
   }
}
1a000a16:	3720      	adds	r7, #32
1a000a18:	46bd      	mov	sp, r7
1a000a1a:	bd80      	pop	{r7, pc}
1a000a1c:	094c5eff 	.word	0x094c5eff
1a000a20:	1312d000 	.word	0x1312d000

1a000a24 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a24:	b5b0      	push	{r4, r5, r7, lr}
1a000a26:	b09e      	sub	sp, #120	; 0x78
1a000a28:	af00      	add	r7, sp, #0
1a000a2a:	6078      	str	r0, [r7, #4]
1a000a2c:	6039      	str	r1, [r7, #0]
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000a2e:	f107 030c 	add.w	r3, r7, #12
1a000a32:	2260      	movs	r2, #96	; 0x60
1a000a34:	4618      	mov	r0, r3
1a000a36:	2100      	movs	r1, #0
1a000a38:	f001 f928 	bl	1a001c8c <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000a3c:	68fb      	ldr	r3, [r7, #12]
1a000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000a42:	60fb      	str	r3, [r7, #12]
   pll[0].fin = ppll->fin;
1a000a44:	683b      	ldr	r3, [r7, #0]
1a000a46:	695b      	ldr	r3, [r3, #20]
1a000a48:	623b      	str	r3, [r7, #32]
   pll[0].srcin = ppll->srcin;
1a000a4a:	683b      	ldr	r3, [r7, #0]
1a000a4c:	791b      	ldrb	r3, [r3, #4]
1a000a4e:	743b      	strb	r3, [r7, #16]
   pll_calc_divs(freq, &pll[0]);
1a000a50:	f107 030c 	add.w	r3, r7, #12
1a000a54:	6878      	ldr	r0, [r7, #4]
1a000a56:	4619      	mov	r1, r3
1a000a58:	f7ff ff56 	bl	1a000908 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a000a5e:	687b      	ldr	r3, [r7, #4]
1a000a60:	429a      	cmp	r2, r3
1a000a62:	d10a      	bne.n	1a000a7a <pll_get_frac+0x56>
       *ppll = pll[0];
1a000a64:	683b      	ldr	r3, [r7, #0]
1a000a66:	461d      	mov	r5, r3
1a000a68:	f107 040c 	add.w	r4, r7, #12
1a000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000a70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000a74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000a78:	e08c      	b.n	1a000b94 <pll_get_frac+0x170>
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000a7c:	687a      	ldr	r2, [r7, #4]
1a000a7e:	1ad3      	subs	r3, r2, r3
1a000a80:	4618      	mov	r0, r3
1a000a82:	f7ff ff2f 	bl	1a0008e4 <ABS>
1a000a86:	4603      	mov	r3, r0
1a000a88:	66fb      	str	r3, [r7, #108]	; 0x6c

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000a8a:	2340      	movs	r3, #64	; 0x40
1a000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   pll[2].fin = ppll->fin;
1a000a8e:	683b      	ldr	r3, [r7, #0]
1a000a90:	695b      	ldr	r3, [r3, #20]
1a000a92:	663b      	str	r3, [r7, #96]	; 0x60
   pll[2].srcin = ppll->srcin;
1a000a94:	683b      	ldr	r3, [r7, #0]
1a000a96:	791b      	ldrb	r3, [r3, #4]
1a000a98:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
   pll_calc_divs(freq, &pll[2]);
1a000a9c:	f107 030c 	add.w	r3, r7, #12
1a000aa0:	3340      	adds	r3, #64	; 0x40
1a000aa2:	6878      	ldr	r0, [r7, #4]
1a000aa4:	4619      	mov	r1, r3
1a000aa6:	f7ff ff2f 	bl	1a000908 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000aaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1a000aac:	687b      	ldr	r3, [r7, #4]
1a000aae:	429a      	cmp	r2, r3
1a000ab0:	d10a      	bne.n	1a000ac8 <pll_get_frac+0xa4>
       *ppll = pll[2];
1a000ab2:	683b      	ldr	r3, [r7, #0]
1a000ab4:	461d      	mov	r5, r3
1a000ab6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000abe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000ac2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000ac6:	e065      	b.n	1a000b94 <pll_get_frac+0x170>
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a000aca:	687a      	ldr	r2, [r7, #4]
1a000acc:	1ad3      	subs	r3, r2, r3
1a000ace:	4618      	mov	r0, r3
1a000ad0:	f7ff ff08 	bl	1a0008e4 <ABS>
1a000ad4:	4603      	mov	r3, r0
1a000ad6:	677b      	str	r3, [r7, #116]	; 0x74
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000ad8:	2340      	movs	r3, #64	; 0x40
1a000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   pll[1].fin = ppll->fin;
1a000adc:	683b      	ldr	r3, [r7, #0]
1a000ade:	695b      	ldr	r3, [r3, #20]
1a000ae0:	643b      	str	r3, [r7, #64]	; 0x40
   pll[1].srcin = ppll->srcin;
1a000ae2:	683b      	ldr	r3, [r7, #0]
1a000ae4:	791b      	ldrb	r3, [r3, #4]
1a000ae6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   pll_calc_divs(freq, &pll[1]);
1a000aea:	f107 030c 	add.w	r3, r7, #12
1a000aee:	3320      	adds	r3, #32
1a000af0:	6878      	ldr	r0, [r7, #4]
1a000af2:	4619      	mov	r1, r3
1a000af4:	f7ff ff08 	bl	1a000908 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1a000afa:	687b      	ldr	r3, [r7, #4]
1a000afc:	429a      	cmp	r2, r3
1a000afe:	d10a      	bne.n	1a000b16 <pll_get_frac+0xf2>
       *ppll = pll[1];
1a000b00:	683b      	ldr	r3, [r7, #0]
1a000b02:	461d      	mov	r5, r3
1a000b04:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a000b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000b0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000b10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       return ;
1a000b14:	e03e      	b.n	1a000b94 <pll_get_frac+0x170>
   }
   diff[1] = ABS(freq - pll[1].fout);
1a000b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a000b18:	687a      	ldr	r2, [r7, #4]
1a000b1a:	1ad3      	subs	r3, r2, r3
1a000b1c:	4618      	mov	r0, r3
1a000b1e:	f7ff fee1 	bl	1a0008e4 <ABS>
1a000b22:	4603      	mov	r3, r0
1a000b24:	673b      	str	r3, [r7, #112]	; 0x70

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000b26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a000b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1a000b2a:	429a      	cmp	r2, r3
1a000b2c:	dc19      	bgt.n	1a000b62 <pll_get_frac+0x13e>
       if (diff[0] <= diff[2]) {
1a000b2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a000b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a000b32:	429a      	cmp	r2, r3
1a000b34:	dc0a      	bgt.n	1a000b4c <pll_get_frac+0x128>
           *ppll = pll[0];
1a000b36:	683b      	ldr	r3, [r7, #0]
1a000b38:	461d      	mov	r5, r3
1a000b3a:	f107 040c 	add.w	r4, r7, #12
1a000b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000b42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000b46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000b4a:	e023      	b.n	1a000b94 <pll_get_frac+0x170>
       } else {
           *ppll = pll[2];
1a000b4c:	683b      	ldr	r3, [r7, #0]
1a000b4e:	461d      	mov	r5, r3
1a000b50:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000b58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000b5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000b60:	e018      	b.n	1a000b94 <pll_get_frac+0x170>
       }
   } else {
       if (diff[1] <= diff[2]) {
1a000b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a000b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a000b66:	429a      	cmp	r2, r3
1a000b68:	dc0a      	bgt.n	1a000b80 <pll_get_frac+0x15c>
           *ppll = pll[1];
1a000b6a:	683b      	ldr	r3, [r7, #0]
1a000b6c:	461d      	mov	r5, r3
1a000b6e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a000b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000b7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a000b7e:	e009      	b.n	1a000b94 <pll_get_frac+0x170>
       } else {
           *ppll = pll[2];
1a000b80:	683b      	ldr	r3, [r7, #0]
1a000b82:	461d      	mov	r5, r3
1a000b84:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a000b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a000b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000b8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a000b90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
       }
   }
}
1a000b94:	3778      	adds	r7, #120	; 0x78
1a000b96:	46bd      	mov	sp, r7
1a000b98:	bdb0      	pop	{r4, r5, r7, pc}
1a000b9a:	bf00      	nop

1a000b9c <Chip_Clock_GetDivRate>:
   return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000b9c:	b580      	push	{r7, lr}
1a000b9e:	b084      	sub	sp, #16
1a000ba0:	af00      	add	r7, sp, #0
1a000ba2:	4603      	mov	r3, r0
1a000ba4:	460a      	mov	r2, r1
1a000ba6:	71fb      	strb	r3, [r7, #7]
1a000ba8:	4613      	mov	r3, r2
1a000baa:	71bb      	strb	r3, [r7, #6]
   CHIP_CGU_CLKIN_T input;
   uint32_t div;

   input = Chip_Clock_GetDividerSource(divider);
1a000bac:	79bb      	ldrb	r3, [r7, #6]
1a000bae:	4618      	mov	r0, r3
1a000bb0:	f000 f95a 	bl	1a000e68 <Chip_Clock_GetDividerSource>
1a000bb4:	4603      	mov	r3, r0
1a000bb6:	73fb      	strb	r3, [r7, #15]
   div = Chip_Clock_GetDividerDivisor(divider);
1a000bb8:	79bb      	ldrb	r3, [r7, #6]
1a000bba:	4618      	mov	r0, r3
1a000bbc:	f000 f974 	bl	1a000ea8 <Chip_Clock_GetDividerDivisor>
1a000bc0:	60b8      	str	r0, [r7, #8]
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000bc2:	7bfb      	ldrb	r3, [r7, #15]
1a000bc4:	4618      	mov	r0, r3
1a000bc6:	f000 f98b 	bl	1a000ee0 <Chip_Clock_GetClockInputHz>
1a000bca:	4602      	mov	r2, r0
1a000bcc:	68bb      	ldr	r3, [r7, #8]
1a000bce:	3301      	adds	r3, #1
1a000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a000bd4:	4618      	mov	r0, r3
1a000bd6:	3710      	adds	r7, #16
1a000bd8:	46bd      	mov	sp, r7
1a000bda:	bd80      	pop	{r7, pc}

1a000bdc <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000bdc:	b480      	push	{r7}
1a000bde:	b085      	sub	sp, #20
1a000be0:	af00      	add	r7, sp, #0
1a000be2:	4603      	mov	r3, r0
1a000be4:	80fb      	strh	r3, [r7, #6]
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000be6:	231c      	movs	r3, #28
1a000be8:	73fb      	strb	r3, [r7, #15]
   int i = 0;
1a000bea:	2300      	movs	r3, #0
1a000bec:	60bb      	str	r3, [r7, #8]

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000bee:	e022      	b.n	1a000c36 <Chip_Clock_FindBaseClock+0x5a>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000bf0:	491b      	ldr	r1, [pc, #108]	; (1a000c60 <Chip_Clock_FindBaseClock+0x84>)
1a000bf2:	68ba      	ldr	r2, [r7, #8]
1a000bf4:	4613      	mov	r3, r2
1a000bf6:	005b      	lsls	r3, r3, #1
1a000bf8:	4413      	add	r3, r2
1a000bfa:	005b      	lsls	r3, r3, #1
1a000bfc:	440b      	add	r3, r1
1a000bfe:	881b      	ldrh	r3, [r3, #0]
1a000c00:	88fa      	ldrh	r2, [r7, #6]
1a000c02:	429a      	cmp	r2, r3
1a000c04:	d314      	bcc.n	1a000c30 <Chip_Clock_FindBaseClock+0x54>
1a000c06:	4916      	ldr	r1, [pc, #88]	; (1a000c60 <Chip_Clock_FindBaseClock+0x84>)
1a000c08:	68ba      	ldr	r2, [r7, #8]
1a000c0a:	4613      	mov	r3, r2
1a000c0c:	005b      	lsls	r3, r3, #1
1a000c0e:	4413      	add	r3, r2
1a000c10:	005b      	lsls	r3, r3, #1
1a000c12:	440b      	add	r3, r1
1a000c14:	885b      	ldrh	r3, [r3, #2]
1a000c16:	88fa      	ldrh	r2, [r7, #6]
1a000c18:	429a      	cmp	r2, r3
1a000c1a:	d809      	bhi.n	1a000c30 <Chip_Clock_FindBaseClock+0x54>
           baseclk = periph_to_base[i].clkbase;
1a000c1c:	4910      	ldr	r1, [pc, #64]	; (1a000c60 <Chip_Clock_FindBaseClock+0x84>)
1a000c1e:	68ba      	ldr	r2, [r7, #8]
1a000c20:	4613      	mov	r3, r2
1a000c22:	005b      	lsls	r3, r3, #1
1a000c24:	4413      	add	r3, r2
1a000c26:	005b      	lsls	r3, r3, #1
1a000c28:	440b      	add	r3, r1
1a000c2a:	791b      	ldrb	r3, [r3, #4]
1a000c2c:	73fb      	strb	r3, [r7, #15]
1a000c2e:	e002      	b.n	1a000c36 <Chip_Clock_FindBaseClock+0x5a>
       }
       else {
           i++;
1a000c30:	68bb      	ldr	r3, [r7, #8]
1a000c32:	3301      	adds	r3, #1
1a000c34:	60bb      	str	r3, [r7, #8]
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c36:	7bfb      	ldrb	r3, [r7, #15]
1a000c38:	2b1c      	cmp	r3, #28
1a000c3a:	d10a      	bne.n	1a000c52 <Chip_Clock_FindBaseClock+0x76>
1a000c3c:	4908      	ldr	r1, [pc, #32]	; (1a000c60 <Chip_Clock_FindBaseClock+0x84>)
1a000c3e:	68ba      	ldr	r2, [r7, #8]
1a000c40:	4613      	mov	r3, r2
1a000c42:	005b      	lsls	r3, r3, #1
1a000c44:	4413      	add	r3, r2
1a000c46:	005b      	lsls	r3, r3, #1
1a000c48:	440b      	add	r3, r1
1a000c4a:	791b      	ldrb	r3, [r3, #4]
1a000c4c:	7bfa      	ldrb	r2, [r7, #15]
1a000c4e:	429a      	cmp	r2, r3
1a000c50:	d1ce      	bne.n	1a000bf0 <Chip_Clock_FindBaseClock+0x14>
       else {
           i++;
       }
   }

   return baseclk;
1a000c52:	7bfb      	ldrb	r3, [r7, #15]
}
1a000c54:	4618      	mov	r0, r3
1a000c56:	3714      	adds	r7, #20
1a000c58:	46bd      	mov	sp, r7
1a000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000c5e:	4770      	bx	lr
1a000c60:	1a001d2c 	.word	0x1a001d2c

1a000c64 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000c64:	b480      	push	{r7}
1a000c66:	b083      	sub	sp, #12
1a000c68:	af00      	add	r7, sp, #0
   volatile uint32_t delay = 1000;
1a000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000c6e:	603b      	str	r3, [r7, #0]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000c70:	4b14      	ldr	r3, [pc, #80]	; (1a000cc4 <Chip_Clock_EnableCrystal+0x60>)
1a000c72:	699b      	ldr	r3, [r3, #24]
1a000c74:	607b      	str	r3, [r7, #4]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000c76:	687b      	ldr	r3, [r7, #4]
1a000c78:	f023 0302 	bic.w	r3, r3, #2
1a000c7c:	607b      	str	r3, [r7, #4]
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000c7e:	4b11      	ldr	r3, [pc, #68]	; (1a000cc4 <Chip_Clock_EnableCrystal+0x60>)
1a000c80:	699a      	ldr	r2, [r3, #24]
1a000c82:	687b      	ldr	r3, [r7, #4]
1a000c84:	429a      	cmp	r2, r3
1a000c86:	d002      	beq.n	1a000c8e <Chip_Clock_EnableCrystal+0x2a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c88:	4a0e      	ldr	r2, [pc, #56]	; (1a000cc4 <Chip_Clock_EnableCrystal+0x60>)
1a000c8a:	687b      	ldr	r3, [r7, #4]
1a000c8c:	6193      	str	r3, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000c8e:	687b      	ldr	r3, [r7, #4]
1a000c90:	f023 0301 	bic.w	r3, r3, #1
1a000c94:	607b      	str	r3, [r7, #4]
   if (OscRateIn >= 20000000) {
1a000c96:	4b0c      	ldr	r3, [pc, #48]	; (1a000cc8 <Chip_Clock_EnableCrystal+0x64>)
1a000c98:	681b      	ldr	r3, [r3, #0]
1a000c9a:	4a0c      	ldr	r2, [pc, #48]	; (1a000ccc <Chip_Clock_EnableCrystal+0x68>)
1a000c9c:	4293      	cmp	r3, r2
1a000c9e:	d903      	bls.n	1a000ca8 <Chip_Clock_EnableCrystal+0x44>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000ca0:	687b      	ldr	r3, [r7, #4]
1a000ca2:	f043 0304 	orr.w	r3, r3, #4
1a000ca6:	607b      	str	r3, [r7, #4]

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ca8:	4a06      	ldr	r2, [pc, #24]	; (1a000cc4 <Chip_Clock_EnableCrystal+0x60>)
1a000caa:	687b      	ldr	r3, [r7, #4]
1a000cac:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000cae:	bf00      	nop
1a000cb0:	683b      	ldr	r3, [r7, #0]
1a000cb2:	1e5a      	subs	r2, r3, #1
1a000cb4:	603a      	str	r2, [r7, #0]
1a000cb6:	2b00      	cmp	r3, #0
1a000cb8:	d1fa      	bne.n	1a000cb0 <Chip_Clock_EnableCrystal+0x4c>
}
1a000cba:	370c      	adds	r7, #12
1a000cbc:	46bd      	mov	sp, r7
1a000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000cc2:	4770      	bx	lr
1a000cc4:	40050000 	.word	0x40050000
1a000cc8:	1a001e14 	.word	0x1a001e14
1a000ccc:	01312cff 	.word	0x01312cff

1a000cd0 <Chip_Clock_CalcMainPLLValue>:

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cd0:	b580      	push	{r7, lr}
1a000cd2:	b082      	sub	sp, #8
1a000cd4:	af00      	add	r7, sp, #0
1a000cd6:	6078      	str	r0, [r7, #4]
1a000cd8:	6039      	str	r1, [r7, #0]
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000cda:	683b      	ldr	r3, [r7, #0]
1a000cdc:	791b      	ldrb	r3, [r3, #4]
1a000cde:	4618      	mov	r0, r3
1a000ce0:	f000 f8fe 	bl	1a000ee0 <Chip_Clock_GetClockInputHz>
1a000ce4:	4602      	mov	r2, r0
1a000ce6:	683b      	ldr	r3, [r7, #0]
1a000ce8:	615a      	str	r2, [r3, #20]

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000cea:	687b      	ldr	r3, [r7, #4]
1a000cec:	4a2b      	ldr	r2, [pc, #172]	; (1a000d9c <Chip_Clock_CalcMainPLLValue+0xcc>)
1a000cee:	4293      	cmp	r3, r2
1a000cf0:	d807      	bhi.n	1a000d02 <Chip_Clock_CalcMainPLLValue+0x32>
1a000cf2:	687b      	ldr	r3, [r7, #4]
1a000cf4:	4a2a      	ldr	r2, [pc, #168]	; (1a000da0 <Chip_Clock_CalcMainPLLValue+0xd0>)
1a000cf6:	4293      	cmp	r3, r2
1a000cf8:	d903      	bls.n	1a000d02 <Chip_Clock_CalcMainPLLValue+0x32>
1a000cfa:	683b      	ldr	r3, [r7, #0]
1a000cfc:	695b      	ldr	r3, [r3, #20]
1a000cfe:	2b00      	cmp	r3, #0
1a000d00:	d102      	bne.n	1a000d08 <Chip_Clock_CalcMainPLLValue+0x38>
       return -1;
1a000d02:	f04f 33ff 	mov.w	r3, #4294967295
1a000d06:	e044      	b.n	1a000d92 <Chip_Clock_CalcMainPLLValue+0xc2>
   }

   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000d08:	683b      	ldr	r3, [r7, #0]
1a000d0a:	2280      	movs	r2, #128	; 0x80
1a000d0c:	601a      	str	r2, [r3, #0]
   ppll->nsel = 0;
1a000d0e:	683b      	ldr	r3, [r7, #0]
1a000d10:	2200      	movs	r2, #0
1a000d12:	609a      	str	r2, [r3, #8]
   ppll->psel = 0;
1a000d14:	683b      	ldr	r3, [r7, #0]
1a000d16:	2200      	movs	r2, #0
1a000d18:	60da      	str	r2, [r3, #12]
   ppll->msel = freq / ppll->fin;
1a000d1a:	683b      	ldr	r3, [r7, #0]
1a000d1c:	695b      	ldr	r3, [r3, #20]
1a000d1e:	687a      	ldr	r2, [r7, #4]
1a000d20:	fbb2 f3f3 	udiv	r3, r2, r3
1a000d24:	461a      	mov	r2, r3
1a000d26:	683b      	ldr	r3, [r7, #0]
1a000d28:	611a      	str	r2, [r3, #16]

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000d2a:	687b      	ldr	r3, [r7, #4]
1a000d2c:	4a1d      	ldr	r2, [pc, #116]	; (1a000da4 <Chip_Clock_CalcMainPLLValue+0xd4>)
1a000d2e:	4293      	cmp	r3, r2
1a000d30:	d909      	bls.n	1a000d46 <Chip_Clock_CalcMainPLLValue+0x76>
1a000d32:	683b      	ldr	r3, [r7, #0]
1a000d34:	691b      	ldr	r3, [r3, #16]
1a000d36:	461a      	mov	r2, r3
1a000d38:	683b      	ldr	r3, [r7, #0]
1a000d3a:	695b      	ldr	r3, [r3, #20]
1a000d3c:	fb03 f202 	mul.w	r2, r3, r2
1a000d40:	687b      	ldr	r3, [r7, #4]
1a000d42:	429a      	cmp	r2, r3
1a000d44:	d00f      	beq.n	1a000d66 <Chip_Clock_CalcMainPLLValue+0x96>
       pll_get_frac(freq, ppll);
1a000d46:	6878      	ldr	r0, [r7, #4]
1a000d48:	6839      	ldr	r1, [r7, #0]
1a000d4a:	f7ff fe6b 	bl	1a000a24 <pll_get_frac>
       if (!ppll->nsel) {
1a000d4e:	683b      	ldr	r3, [r7, #0]
1a000d50:	689b      	ldr	r3, [r3, #8]
1a000d52:	2b00      	cmp	r3, #0
1a000d54:	d102      	bne.n	1a000d5c <Chip_Clock_CalcMainPLLValue+0x8c>
           return -1;
1a000d56:	f04f 33ff 	mov.w	r3, #4294967295
1a000d5a:	e01a      	b.n	1a000d92 <Chip_Clock_CalcMainPLLValue+0xc2>
       }
       ppll->nsel --;
1a000d5c:	683b      	ldr	r3, [r7, #0]
1a000d5e:	689b      	ldr	r3, [r3, #8]
1a000d60:	1e5a      	subs	r2, r3, #1
1a000d62:	683b      	ldr	r3, [r7, #0]
1a000d64:	609a      	str	r2, [r3, #8]
   }

   if (ppll->msel == 0) {
1a000d66:	683b      	ldr	r3, [r7, #0]
1a000d68:	691b      	ldr	r3, [r3, #16]
1a000d6a:	2b00      	cmp	r3, #0
1a000d6c:	d102      	bne.n	1a000d74 <Chip_Clock_CalcMainPLLValue+0xa4>
       return - 1;
1a000d6e:	f04f 33ff 	mov.w	r3, #4294967295
1a000d72:	e00e      	b.n	1a000d92 <Chip_Clock_CalcMainPLLValue+0xc2>
   }

   if (ppll->psel) {
1a000d74:	683b      	ldr	r3, [r7, #0]
1a000d76:	68db      	ldr	r3, [r3, #12]
1a000d78:	2b00      	cmp	r3, #0
1a000d7a:	d004      	beq.n	1a000d86 <Chip_Clock_CalcMainPLLValue+0xb6>
       ppll->psel --;
1a000d7c:	683b      	ldr	r3, [r7, #0]
1a000d7e:	68db      	ldr	r3, [r3, #12]
1a000d80:	1e5a      	subs	r2, r3, #1
1a000d82:	683b      	ldr	r3, [r7, #0]
1a000d84:	60da      	str	r2, [r3, #12]
   }

   ppll->msel --;
1a000d86:	683b      	ldr	r3, [r7, #0]
1a000d88:	691b      	ldr	r3, [r3, #16]
1a000d8a:	1e5a      	subs	r2, r3, #1
1a000d8c:	683b      	ldr	r3, [r7, #0]
1a000d8e:	611a      	str	r2, [r3, #16]

   return 0;
1a000d90:	2300      	movs	r3, #0
}
1a000d92:	4618      	mov	r0, r3
1a000d94:	3708      	adds	r7, #8
1a000d96:	46bd      	mov	sp, r7
1a000d98:	bd80      	pop	{r7, pc}
1a000d9a:	bf00      	nop
1a000d9c:	0c28cb00 	.word	0x0c28cb00
1a000da0:	0094c5ef 	.word	0x0094c5ef
1a000da4:	094c5eff 	.word	0x094c5eff

1a000da8 <Chip_Clock_GetMainPLLHz>:
   return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a000da8:	b580      	push	{r7, lr}
1a000daa:	b08c      	sub	sp, #48	; 0x30
1a000dac:	af00      	add	r7, sp, #0
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000dae:	4b2c      	ldr	r3, [pc, #176]	; (1a000e60 <Chip_Clock_GetMainPLLHz+0xb8>)
1a000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000db6:	0e1b      	lsrs	r3, r3, #24
1a000db8:	b2db      	uxtb	r3, r3
1a000dba:	f003 030f 	and.w	r3, r3, #15
1a000dbe:	b2db      	uxtb	r3, r3
1a000dc0:	4618      	mov	r0, r3
1a000dc2:	f000 f88d 	bl	1a000ee0 <Chip_Clock_GetClockInputHz>
1a000dc6:	62b8      	str	r0, [r7, #40]	; 0x28
   uint32_t msel, nsel, psel, direct, fbsel;
   uint32_t m, n, p;
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000dc8:	4a26      	ldr	r2, [pc, #152]	; (1a000e64 <Chip_Clock_GetMainPLLHz+0xbc>)
1a000dca:	1d3b      	adds	r3, r7, #4
1a000dcc:	6810      	ldr	r0, [r2, #0]
1a000dce:	6018      	str	r0, [r3, #0]

   /* No lock? */
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000dd0:	4b23      	ldr	r3, [pc, #140]	; (1a000e60 <Chip_Clock_GetMainPLLHz+0xb8>)
1a000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000dd4:	f003 0301 	and.w	r3, r3, #1
1a000dd8:	2b00      	cmp	r3, #0
1a000dda:	d101      	bne.n	1a000de0 <Chip_Clock_GetMainPLLHz+0x38>
       return 0;
1a000ddc:	2300      	movs	r3, #0
1a000dde:	e03b      	b.n	1a000e58 <Chip_Clock_GetMainPLLHz+0xb0>
   }

   msel = (PLLReg >> 16) & 0xFF;
1a000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000de2:	0c1b      	lsrs	r3, r3, #16
1a000de4:	b2db      	uxtb	r3, r3
1a000de6:	627b      	str	r3, [r7, #36]	; 0x24
   nsel = (PLLReg >> 12) & 0x3;
1a000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000dea:	0b1b      	lsrs	r3, r3, #12
1a000dec:	f003 0303 	and.w	r3, r3, #3
1a000df0:	623b      	str	r3, [r7, #32]
   psel = (PLLReg >> 8) & 0x3;
1a000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000df4:	0a1b      	lsrs	r3, r3, #8
1a000df6:	f003 0303 	and.w	r3, r3, #3
1a000dfa:	61fb      	str	r3, [r7, #28]
   direct = (PLLReg >> 7) & 0x1;
1a000dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000dfe:	09db      	lsrs	r3, r3, #7
1a000e00:	f003 0301 	and.w	r3, r3, #1
1a000e04:	61bb      	str	r3, [r7, #24]
   fbsel = (PLLReg >> 6) & 0x1;
1a000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a000e08:	099b      	lsrs	r3, r3, #6
1a000e0a:	f003 0301 	and.w	r3, r3, #1
1a000e0e:	617b      	str	r3, [r7, #20]

   m = msel + 1;
1a000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000e12:	3301      	adds	r3, #1
1a000e14:	613b      	str	r3, [r7, #16]
   n = nsel + 1;
1a000e16:	6a3b      	ldr	r3, [r7, #32]
1a000e18:	3301      	adds	r3, #1
1a000e1a:	60fb      	str	r3, [r7, #12]
   p = ptab[psel];
1a000e1c:	1d3a      	adds	r2, r7, #4
1a000e1e:	69fb      	ldr	r3, [r7, #28]
1a000e20:	4413      	add	r3, r2
1a000e22:	781b      	ldrb	r3, [r3, #0]
1a000e24:	60bb      	str	r3, [r7, #8]

   if (direct || fbsel) {
1a000e26:	69bb      	ldr	r3, [r7, #24]
1a000e28:	2b00      	cmp	r3, #0
1a000e2a:	d102      	bne.n	1a000e32 <Chip_Clock_GetMainPLLHz+0x8a>
1a000e2c:	697b      	ldr	r3, [r7, #20]
1a000e2e:	2b00      	cmp	r3, #0
1a000e30:	d007      	beq.n	1a000e42 <Chip_Clock_GetMainPLLHz+0x9a>
       return m * (freq / n);
1a000e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a000e34:	68fb      	ldr	r3, [r7, #12]
1a000e36:	fbb2 f3f3 	udiv	r3, r2, r3
1a000e3a:	693a      	ldr	r2, [r7, #16]
1a000e3c:	fb02 f303 	mul.w	r3, r2, r3
1a000e40:	e00a      	b.n	1a000e58 <Chip_Clock_GetMainPLLHz+0xb0>
   }

   return (m / (2 * p)) * (freq / n);
1a000e42:	68bb      	ldr	r3, [r7, #8]
1a000e44:	005b      	lsls	r3, r3, #1
1a000e46:	693a      	ldr	r2, [r7, #16]
1a000e48:	fbb2 f3f3 	udiv	r3, r2, r3
1a000e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a000e4e:	68fa      	ldr	r2, [r7, #12]
1a000e50:	fbb1 f2f2 	udiv	r2, r1, r2
1a000e54:	fb02 f303 	mul.w	r3, r2, r3
}
1a000e58:	4618      	mov	r0, r3
1a000e5a:	3730      	adds	r7, #48	; 0x30
1a000e5c:	46bd      	mov	sp, r7
1a000e5e:	bd80      	pop	{r7, pc}
1a000e60:	40050000 	.word	0x40050000
1a000e64:	1a001d98 	.word	0x1a001d98

1a000e68 <Chip_Clock_GetDividerSource>:
   }
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a000e68:	b480      	push	{r7}
1a000e6a:	b085      	sub	sp, #20
1a000e6c:	af00      	add	r7, sp, #0
1a000e6e:	4603      	mov	r3, r0
1a000e70:	71fb      	strb	r3, [r7, #7]
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000e72:	4a0c      	ldr	r2, [pc, #48]	; (1a000ea4 <Chip_Clock_GetDividerSource+0x3c>)
1a000e74:	79fb      	ldrb	r3, [r7, #7]
1a000e76:	3312      	adds	r3, #18
1a000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000e7c:	60fb      	str	r3, [r7, #12]

   if (reg & 1) {  /* divider is powered down */
1a000e7e:	68fb      	ldr	r3, [r7, #12]
1a000e80:	f003 0301 	and.w	r3, r3, #1
1a000e84:	2b00      	cmp	r3, #0
1a000e86:	d001      	beq.n	1a000e8c <Chip_Clock_GetDividerSource+0x24>
       return CLKINPUT_PD;
1a000e88:	2311      	movs	r3, #17
1a000e8a:	e005      	b.n	1a000e98 <Chip_Clock_GetDividerSource+0x30>
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e8c:	68fb      	ldr	r3, [r7, #12]
1a000e8e:	0e1b      	lsrs	r3, r3, #24
1a000e90:	b2db      	uxtb	r3, r3
1a000e92:	f003 031f 	and.w	r3, r3, #31
1a000e96:	b2db      	uxtb	r3, r3
}
1a000e98:	4618      	mov	r0, r3
1a000e9a:	3714      	adds	r7, #20
1a000e9c:	46bd      	mov	sp, r7
1a000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000ea2:	4770      	bx	lr
1a000ea4:	40050000 	.word	0x40050000

1a000ea8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a000ea8:	b480      	push	{r7}
1a000eaa:	b083      	sub	sp, #12
1a000eac:	af00      	add	r7, sp, #0
1a000eae:	4603      	mov	r3, r0
1a000eb0:	71fb      	strb	r3, [r7, #7]
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000eb2:	4a09      	ldr	r2, [pc, #36]	; (1a000ed8 <Chip_Clock_GetDividerDivisor+0x30>)
1a000eb4:	79fb      	ldrb	r3, [r7, #7]
1a000eb6:	3312      	adds	r3, #18
1a000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000ebc:	089b      	lsrs	r3, r3, #2
1a000ebe:	b2da      	uxtb	r2, r3
1a000ec0:	79fb      	ldrb	r3, [r7, #7]
1a000ec2:	4906      	ldr	r1, [pc, #24]	; (1a000edc <Chip_Clock_GetDividerDivisor+0x34>)
1a000ec4:	5ccb      	ldrb	r3, [r1, r3]
1a000ec6:	4013      	ands	r3, r2
1a000ec8:	b2db      	uxtb	r3, r3
}
1a000eca:	4618      	mov	r0, r3
1a000ecc:	370c      	adds	r7, #12
1a000ece:	46bd      	mov	sp, r7
1a000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000ed4:	4770      	bx	lr
1a000ed6:	bf00      	nop
1a000ed8:	40050000 	.word	0x40050000
1a000edc:	1a001d9c 	.word	0x1a001d9c

1a000ee0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000ee0:	b580      	push	{r7, lr}
1a000ee2:	b084      	sub	sp, #16
1a000ee4:	af00      	add	r7, sp, #0
1a000ee6:	4603      	mov	r3, r0
1a000ee8:	71fb      	strb	r3, [r7, #7]
   uint32_t rate = 0;
1a000eea:	2300      	movs	r3, #0
1a000eec:	60fb      	str	r3, [r7, #12]

   switch (input) {
1a000eee:	79fb      	ldrb	r3, [r7, #7]
1a000ef0:	2b11      	cmp	r3, #17
1a000ef2:	f200 8080 	bhi.w	1a000ff6 <Chip_Clock_GetClockInputHz+0x116>
1a000ef6:	a201      	add	r2, pc, #4	; (adr r2, 1a000efc <Chip_Clock_GetClockInputHz+0x1c>)
1a000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000efc:	1a000f45 	.word	0x1a000f45
1a000f00:	1a000f4d 	.word	0x1a000f4d
1a000f04:	1a000f53 	.word	0x1a000f53
1a000f08:	1a000f69 	.word	0x1a000f69
1a000f0c:	1a000f83 	.word	0x1a000f83
1a000f10:	1a000ff7 	.word	0x1a000ff7
1a000f14:	1a000f8b 	.word	0x1a000f8b
1a000f18:	1a000f93 	.word	0x1a000f93
1a000f1c:	1a000f9b 	.word	0x1a000f9b
1a000f20:	1a000fa3 	.word	0x1a000fa3
1a000f24:	1a000ff7 	.word	0x1a000ff7
1a000f28:	1a000ff7 	.word	0x1a000ff7
1a000f2c:	1a000fab 	.word	0x1a000fab
1a000f30:	1a000fb9 	.word	0x1a000fb9
1a000f34:	1a000fc7 	.word	0x1a000fc7
1a000f38:	1a000fd5 	.word	0x1a000fd5
1a000f3c:	1a000fe3 	.word	0x1a000fe3
1a000f40:	1a000ff1 	.word	0x1a000ff1
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
1a000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a000f48:	60fb      	str	r3, [r7, #12]
       break;
1a000f4a:	e055      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000f4c:	4b2d      	ldr	r3, [pc, #180]	; (1a001004 <Chip_Clock_GetClockInputHz+0x124>)
1a000f4e:	60fb      	str	r3, [r7, #12]
       break;
1a000f50:	e052      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f52:	4b2d      	ldr	r3, [pc, #180]	; (1a001008 <Chip_Clock_GetClockInputHz+0x128>)
1a000f54:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f58:	f003 0307 	and.w	r3, r3, #7
1a000f5c:	2b04      	cmp	r3, #4
1a000f5e:	d002      	beq.n	1a000f66 <Chip_Clock_GetClockInputHz+0x86>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a000f60:	4b2a      	ldr	r3, [pc, #168]	; (1a00100c <Chip_Clock_GetClockInputHz+0x12c>)
1a000f62:	60fb      	str	r3, [r7, #12]
       }
       break;
1a000f64:	e048      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>
1a000f66:	e047      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f68:	4b27      	ldr	r3, [pc, #156]	; (1a001008 <Chip_Clock_GetClockInputHz+0x128>)
1a000f6a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f6e:	f003 0307 	and.w	r3, r3, #7
1a000f72:	2b04      	cmp	r3, #4
1a000f74:	d002      	beq.n	1a000f7c <Chip_Clock_GetClockInputHz+0x9c>
           rate = 25000000; /* MII uses 25 MHz */
1a000f76:	4b25      	ldr	r3, [pc, #148]	; (1a00100c <Chip_Clock_GetClockInputHz+0x12c>)
1a000f78:	60fb      	str	r3, [r7, #12]
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;
1a000f7a:	e03d      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           rate = 25000000; /* MII uses 25 MHz */
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
1a000f7c:	4b24      	ldr	r3, [pc, #144]	; (1a001010 <Chip_Clock_GetClockInputHz+0x130>)
1a000f7e:	60fb      	str	r3, [r7, #12]
       }
       break;
1a000f80:	e03a      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000f82:	4b24      	ldr	r3, [pc, #144]	; (1a001014 <Chip_Clock_GetClockInputHz+0x134>)
1a000f84:	681b      	ldr	r3, [r3, #0]
1a000f86:	60fb      	str	r3, [r7, #12]
       break;
1a000f88:	e036      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000f8a:	4b23      	ldr	r3, [pc, #140]	; (1a001018 <Chip_Clock_GetClockInputHz+0x138>)
1a000f8c:	681b      	ldr	r3, [r3, #0]
1a000f8e:	60fb      	str	r3, [r7, #12]
       break;
1a000f90:	e032      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000f92:	4b22      	ldr	r3, [pc, #136]	; (1a00101c <Chip_Clock_GetClockInputHz+0x13c>)
1a000f94:	681b      	ldr	r3, [r3, #0]
1a000f96:	60fb      	str	r3, [r7, #12]
       break;
1a000f98:	e02e      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000f9a:	4b20      	ldr	r3, [pc, #128]	; (1a00101c <Chip_Clock_GetClockInputHz+0x13c>)
1a000f9c:	685b      	ldr	r3, [r3, #4]
1a000f9e:	60fb      	str	r3, [r7, #12]
       break;
1a000fa0:	e02a      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000fa2:	f7ff ff01 	bl	1a000da8 <Chip_Clock_GetMainPLLHz>
1a000fa6:	60f8      	str	r0, [r7, #12]
       break;
1a000fa8:	e026      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000faa:	79fb      	ldrb	r3, [r7, #7]
1a000fac:	4618      	mov	r0, r3
1a000fae:	2100      	movs	r1, #0
1a000fb0:	f7ff fdf4 	bl	1a000b9c <Chip_Clock_GetDivRate>
1a000fb4:	60f8      	str	r0, [r7, #12]
       break;
1a000fb6:	e01f      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000fb8:	79fb      	ldrb	r3, [r7, #7]
1a000fba:	4618      	mov	r0, r3
1a000fbc:	2101      	movs	r1, #1
1a000fbe:	f7ff fded 	bl	1a000b9c <Chip_Clock_GetDivRate>
1a000fc2:	60f8      	str	r0, [r7, #12]
       break;
1a000fc4:	e018      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000fc6:	79fb      	ldrb	r3, [r7, #7]
1a000fc8:	4618      	mov	r0, r3
1a000fca:	2102      	movs	r1, #2
1a000fcc:	f7ff fde6 	bl	1a000b9c <Chip_Clock_GetDivRate>
1a000fd0:	60f8      	str	r0, [r7, #12]
       break;
1a000fd2:	e011      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000fd4:	79fb      	ldrb	r3, [r7, #7]
1a000fd6:	4618      	mov	r0, r3
1a000fd8:	2103      	movs	r1, #3
1a000fda:	f7ff fddf 	bl	1a000b9c <Chip_Clock_GetDivRate>
1a000fde:	60f8      	str	r0, [r7, #12]
       break;
1a000fe0:	e00a      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000fe2:	79fb      	ldrb	r3, [r7, #7]
1a000fe4:	4618      	mov	r0, r3
1a000fe6:	2104      	movs	r1, #4
1a000fe8:	f7ff fdd8 	bl	1a000b9c <Chip_Clock_GetDivRate>
1a000fec:	60f8      	str	r0, [r7, #12]
       break;
1a000fee:	e003      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   case CLKINPUT_PD:
       rate = 0;
1a000ff0:	2300      	movs	r3, #0
1a000ff2:	60fb      	str	r3, [r7, #12]
       break;
1a000ff4:	e000      	b.n	1a000ff8 <Chip_Clock_GetClockInputHz+0x118>

   default:
       break;
1a000ff6:	bf00      	nop
   }

   return rate;
1a000ff8:	68fb      	ldr	r3, [r7, #12]
}
1a000ffa:	4618      	mov	r0, r3
1a000ffc:	3710      	adds	r7, #16
1a000ffe:	46bd      	mov	sp, r7
1a001000:	bd80      	pop	{r7, pc}
1a001002:	bf00      	nop
1a001004:	00b71b00 	.word	0x00b71b00
1a001008:	40043000 	.word	0x40043000
1a00100c:	017d7840 	.word	0x017d7840
1a001010:	02faf080 	.word	0x02faf080
1a001014:	1a001e10 	.word	0x1a001e10
1a001018:	1a001e14 	.word	0x1a001e14
1a00101c:	10000000 	.word	0x10000000

1a001020 <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a001020:	b580      	push	{r7, lr}
1a001022:	b082      	sub	sp, #8
1a001024:	af00      	add	r7, sp, #0
1a001026:	4603      	mov	r3, r0
1a001028:	71fb      	strb	r3, [r7, #7]
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00102a:	79fb      	ldrb	r3, [r7, #7]
1a00102c:	4618      	mov	r0, r3
1a00102e:	f000 f857 	bl	1a0010e0 <Chip_Clock_GetBaseClock>
1a001032:	4603      	mov	r3, r0
1a001034:	4618      	mov	r0, r3
1a001036:	f7ff ff53 	bl	1a000ee0 <Chip_Clock_GetClockInputHz>
1a00103a:	4603      	mov	r3, r0
}
1a00103c:	4618      	mov	r0, r3
1a00103e:	3708      	adds	r7, #8
1a001040:	46bd      	mov	sp, r7
1a001042:	bd80      	pop	{r7, pc}

1a001044 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001044:	b490      	push	{r4, r7}
1a001046:	b084      	sub	sp, #16
1a001048:	af00      	add	r7, sp, #0
1a00104a:	4604      	mov	r4, r0
1a00104c:	4608      	mov	r0, r1
1a00104e:	4611      	mov	r1, r2
1a001050:	461a      	mov	r2, r3
1a001052:	4623      	mov	r3, r4
1a001054:	71fb      	strb	r3, [r7, #7]
1a001056:	4603      	mov	r3, r0
1a001058:	71bb      	strb	r3, [r7, #6]
1a00105a:	460b      	mov	r3, r1
1a00105c:	717b      	strb	r3, [r7, #5]
1a00105e:	4613      	mov	r3, r2
1a001060:	713b      	strb	r3, [r7, #4]
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001062:	4a1d      	ldr	r2, [pc, #116]	; (1a0010d8 <Chip_Clock_SetBaseClock+0x94>)
1a001064:	79fb      	ldrb	r3, [r7, #7]
1a001066:	3316      	adds	r3, #22
1a001068:	009b      	lsls	r3, r3, #2
1a00106a:	4413      	add	r3, r2
1a00106c:	685b      	ldr	r3, [r3, #4]
1a00106e:	60fb      	str	r3, [r7, #12]

   if (BaseClock < CLK_BASE_NONE) {
1a001070:	79fb      	ldrb	r3, [r7, #7]
1a001072:	2b1b      	cmp	r3, #27
1a001074:	d822      	bhi.n	1a0010bc <Chip_Clock_SetBaseClock+0x78>
       if (Input != CLKINPUT_PD) {
1a001076:	79bb      	ldrb	r3, [r7, #6]
1a001078:	2b11      	cmp	r3, #17
1a00107a:	d028      	beq.n	1a0010ce <Chip_Clock_SetBaseClock+0x8a>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00107c:	68fa      	ldr	r2, [r7, #12]
1a00107e:	4b17      	ldr	r3, [pc, #92]	; (1a0010dc <Chip_Clock_SetBaseClock+0x98>)
1a001080:	4013      	ands	r3, r2
1a001082:	60fb      	str	r3, [r7, #12]

           if (autoblocken) {
1a001084:	797b      	ldrb	r3, [r7, #5]
1a001086:	2b00      	cmp	r3, #0
1a001088:	d003      	beq.n	1a001092 <Chip_Clock_SetBaseClock+0x4e>
               reg |= (1 << 11);
1a00108a:	68fb      	ldr	r3, [r7, #12]
1a00108c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001090:	60fb      	str	r3, [r7, #12]
           }
           if (powerdn) {
1a001092:	793b      	ldrb	r3, [r7, #4]
1a001094:	2b00      	cmp	r3, #0
1a001096:	d003      	beq.n	1a0010a0 <Chip_Clock_SetBaseClock+0x5c>
               reg |= (1 << 0);
1a001098:	68fb      	ldr	r3, [r7, #12]
1a00109a:	f043 0301 	orr.w	r3, r3, #1
1a00109e:	60fb      	str	r3, [r7, #12]
           }

           /* Set clock source */
           reg |= (Input << 24);
1a0010a0:	79bb      	ldrb	r3, [r7, #6]
1a0010a2:	061b      	lsls	r3, r3, #24
1a0010a4:	461a      	mov	r2, r3
1a0010a6:	68fb      	ldr	r3, [r7, #12]
1a0010a8:	4313      	orrs	r3, r2
1a0010aa:	60fb      	str	r3, [r7, #12]

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0010ac:	4a0a      	ldr	r2, [pc, #40]	; (1a0010d8 <Chip_Clock_SetBaseClock+0x94>)
1a0010ae:	79fb      	ldrb	r3, [r7, #7]
1a0010b0:	3316      	adds	r3, #22
1a0010b2:	009b      	lsls	r3, r3, #2
1a0010b4:	4413      	add	r3, r2
1a0010b6:	68fa      	ldr	r2, [r7, #12]
1a0010b8:	605a      	str	r2, [r3, #4]
1a0010ba:	e008      	b.n	1a0010ce <Chip_Clock_SetBaseClock+0x8a>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a0010bc:	4906      	ldr	r1, [pc, #24]	; (1a0010d8 <Chip_Clock_SetBaseClock+0x94>)
1a0010be:	79fb      	ldrb	r3, [r7, #7]
1a0010c0:	68fa      	ldr	r2, [r7, #12]
1a0010c2:	f042 0201 	orr.w	r2, r2, #1
1a0010c6:	3316      	adds	r3, #22
1a0010c8:	009b      	lsls	r3, r3, #2
1a0010ca:	440b      	add	r3, r1
1a0010cc:	605a      	str	r2, [r3, #4]
   }
}
1a0010ce:	3710      	adds	r7, #16
1a0010d0:	46bd      	mov	sp, r7
1a0010d2:	bc90      	pop	{r4, r7}
1a0010d4:	4770      	bx	lr
1a0010d6:	bf00      	nop
1a0010d8:	40050000 	.word	0x40050000
1a0010dc:	e0fff7fe 	.word	0xe0fff7fe

1a0010e0 <Chip_Clock_GetBaseClock>:
   return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a0010e0:	b480      	push	{r7}
1a0010e2:	b085      	sub	sp, #20
1a0010e4:	af00      	add	r7, sp, #0
1a0010e6:	4603      	mov	r3, r0
1a0010e8:	71fb      	strb	r3, [r7, #7]
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a0010ea:	79fb      	ldrb	r3, [r7, #7]
1a0010ec:	2b1b      	cmp	r3, #27
1a0010ee:	d901      	bls.n	1a0010f4 <Chip_Clock_GetBaseClock+0x14>
       return CLKINPUT_PD;
1a0010f0:	2311      	movs	r3, #17
1a0010f2:	e013      	b.n	1a00111c <Chip_Clock_GetBaseClock+0x3c>
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a0010f4:	4a0c      	ldr	r2, [pc, #48]	; (1a001128 <Chip_Clock_GetBaseClock+0x48>)
1a0010f6:	79fb      	ldrb	r3, [r7, #7]
1a0010f8:	3316      	adds	r3, #22
1a0010fa:	009b      	lsls	r3, r3, #2
1a0010fc:	4413      	add	r3, r2
1a0010fe:	685b      	ldr	r3, [r3, #4]
1a001100:	60fb      	str	r3, [r7, #12]

   /* base clock is powered down? */
   if (reg & 1) {
1a001102:	68fb      	ldr	r3, [r7, #12]
1a001104:	f003 0301 	and.w	r3, r3, #1
1a001108:	2b00      	cmp	r3, #0
1a00110a:	d001      	beq.n	1a001110 <Chip_Clock_GetBaseClock+0x30>
       return CLKINPUT_PD;
1a00110c:	2311      	movs	r3, #17
1a00110e:	e005      	b.n	1a00111c <Chip_Clock_GetBaseClock+0x3c>
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001110:	68fb      	ldr	r3, [r7, #12]
1a001112:	0e1b      	lsrs	r3, r3, #24
1a001114:	b2db      	uxtb	r3, r3
1a001116:	f003 031f 	and.w	r3, r3, #31
1a00111a:	b2db      	uxtb	r3, r3
}
1a00111c:	4618      	mov	r0, r3
1a00111e:	3714      	adds	r7, #20
1a001120:	46bd      	mov	sp, r7
1a001122:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001126:	4770      	bx	lr
1a001128:	40050000 	.word	0x40050000

1a00112c <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a00112c:	b480      	push	{r7}
1a00112e:	b085      	sub	sp, #20
1a001130:	af00      	add	r7, sp, #0
1a001132:	603b      	str	r3, [r7, #0]
1a001134:	4603      	mov	r3, r0
1a001136:	80fb      	strh	r3, [r7, #6]
1a001138:	460b      	mov	r3, r1
1a00113a:	717b      	strb	r3, [r7, #5]
1a00113c:	4613      	mov	r3, r2
1a00113e:	713b      	strb	r3, [r7, #4]
   uint32_t reg = 1;
1a001140:	2301      	movs	r3, #1
1a001142:	60fb      	str	r3, [r7, #12]

   if (autoen) {
1a001144:	797b      	ldrb	r3, [r7, #5]
1a001146:	2b00      	cmp	r3, #0
1a001148:	d003      	beq.n	1a001152 <Chip_Clock_EnableOpts+0x26>
       reg |= (1 << 1);
1a00114a:	68fb      	ldr	r3, [r7, #12]
1a00114c:	f043 0302 	orr.w	r3, r3, #2
1a001150:	60fb      	str	r3, [r7, #12]
   }
   if (wakeupen) {
1a001152:	793b      	ldrb	r3, [r7, #4]
1a001154:	2b00      	cmp	r3, #0
1a001156:	d003      	beq.n	1a001160 <Chip_Clock_EnableOpts+0x34>
       reg |= (1 << 2);
1a001158:	68fb      	ldr	r3, [r7, #12]
1a00115a:	f043 0304 	orr.w	r3, r3, #4
1a00115e:	60fb      	str	r3, [r7, #12]
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a001160:	683b      	ldr	r3, [r7, #0]
1a001162:	2b02      	cmp	r3, #2
1a001164:	d103      	bne.n	1a00116e <Chip_Clock_EnableOpts+0x42>
       reg |= (1 << 5);
1a001166:	68fb      	ldr	r3, [r7, #12]
1a001168:	f043 0320 	orr.w	r3, r3, #32
1a00116c:	60fb      	str	r3, [r7, #12]
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a00116e:	88fb      	ldrh	r3, [r7, #6]
1a001170:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a001174:	d308      	bcc.n	1a001188 <Chip_Clock_EnableOpts+0x5c>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001176:	490a      	ldr	r1, [pc, #40]	; (1a0011a0 <Chip_Clock_EnableOpts+0x74>)
1a001178:	88fb      	ldrh	r3, [r7, #6]
1a00117a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a00117e:	3320      	adds	r3, #32
1a001180:	68fa      	ldr	r2, [r7, #12]
1a001182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
1a001186:	e005      	b.n	1a001194 <Chip_Clock_EnableOpts+0x68>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001188:	4906      	ldr	r1, [pc, #24]	; (1a0011a4 <Chip_Clock_EnableOpts+0x78>)
1a00118a:	88fb      	ldrh	r3, [r7, #6]
1a00118c:	3320      	adds	r3, #32
1a00118e:	68fa      	ldr	r2, [r7, #12]
1a001190:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
   }
}
1a001194:	3714      	adds	r7, #20
1a001196:	46bd      	mov	sp, r7
1a001198:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00119c:	4770      	bx	lr
1a00119e:	bf00      	nop
1a0011a0:	40052000 	.word	0x40052000
1a0011a4:	40051000 	.word	0x40051000

1a0011a8 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0011a8:	b580      	push	{r7, lr}
1a0011aa:	b086      	sub	sp, #24
1a0011ac:	af00      	add	r7, sp, #0
1a0011ae:	4603      	mov	r3, r0
1a0011b0:	80fb      	strh	r3, [r7, #6]
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a0011b2:	88fb      	ldrh	r3, [r7, #6]
1a0011b4:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0011b8:	d308      	bcc.n	1a0011cc <Chip_Clock_GetRate+0x24>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0011ba:	4a1b      	ldr	r2, [pc, #108]	; (1a001228 <Chip_Clock_GetRate+0x80>)
1a0011bc:	88fb      	ldrh	r3, [r7, #6]
1a0011be:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0011c2:	3320      	adds	r3, #32
1a0011c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a0011c8:	617b      	str	r3, [r7, #20]
1a0011ca:	e005      	b.n	1a0011d8 <Chip_Clock_GetRate+0x30>
   }
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0011cc:	4a17      	ldr	r2, [pc, #92]	; (1a00122c <Chip_Clock_GetRate+0x84>)
1a0011ce:	88fb      	ldrh	r3, [r7, #6]
1a0011d0:	3320      	adds	r3, #32
1a0011d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a0011d6:	617b      	str	r3, [r7, #20]
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a0011d8:	697b      	ldr	r3, [r7, #20]
1a0011da:	f003 0301 	and.w	r3, r3, #1
1a0011de:	2b00      	cmp	r3, #0
1a0011e0:	d01b      	beq.n	1a00121a <Chip_Clock_GetRate+0x72>
       /* Get base clock for this peripheral clock */
       baseclk = Chip_Clock_FindBaseClock(clk);
1a0011e2:	88fb      	ldrh	r3, [r7, #6]
1a0011e4:	4618      	mov	r0, r3
1a0011e6:	f7ff fcf9 	bl	1a000bdc <Chip_Clock_FindBaseClock>
1a0011ea:	4603      	mov	r3, r0
1a0011ec:	72fb      	strb	r3, [r7, #11]

       /* Get base clock rate */
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0011ee:	7afb      	ldrb	r3, [r7, #11]
1a0011f0:	4618      	mov	r0, r3
1a0011f2:	f7ff ff15 	bl	1a001020 <Chip_Clock_GetBaseClocktHz>
1a0011f6:	60f8      	str	r0, [r7, #12]

       /* Get divider for this clock */
       if (((reg >> 5) & 0x7) == 0) {
1a0011f8:	697b      	ldr	r3, [r7, #20]
1a0011fa:	095b      	lsrs	r3, r3, #5
1a0011fc:	f003 0307 	and.w	r3, r3, #7
1a001200:	2b00      	cmp	r3, #0
1a001202:	d102      	bne.n	1a00120a <Chip_Clock_GetRate+0x62>
           div = 1;
1a001204:	2301      	movs	r3, #1
1a001206:	613b      	str	r3, [r7, #16]
1a001208:	e001      	b.n	1a00120e <Chip_Clock_GetRate+0x66>
       }
       else {
           div = 2;/* No other dividers supported */
1a00120a:	2302      	movs	r3, #2
1a00120c:	613b      	str	r3, [r7, #16]

       }
       rate = rate / div;
1a00120e:	68fa      	ldr	r2, [r7, #12]
1a001210:	693b      	ldr	r3, [r7, #16]
1a001212:	fbb2 f3f3 	udiv	r3, r2, r3
1a001216:	60fb      	str	r3, [r7, #12]
1a001218:	e001      	b.n	1a00121e <Chip_Clock_GetRate+0x76>
   }
   else {
       rate = 0;
1a00121a:	2300      	movs	r3, #0
1a00121c:	60fb      	str	r3, [r7, #12]
   }

   return rate;
1a00121e:	68fb      	ldr	r3, [r7, #12]
}
1a001220:	4618      	mov	r0, r3
1a001222:	3718      	adds	r7, #24
1a001224:	46bd      	mov	sp, r7
1a001226:	bd80      	pop	{r7, pc}
1a001228:	40052000 	.word	0x40052000
1a00122c:	40051000 	.word	0x40051000

1a001230 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001230:	b480      	push	{r7}
1a001232:	b089      	sub	sp, #36	; 0x24
1a001234:	af00      	add	r7, sp, #0
   //                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
   //                ORR R1, R1, #(0xF << 20)
   //                ; Write back the modified value to the CPACR
   //                STR R1, [R0]

   volatile uint32_t *regCpacr = (uint32_t *) LPC_CPACR;
1a001236:	4b16      	ldr	r3, [pc, #88]	; (1a001290 <fpuInit+0x60>)
1a001238:	61fb      	str	r3, [r7, #28]
   volatile uint32_t *regMvfr0 = (uint32_t *) SCB_MVFR0;
1a00123a:	4b16      	ldr	r3, [pc, #88]	; (1a001294 <fpuInit+0x64>)
1a00123c:	61bb      	str	r3, [r7, #24]
   volatile uint32_t *regMvfr1 = (uint32_t *) SCB_MVFR1;
1a00123e:	4b16      	ldr	r3, [pc, #88]	; (1a001298 <fpuInit+0x68>)
1a001240:	617b      	str	r3, [r7, #20]
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;
1a001242:	2300      	movs	r3, #0
1a001244:	74fb      	strb	r3, [r7, #19]

   Mvfr0 = *regMvfr0;
1a001246:	69bb      	ldr	r3, [r7, #24]
1a001248:	681b      	ldr	r3, [r3, #0]
1a00124a:	60bb      	str	r3, [r7, #8]
   Mvfr1 = *regMvfr1;
1a00124c:	697b      	ldr	r3, [r7, #20]
1a00124e:	681b      	ldr	r3, [r3, #0]
1a001250:	607b      	str	r3, [r7, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001252:	68bb      	ldr	r3, [r7, #8]
1a001254:	4a11      	ldr	r2, [pc, #68]	; (1a00129c <fpuInit+0x6c>)
1a001256:	4293      	cmp	r3, r2
1a001258:	d105      	bne.n	1a001266 <fpuInit+0x36>
1a00125a:	687b      	ldr	r3, [r7, #4]
1a00125c:	4a10      	ldr	r2, [pc, #64]	; (1a0012a0 <fpuInit+0x70>)
1a00125e:	4293      	cmp	r3, r2
1a001260:	d101      	bne.n	1a001266 <fpuInit+0x36>
1a001262:	2301      	movs	r3, #1
1a001264:	e000      	b.n	1a001268 <fpuInit+0x38>
1a001266:	2300      	movs	r3, #0
1a001268:	74fb      	strb	r3, [r7, #19]

   if (vfpPresent) {
1a00126a:	7cfb      	ldrb	r3, [r7, #19]
1a00126c:	2b00      	cmp	r3, #0
1a00126e:	d009      	beq.n	1a001284 <fpuInit+0x54>
       Cpacr = *regCpacr;
1a001270:	69fb      	ldr	r3, [r7, #28]
1a001272:	681b      	ldr	r3, [r3, #0]
1a001274:	60fb      	str	r3, [r7, #12]
       Cpacr |= (0xF << 20);
1a001276:	68fb      	ldr	r3, [r7, #12]
1a001278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00127c:	60fb      	str	r3, [r7, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a00127e:	68fa      	ldr	r2, [r7, #12]
1a001280:	69fb      	ldr	r3, [r7, #28]
1a001282:	601a      	str	r2, [r3, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a001284:	3724      	adds	r7, #36	; 0x24
1a001286:	46bd      	mov	sp, r7
1a001288:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00128c:	4770      	bx	lr
1a00128e:	bf00      	nop
1a001290:	e000ed88 	.word	0xe000ed88
1a001294:	e000ef40 	.word	0xe000ef40
1a001298:	e000ef44 	.word	0xe000ef44
1a00129c:	10110021 	.word	0x10110021
1a0012a0:	11000011 	.word	0x11000011

1a0012a4 <ResetISR>:
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0012a4:	b580      	push	{r7, lr}
1a0012a6:	b088      	sub	sp, #32
1a0012a8:	af00      	add	r7, sp, #0
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0012aa:	b672      	cpsid	i
    // equivalent to CMSIS '__disable_irq()' function

    unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
1a0012ac:	4b27      	ldr	r3, [pc, #156]	; (1a00134c <ResetISR+0xa8>)
1a0012ae:	617b      	str	r3, [r7, #20]
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0012b0:	697b      	ldr	r3, [r7, #20]
1a0012b2:	4a27      	ldr	r2, [pc, #156]	; (1a001350 <ResetISR+0xac>)
1a0012b4:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0012b6:	697b      	ldr	r3, [r7, #20]
1a0012b8:	3304      	adds	r3, #4
1a0012ba:	4a26      	ldr	r2, [pc, #152]	; (1a001354 <ResetISR+0xb0>)
1a0012bc:	601a      	str	r2, [r3, #0]
    // I2C1_RST|I2C0_RST|UART3_RST|UART1_RST|UART1_RST|UART0_RST|
    // DAC_RST|ADC1_RST|ADC0_RST|QEI_RST|MOTOCONPWM_RST|SCT_RST|
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
1a0012be:	4b26      	ldr	r3, [pc, #152]	; (1a001358 <ResetISR+0xb4>)
1a0012c0:	613b      	str	r3, [r7, #16]
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012c2:	2300      	movs	r3, #0
1a0012c4:	61fb      	str	r3, [r7, #28]
1a0012c6:	e009      	b.n	1a0012dc <ResetISR+0x38>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0012c8:	69fb      	ldr	r3, [r7, #28]
1a0012ca:	009b      	lsls	r3, r3, #2
1a0012cc:	693a      	ldr	r2, [r7, #16]
1a0012ce:	4413      	add	r3, r2
1a0012d0:	f04f 32ff 	mov.w	r2, #4294967295
1a0012d4:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012d6:	69fb      	ldr	r3, [r7, #28]
1a0012d8:	3301      	adds	r3, #1
1a0012da:	61fb      	str	r3, [r7, #28]
1a0012dc:	69fb      	ldr	r3, [r7, #28]
1a0012de:	2b07      	cmp	r3, #7
1a0012e0:	d9f2      	bls.n	1a0012c8 <ResetISR+0x24>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0012e2:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0012e4:	f000 f9e2 	bl	1a0016ac <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0012e8:	4b1c      	ldr	r3, [pc, #112]	; (1a00135c <ResetISR+0xb8>)
1a0012ea:	61bb      	str	r3, [r7, #24]

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0012ec:	e013      	b.n	1a001316 <ResetISR+0x72>
        LoadAddr = *SectionTableAddr++;
1a0012ee:	69bb      	ldr	r3, [r7, #24]
1a0012f0:	1d1a      	adds	r2, r3, #4
1a0012f2:	61ba      	str	r2, [r7, #24]
1a0012f4:	681b      	ldr	r3, [r3, #0]
1a0012f6:	60fb      	str	r3, [r7, #12]
        ExeAddr = *SectionTableAddr++;
1a0012f8:	69bb      	ldr	r3, [r7, #24]
1a0012fa:	1d1a      	adds	r2, r3, #4
1a0012fc:	61ba      	str	r2, [r7, #24]
1a0012fe:	681b      	ldr	r3, [r3, #0]
1a001300:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a001302:	69bb      	ldr	r3, [r7, #24]
1a001304:	1d1a      	adds	r2, r3, #4
1a001306:	61ba      	str	r2, [r7, #24]
1a001308:	681b      	ldr	r3, [r3, #0]
1a00130a:	607b      	str	r3, [r7, #4]
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00130c:	68f8      	ldr	r0, [r7, #12]
1a00130e:	68b9      	ldr	r1, [r7, #8]
1a001310:	687a      	ldr	r2, [r7, #4]
1a001312:	f7fe ff31 	bl	1a000178 <data_init>

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001316:	69bb      	ldr	r3, [r7, #24]
1a001318:	4a11      	ldr	r2, [pc, #68]	; (1a001360 <ResetISR+0xbc>)
1a00131a:	4293      	cmp	r3, r2
1a00131c:	d3e7      	bcc.n	1a0012ee <ResetISR+0x4a>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a00131e:	e00d      	b.n	1a00133c <ResetISR+0x98>
        ExeAddr = *SectionTableAddr++;
1a001320:	69bb      	ldr	r3, [r7, #24]
1a001322:	1d1a      	adds	r2, r3, #4
1a001324:	61ba      	str	r2, [r7, #24]
1a001326:	681b      	ldr	r3, [r3, #0]
1a001328:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a00132a:	69bb      	ldr	r3, [r7, #24]
1a00132c:	1d1a      	adds	r2, r3, #4
1a00132e:	61ba      	str	r2, [r7, #24]
1a001330:	681b      	ldr	r3, [r3, #0]
1a001332:	607b      	str	r3, [r7, #4]
        bss_init(ExeAddr, SectionLen);
1a001334:	68b8      	ldr	r0, [r7, #8]
1a001336:	6879      	ldr	r1, [r7, #4]
1a001338:	f7fe ff40 	bl	1a0001bc <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a00133c:	69bb      	ldr	r3, [r7, #24]
1a00133e:	4a09      	ldr	r2, [pc, #36]	; (1a001364 <ResetISR+0xc0>)
1a001340:	4293      	cmp	r3, r2
1a001342:	d3ed      	bcc.n	1a001320 <ResetISR+0x7c>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a001344:	f7ff f80c 	bl	1a000360 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a001348:	e7fe      	b.n	1a001348 <ResetISR+0xa4>
1a00134a:	bf00      	nop
1a00134c:	40053100 	.word	0x40053100
1a001350:	10df1000 	.word	0x10df1000
1a001354:	01dff7ff 	.word	0x01dff7ff
1a001358:	e000e280 	.word	0xe000e280
1a00135c:	1a000114 	.word	0x1a000114
1a001360:	1a000150 	.word	0x1a000150
1a001364:	1a000178 	.word	0x1a000178

1a001368 <Chip_SCU_PinMuxSet>:
 * @return Nothing
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a001368:	b480      	push	{r7}
1a00136a:	b083      	sub	sp, #12
1a00136c:	af00      	add	r7, sp, #0
1a00136e:	4603      	mov	r3, r0
1a001370:	71fb      	strb	r3, [r7, #7]
1a001372:	460b      	mov	r3, r1
1a001374:	71bb      	strb	r3, [r7, #6]
1a001376:	4613      	mov	r3, r2
1a001378:	80bb      	strh	r3, [r7, #4]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00137a:	4806      	ldr	r0, [pc, #24]	; (1a001394 <Chip_SCU_PinMuxSet+0x2c>)
1a00137c:	79f9      	ldrb	r1, [r7, #7]
1a00137e:	79bb      	ldrb	r3, [r7, #6]
1a001380:	88ba      	ldrh	r2, [r7, #4]
1a001382:	0149      	lsls	r1, r1, #5
1a001384:	440b      	add	r3, r1
1a001386:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a00138a:	370c      	adds	r7, #12
1a00138c:	46bd      	mov	sp, r7
1a00138e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001392:	4770      	bx	lr
1a001394:	40086000 	.word	0x40086000

1a001398 <Chip_SCU_SetPinMuxing>:
 * @param  pinArray    : Pointer to array of pin mux selections
 * @param  arrayLength : Number of entries in pinArray
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
1a001398:	b580      	push	{r7, lr}
1a00139a:	b084      	sub	sp, #16
1a00139c:	af00      	add	r7, sp, #0
1a00139e:	6078      	str	r0, [r7, #4]
1a0013a0:	6039      	str	r1, [r7, #0]
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0013a2:	2300      	movs	r3, #0
1a0013a4:	60fb      	str	r3, [r7, #12]
1a0013a6:	e014      	b.n	1a0013d2 <Chip_SCU_SetPinMuxing+0x3a>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0013a8:	68fb      	ldr	r3, [r7, #12]
1a0013aa:	009b      	lsls	r3, r3, #2
1a0013ac:	687a      	ldr	r2, [r7, #4]
1a0013ae:	4413      	add	r3, r2
1a0013b0:	7818      	ldrb	r0, [r3, #0]
1a0013b2:	68fb      	ldr	r3, [r7, #12]
1a0013b4:	009b      	lsls	r3, r3, #2
1a0013b6:	687a      	ldr	r2, [r7, #4]
1a0013b8:	4413      	add	r3, r2
1a0013ba:	7859      	ldrb	r1, [r3, #1]
1a0013bc:	68fb      	ldr	r3, [r7, #12]
1a0013be:	009b      	lsls	r3, r3, #2
1a0013c0:	687a      	ldr	r2, [r7, #4]
1a0013c2:	4413      	add	r3, r2
1a0013c4:	885b      	ldrh	r3, [r3, #2]
1a0013c6:	461a      	mov	r2, r3
1a0013c8:	f7ff ffce 	bl	1a001368 <Chip_SCU_PinMuxSet>
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0013cc:	68fb      	ldr	r3, [r7, #12]
1a0013ce:	3301      	adds	r3, #1
1a0013d0:	60fb      	str	r3, [r7, #12]
1a0013d2:	68fa      	ldr	r2, [r7, #12]
1a0013d4:	683b      	ldr	r3, [r7, #0]
1a0013d6:	429a      	cmp	r2, r3
1a0013d8:	d3e6      	bcc.n	1a0013a8 <Chip_SCU_SetPinMuxing+0x10>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
   }
}
1a0013da:	3710      	adds	r7, #16
1a0013dc:	46bd      	mov	sp, r7
1a0013de:	bd80      	pop	{r7, pc}

1a0013e0 <Chip_CREG_SetFlashAcceleration>:
 * This function should be called with the higher frequency before the clock frequency is
 * increased and it should be called with the new lower value after the clock frequency is
 * decreased.
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
1a0013e0:	b480      	push	{r7}
1a0013e2:	b085      	sub	sp, #20
1a0013e4:	af00      	add	r7, sp, #0
1a0013e6:	6078      	str	r0, [r7, #4]
   uint32_t FAValue = Hz / 21510000;
1a0013e8:	687b      	ldr	r3, [r7, #4]
1a0013ea:	4a10      	ldr	r2, [pc, #64]	; (1a00142c <Chip_CREG_SetFlashAcceleration+0x4c>)
1a0013ec:	fba2 2303 	umull	r2, r3, r2, r3
1a0013f0:	0ddb      	lsrs	r3, r3, #23
1a0013f2:	60fb      	str	r3, [r7, #12]

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0013f4:	490e      	ldr	r1, [pc, #56]	; (1a001430 <Chip_CREG_SetFlashAcceleration+0x50>)
1a0013f6:	4b0e      	ldr	r3, [pc, #56]	; (1a001430 <Chip_CREG_SetFlashAcceleration+0x50>)
1a0013f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0013fc:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a001400:	68fb      	ldr	r3, [r7, #12]
1a001402:	031b      	lsls	r3, r3, #12
1a001404:	4313      	orrs	r3, r2
1a001406:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00140a:	4909      	ldr	r1, [pc, #36]	; (1a001430 <Chip_CREG_SetFlashAcceleration+0x50>)
1a00140c:	4b08      	ldr	r3, [pc, #32]	; (1a001430 <Chip_CREG_SetFlashAcceleration+0x50>)
1a00140e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a001412:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a001416:	68fb      	ldr	r3, [r7, #12]
1a001418:	031b      	lsls	r3, r3, #12
1a00141a:	4313      	orrs	r3, r2
1a00141c:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
}
1a001420:	3714      	adds	r7, #20
1a001422:	46bd      	mov	sp, r7
1a001424:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001428:	4770      	bx	lr
1a00142a:	bf00      	nop
1a00142c:	63d6267d 	.word	0x63d6267d
1a001430:	40043000 	.word	0x40043000

1a001434 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a001434:	b580      	push	{r7, lr}
1a001436:	af00      	add	r7, sp, #0
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a001438:	4802      	ldr	r0, [pc, #8]	; (1a001444 <Board_SetupMuxing+0x10>)
1a00143a:	2118      	movs	r1, #24
1a00143c:	f7ff ffac 	bl	1a001398 <Chip_SCU_SetPinMuxing>
}
1a001440:	bd80      	pop	{r7, pc}
1a001442:	bf00      	nop
1a001444:	1a001db0 	.word	0x1a001db0

1a001448 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001448:	b590      	push	{r4, r7, lr}
1a00144a:	b083      	sub	sp, #12
1a00144c:	af00      	add	r7, sp, #0
   int i;

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
1a00144e:	481b      	ldr	r0, [pc, #108]	; (1a0014bc <Board_SetupClocking+0x74>)
1a001450:	f7ff ffc6 	bl	1a0013e0 <Chip_CREG_SetFlashAcceleration>

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001454:	2006      	movs	r0, #6
1a001456:	4919      	ldr	r1, [pc, #100]	; (1a0014bc <Board_SetupClocking+0x74>)
1a001458:	2201      	movs	r2, #1
1a00145a:	f7ff f97f 	bl	1a00075c <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00145e:	2300      	movs	r3, #0
1a001460:	607b      	str	r3, [r7, #4]
1a001462:	e018      	b.n	1a001496 <Board_SetupClocking+0x4e>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001464:	4a16      	ldr	r2, [pc, #88]	; (1a0014c0 <Board_SetupClocking+0x78>)
1a001466:	687b      	ldr	r3, [r7, #4]
1a001468:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a00146c:	4a14      	ldr	r2, [pc, #80]	; (1a0014c0 <Board_SetupClocking+0x78>)
1a00146e:	687b      	ldr	r3, [r7, #4]
1a001470:	009b      	lsls	r3, r3, #2
1a001472:	4413      	add	r3, r2
1a001474:	7859      	ldrb	r1, [r3, #1]
1a001476:	4a12      	ldr	r2, [pc, #72]	; (1a0014c0 <Board_SetupClocking+0x78>)
1a001478:	687b      	ldr	r3, [r7, #4]
1a00147a:	009b      	lsls	r3, r3, #2
1a00147c:	4413      	add	r3, r2
1a00147e:	789c      	ldrb	r4, [r3, #2]
1a001480:	4a0f      	ldr	r2, [pc, #60]	; (1a0014c0 <Board_SetupClocking+0x78>)
1a001482:	687b      	ldr	r3, [r7, #4]
1a001484:	009b      	lsls	r3, r3, #2
1a001486:	4413      	add	r3, r2
1a001488:	78db      	ldrb	r3, [r3, #3]
1a00148a:	4622      	mov	r2, r4
1a00148c:	f7ff fdda 	bl	1a001044 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001490:	687b      	ldr	r3, [r7, #4]
1a001492:	3301      	adds	r3, #1
1a001494:	607b      	str	r3, [r7, #4]
1a001496:	687b      	ldr	r3, [r7, #4]
1a001498:	2b02      	cmp	r3, #2
1a00149a:	d9e3      	bls.n	1a001464 <Board_SetupClocking+0x1c>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00149c:	4a09      	ldr	r2, [pc, #36]	; (1a0014c4 <Board_SetupClocking+0x7c>)
1a00149e:	4b09      	ldr	r3, [pc, #36]	; (1a0014c4 <Board_SetupClocking+0x7c>)
1a0014a0:	685b      	ldr	r3, [r3, #4]
1a0014a2:	f023 030c 	bic.w	r3, r3, #12
1a0014a6:	6053      	str	r3, [r2, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0014a8:	4a06      	ldr	r2, [pc, #24]	; (1a0014c4 <Board_SetupClocking+0x7c>)
1a0014aa:	4b06      	ldr	r3, [pc, #24]	; (1a0014c4 <Board_SetupClocking+0x7c>)
1a0014ac:	685b      	ldr	r3, [r3, #4]
1a0014ae:	f043 0303 	orr.w	r3, r3, #3
1a0014b2:	6053      	str	r3, [r2, #4]
}
1a0014b4:	370c      	adds	r7, #12
1a0014b6:	46bd      	mov	sp, r7
1a0014b8:	bd90      	pop	{r4, r7, pc}
1a0014ba:	bf00      	nop
1a0014bc:	0c28cb00 	.word	0x0c28cb00
1a0014c0:	1a001da4 	.word	0x1a001da4
1a0014c4:	40043000 	.word	0x40043000

1a0014c8 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0014c8:	b580      	push	{r7, lr}
1a0014ca:	af00      	add	r7, sp, #0
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0014cc:	f7ff ffb2 	bl	1a001434 <Board_SetupMuxing>
   Board_SetupClocking();
1a0014d0:	f7ff ffba 	bl	1a001448 <Board_SetupClocking>
}
1a0014d4:	bd80      	pop	{r7, pc}
1a0014d6:	bf00      	nop

1a0014d8 <Chip_SCU_PinMuxSet>:
 * @return Nothing
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
1a0014d8:	b480      	push	{r7}
1a0014da:	b083      	sub	sp, #12
1a0014dc:	af00      	add	r7, sp, #0
1a0014de:	4603      	mov	r3, r0
1a0014e0:	71fb      	strb	r3, [r7, #7]
1a0014e2:	460b      	mov	r3, r1
1a0014e4:	71bb      	strb	r3, [r7, #6]
1a0014e6:	4613      	mov	r3, r2
1a0014e8:	80bb      	strh	r3, [r7, #4]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0014ea:	4806      	ldr	r0, [pc, #24]	; (1a001504 <Chip_SCU_PinMuxSet+0x2c>)
1a0014ec:	79f9      	ldrb	r1, [r7, #7]
1a0014ee:	79bb      	ldrb	r3, [r7, #6]
1a0014f0:	88ba      	ldrh	r2, [r7, #4]
1a0014f2:	0149      	lsls	r1, r1, #5
1a0014f4:	440b      	add	r3, r1
1a0014f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a0014fa:	370c      	adds	r7, #12
1a0014fc:	46bd      	mov	sp, r7
1a0014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001502:	4770      	bx	lr
1a001504:	40086000 	.word	0x40086000

1a001508 <Chip_ENET_RMIIEnable>:
 * @note   This function must be called to enable the internal
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
1a001508:	b480      	push	{r7}
1a00150a:	b083      	sub	sp, #12
1a00150c:	af00      	add	r7, sp, #0
1a00150e:	6078      	str	r0, [r7, #4]
   LPC_CREG->CREG6 |= 0x4;
1a001510:	4a06      	ldr	r2, [pc, #24]	; (1a00152c <Chip_ENET_RMIIEnable+0x24>)
1a001512:	4b06      	ldr	r3, [pc, #24]	; (1a00152c <Chip_ENET_RMIIEnable+0x24>)
1a001514:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001518:	f043 0304 	orr.w	r3, r3, #4
1a00151c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
}
1a001520:	370c      	adds	r7, #12
1a001522:	46bd      	mov	sp, r7
1a001524:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001528:	4770      	bx	lr
1a00152a:	bf00      	nop
1a00152c:	40043000 	.word	0x40043000

1a001530 <Chip_GPIO_SetPinState>:
 * @param  setting : true for high, false for low
 * @return Nothing
 * @note   This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
1a001530:	b480      	push	{r7}
1a001532:	b083      	sub	sp, #12
1a001534:	af00      	add	r7, sp, #0
1a001536:	6078      	str	r0, [r7, #4]
1a001538:	4608      	mov	r0, r1
1a00153a:	4611      	mov	r1, r2
1a00153c:	461a      	mov	r2, r3
1a00153e:	4603      	mov	r3, r0
1a001540:	70fb      	strb	r3, [r7, #3]
1a001542:	460b      	mov	r3, r1
1a001544:	70bb      	strb	r3, [r7, #2]
1a001546:	4613      	mov	r3, r2
1a001548:	707b      	strb	r3, [r7, #1]
   pGPIO->B[port][pin] = setting;
1a00154a:	78f9      	ldrb	r1, [r7, #3]
1a00154c:	78bb      	ldrb	r3, [r7, #2]
1a00154e:	7878      	ldrb	r0, [r7, #1]
1a001550:	687a      	ldr	r2, [r7, #4]
1a001552:	0149      	lsls	r1, r1, #5
1a001554:	440b      	add	r3, r1
1a001556:	4413      	add	r3, r2
1a001558:	4602      	mov	r2, r0
1a00155a:	701a      	strb	r2, [r3, #0]
}
1a00155c:	370c      	adds	r7, #12
1a00155e:	46bd      	mov	sp, r7
1a001560:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001564:	4770      	bx	lr
1a001566:	bf00      	nop

1a001568 <Chip_GPIO_SetPinDIROutput>:
 * @param  port    : GPIO Port number where @a pin is located
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a001568:	b480      	push	{r7}
1a00156a:	b083      	sub	sp, #12
1a00156c:	af00      	add	r7, sp, #0
1a00156e:	6078      	str	r0, [r7, #4]
1a001570:	460b      	mov	r3, r1
1a001572:	70fb      	strb	r3, [r7, #3]
1a001574:	4613      	mov	r3, r2
1a001576:	70bb      	strb	r3, [r7, #2]
   pGPIO->DIR[port] |= 1UL << pin;
1a001578:	78fa      	ldrb	r2, [r7, #3]
1a00157a:	78f9      	ldrb	r1, [r7, #3]
1a00157c:	687b      	ldr	r3, [r7, #4]
1a00157e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a001582:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1a001586:	78bb      	ldrb	r3, [r7, #2]
1a001588:	2001      	movs	r0, #1
1a00158a:	fa00 f303 	lsl.w	r3, r0, r3
1a00158e:	4319      	orrs	r1, r3
1a001590:	687b      	ldr	r3, [r7, #4]
1a001592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a00159a:	370c      	adds	r7, #12
1a00159c:	46bd      	mov	sp, r7
1a00159e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0015a2:	4770      	bx	lr

1a0015a4 <Chip_UART_TXEnable>:
 * @brief  Enable transmission on UART TxD pin
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
1a0015a4:	b480      	push	{r7}
1a0015a6:	b083      	sub	sp, #12
1a0015a8:	af00      	add	r7, sp, #0
1a0015aa:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a0015ac:	687b      	ldr	r3, [r7, #4]
1a0015ae:	2201      	movs	r2, #1
1a0015b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a0015b2:	370c      	adds	r7, #12
1a0015b4:	46bd      	mov	sp, r7
1a0015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0015ba:	4770      	bx	lr

1a0015bc <Chip_UART_ConfigData>:
 *         definitions. For example, a configuration of 8 data bits, 1
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a0015bc:	b480      	push	{r7}
1a0015be:	b083      	sub	sp, #12
1a0015c0:	af00      	add	r7, sp, #0
1a0015c2:	6078      	str	r0, [r7, #4]
1a0015c4:	6039      	str	r1, [r7, #0]
   pUART->LCR = config;
1a0015c6:	687b      	ldr	r3, [r7, #4]
1a0015c8:	683a      	ldr	r2, [r7, #0]
1a0015ca:	60da      	str	r2, [r3, #12]
}
1a0015cc:	370c      	adds	r7, #12
1a0015ce:	46bd      	mov	sp, r7
1a0015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0015d4:	4770      	bx	lr
1a0015d6:	bf00      	nop

1a0015d8 <Board_UART_Init>:

static const io_port_t gpioLEDBits[] = {{0, 14}, {1, 11}, {1, 12}, {5, 0}, {5, 1}, {5, 2}};
static uint32_t lcd_cfg_val;

void Board_UART_Init(LPC_USART_T *pUART)
{
1a0015d8:	b580      	push	{r7, lr}
1a0015da:	b082      	sub	sp, #8
1a0015dc:	af00      	add	r7, sp, #0
1a0015de:	6078      	str	r0, [r7, #4]
   Chip_SCU_PinMuxSet(0x6, 4, (SCU_MODE_INACT | SCU_MODE_FUNC2));                  /* P6,4 : UART0_TXD */
1a0015e0:	2006      	movs	r0, #6
1a0015e2:	2104      	movs	r1, #4
1a0015e4:	2212      	movs	r2, #18
1a0015e6:	f7ff ff77 	bl	1a0014d8 <Chip_SCU_PinMuxSet>
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
1a0015ea:	2002      	movs	r0, #2
1a0015ec:	2101      	movs	r1, #1
1a0015ee:	22d1      	movs	r2, #209	; 0xd1
1a0015f0:	f7ff ff72 	bl	1a0014d8 <Chip_SCU_PinMuxSet>
}
1a0015f4:	3708      	adds	r7, #8
1a0015f6:	46bd      	mov	sp, r7
1a0015f8:	bd80      	pop	{r7, pc}
1a0015fa:	bf00      	nop

1a0015fc <Board_Debug_Init>:

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a0015fc:	b580      	push	{r7, lr}
1a0015fe:	af00      	add	r7, sp, #0
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a001600:	4809      	ldr	r0, [pc, #36]	; (1a001628 <Board_Debug_Init+0x2c>)
1a001602:	f7ff ffe9 	bl	1a0015d8 <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a001606:	4808      	ldr	r0, [pc, #32]	; (1a001628 <Board_Debug_Init+0x2c>)
1a001608:	f7fe ff6c 	bl	1a0004e4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a00160c:	4806      	ldr	r0, [pc, #24]	; (1a001628 <Board_Debug_Init+0x2c>)
1a00160e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001612:	f7fe ffa9 	bl	1a000568 <Chip_UART_SetBaudFDR>
   Chip_UART_ConfigData(DEBUG_UART, UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS);
1a001616:	4804      	ldr	r0, [pc, #16]	; (1a001628 <Board_Debug_Init+0x2c>)
1a001618:	2103      	movs	r1, #3
1a00161a:	f7ff ffcf 	bl	1a0015bc <Chip_UART_ConfigData>

   /* Enable UART Transmit */
   Chip_UART_TXEnable(DEBUG_UART);
1a00161e:	4802      	ldr	r0, [pc, #8]	; (1a001628 <Board_Debug_Init+0x2c>)
1a001620:	f7ff ffc0 	bl	1a0015a4 <Chip_UART_TXEnable>
#endif
}
1a001624:	bd80      	pop	{r7, pc}
1a001626:	bf00      	nop
1a001628:	400c1000 	.word	0x400c1000

1a00162c <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a00162c:	b580      	push	{r7, lr}
1a00162e:	b082      	sub	sp, #8
1a001630:	af00      	add	r7, sp, #0
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001632:	2300      	movs	r3, #0
1a001634:	607b      	str	r3, [r7, #4]
1a001636:	e01d      	b.n	1a001674 <Board_LED_Init+0x48>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a001638:	4a11      	ldr	r2, [pc, #68]	; (1a001680 <Board_LED_Init+0x54>)
1a00163a:	687b      	ldr	r3, [r7, #4]
1a00163c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
1a001640:	4a0f      	ldr	r2, [pc, #60]	; (1a001680 <Board_LED_Init+0x54>)
1a001642:	687b      	ldr	r3, [r7, #4]
1a001644:	005b      	lsls	r3, r3, #1
1a001646:	4413      	add	r3, r2
1a001648:	785b      	ldrb	r3, [r3, #1]
1a00164a:	480e      	ldr	r0, [pc, #56]	; (1a001684 <Board_LED_Init+0x58>)
1a00164c:	461a      	mov	r2, r3
1a00164e:	f7ff ff8b 	bl	1a001568 <Chip_GPIO_SetPinDIROutput>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
1a001652:	4a0b      	ldr	r2, [pc, #44]	; (1a001680 <Board_LED_Init+0x54>)
1a001654:	687b      	ldr	r3, [r7, #4]
1a001656:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
1a00165a:	4a09      	ldr	r2, [pc, #36]	; (1a001680 <Board_LED_Init+0x54>)
1a00165c:	687b      	ldr	r3, [r7, #4]
1a00165e:	005b      	lsls	r3, r3, #1
1a001660:	4413      	add	r3, r2
1a001662:	785b      	ldrb	r3, [r3, #1]
1a001664:	4807      	ldr	r0, [pc, #28]	; (1a001684 <Board_LED_Init+0x58>)
1a001666:	461a      	mov	r2, r3
1a001668:	2300      	movs	r3, #0
1a00166a:	f7ff ff61 	bl	1a001530 <Chip_GPIO_SetPinState>

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a00166e:	687b      	ldr	r3, [r7, #4]
1a001670:	3301      	adds	r3, #1
1a001672:	607b      	str	r3, [r7, #4]
1a001674:	687b      	ldr	r3, [r7, #4]
1a001676:	2b05      	cmp	r3, #5
1a001678:	d9de      	bls.n	1a001638 <Board_LED_Init+0xc>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a00167a:	3708      	adds	r7, #8
1a00167c:	46bd      	mov	sp, r7
1a00167e:	bd80      	pop	{r7, pc}
1a001680:	1a001e18 	.word	0x1a001e18
1a001684:	400f4000 	.word	0x400f4000

1a001688 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001688:	b580      	push	{r7, lr}
1a00168a:	af00      	add	r7, sp, #0
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a00168c:	f7ff ffb6 	bl	1a0015fc <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001690:	4804      	ldr	r0, [pc, #16]	; (1a0016a4 <Board_Init+0x1c>)
1a001692:	f7ff f911 	bl	1a0008b8 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a001696:	f7ff ffc9 	bl	1a00162c <Board_LED_Init>
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
1a00169a:	4803      	ldr	r0, [pc, #12]	; (1a0016a8 <Board_Init+0x20>)
1a00169c:	f7ff ff34 	bl	1a001508 <Chip_ENET_RMIIEnable>
}
1a0016a0:	bd80      	pop	{r7, pc}
1a0016a2:	bf00      	nop
1a0016a4:	400f4000 	.word	0x400f4000
1a0016a8:	40010000 	.word	0x40010000

1a0016ac <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0016ac:	b580      	push	{r7, lr}
1a0016ae:	b082      	sub	sp, #8
1a0016b0:	af00      	add	r7, sp, #0
#if defined(CORE_M3) || defined(CORE_M4)
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;
1a0016b2:	4b04      	ldr	r3, [pc, #16]	; (1a0016c4 <SystemInit+0x18>)
1a0016b4:	607b      	str	r3, [r7, #4]

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0016b6:	f7ff fdbb 	bl	1a001230 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a0016ba:	f7ff ff05 	bl	1a0014c8 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a0016be:	3708      	adds	r7, #8
1a0016c0:	46bd      	mov	sp, r7
1a0016c2:	bd80      	pop	{r7, pc}
1a0016c4:	e000ed08 	.word	0xe000ed08

1a0016c8 <asmSum>:

 * etiqueta que tiene que coincidir con el nombre de la funcion.
*/

asmSum:
    push {lr}  /* guardamos la direccion de retorno en la pila */
1a0016c8:	b500      	push	{lr}
	add r0, r1 /* r0 = r0 + r1 */
1a0016ca:	4408      	add	r0, r1
	pop {pc}   /* retorno */
1a0016cc:	bd00      	pop	{pc}
	...

1a0016d0 <maxASM>:
 * el array se incrementa cada 4, en la ultima posicion la tengo en vector + (longitud - 1)*4
 */

maxASM:

   push 	{lr}  									/* guardamos la direccion de retorno en la pila */
1a0016d0:	b500      	push	{lr}
   sub 		longitud, 1											/* decremento el registro longitud */
1a0016d2:	f1a1 0101 	sub.w	r1, r1, #1

   ldr 		maximo, =0
1a0016d6:	4a05      	ldr	r2, [pc, #20]	; (1a0016ec <cierroLazo+0xa>)

1a0016d8 <lazo>:

lazo:
   ldr	 	auxiliar, [vectorIn, longitud, LSL DESP_32BITS]  			/* levanto un elemento desde el final hacia abajo */
1a0016d8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]


   cmp		maximo, auxiliar
1a0016dc:	429a      	cmp	r2, r3
   bhi		cierroLazo
1a0016de:	d800      	bhi.n	1a0016e2 <cierroLazo>
   mov		maximo, auxiliar
1a0016e0:	461a      	mov	r2, r3

1a0016e2 <cierroLazo>:

cierroLazo:
   subs 	longitud, 1						/* decremento el "contador" */
1a0016e2:	3901      	subs	r1, #1
   bpl 		lazo
1a0016e4:	d5f8      	bpl.n	1a0016d8 <lazo>

	/* las unicas instrucciones con las que accedo a memoria son load y store */


	mov	r0, maximo
1a0016e6:	4610      	mov	r0, r2
	pop {pc}   /* retorno */
1a0016e8:	bd00      	pop	{pc}
1a0016ea:	0000      	.short	0x0000
maxASM:

   push 	{lr}  									/* guardamos la direccion de retorno en la pila */
   sub 		longitud, 1											/* decremento el registro longitud */

   ldr 		maximo, =0
1a0016ec:	00000000 	.word	0x00000000

1a0016f0 <__aeabi_uldivmod>:
1a0016f0:	b953      	cbnz	r3, 1a001708 <__aeabi_uldivmod+0x18>
1a0016f2:	b94a      	cbnz	r2, 1a001708 <__aeabi_uldivmod+0x18>
1a0016f4:	2900      	cmp	r1, #0
1a0016f6:	bf08      	it	eq
1a0016f8:	2800      	cmpeq	r0, #0
1a0016fa:	bf1c      	itt	ne
1a0016fc:	f04f 31ff 	movne.w	r1, #4294967295
1a001700:	f04f 30ff 	movne.w	r0, #4294967295
1a001704:	f000 b83c 	b.w	1a001780 <__aeabi_idiv0>
1a001708:	b082      	sub	sp, #8
1a00170a:	46ec      	mov	ip, sp
1a00170c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a001710:	f000 f81e 	bl	1a001750 <__gnu_uldivmod_helper>
1a001714:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001718:	b002      	add	sp, #8
1a00171a:	bc0c      	pop	{r2, r3}
1a00171c:	4770      	bx	lr
1a00171e:	bf00      	nop

1a001720 <__gnu_ldivmod_helper>:
1a001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001724:	9c06      	ldr	r4, [sp, #24]
1a001726:	4615      	mov	r5, r2
1a001728:	4606      	mov	r6, r0
1a00172a:	460f      	mov	r7, r1
1a00172c:	4698      	mov	r8, r3
1a00172e:	f000 f829 	bl	1a001784 <__divdi3>
1a001732:	fb05 f301 	mul.w	r3, r5, r1
1a001736:	fb00 3808 	mla	r8, r0, r8, r3
1a00173a:	fba5 2300 	umull	r2, r3, r5, r0
1a00173e:	1ab2      	subs	r2, r6, r2
1a001740:	4443      	add	r3, r8
1a001742:	eb67 0303 	sbc.w	r3, r7, r3
1a001746:	e9c4 2300 	strd	r2, r3, [r4]
1a00174a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00174e:	bf00      	nop

1a001750 <__gnu_uldivmod_helper>:
1a001750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001754:	9c06      	ldr	r4, [sp, #24]
1a001756:	4690      	mov	r8, r2
1a001758:	4606      	mov	r6, r0
1a00175a:	460f      	mov	r7, r1
1a00175c:	461d      	mov	r5, r3
1a00175e:	f000 f95f 	bl	1a001a20 <__udivdi3>
1a001762:	fb00 f505 	mul.w	r5, r0, r5
1a001766:	fba0 2308 	umull	r2, r3, r0, r8
1a00176a:	fb08 5501 	mla	r5, r8, r1, r5
1a00176e:	1ab2      	subs	r2, r6, r2
1a001770:	442b      	add	r3, r5
1a001772:	eb67 0303 	sbc.w	r3, r7, r3
1a001776:	e9c4 2300 	strd	r2, r3, [r4]
1a00177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00177e:	bf00      	nop

1a001780 <__aeabi_idiv0>:
1a001780:	4770      	bx	lr
1a001782:	bf00      	nop

1a001784 <__divdi3>:
1a001784:	2900      	cmp	r1, #0
1a001786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00178a:	f2c0 80a6 	blt.w	1a0018da <__divdi3+0x156>
1a00178e:	2600      	movs	r6, #0
1a001790:	2b00      	cmp	r3, #0
1a001792:	f2c0 809c 	blt.w	1a0018ce <__divdi3+0x14a>
1a001796:	4688      	mov	r8, r1
1a001798:	4694      	mov	ip, r2
1a00179a:	469e      	mov	lr, r3
1a00179c:	4615      	mov	r5, r2
1a00179e:	4604      	mov	r4, r0
1a0017a0:	460f      	mov	r7, r1
1a0017a2:	2b00      	cmp	r3, #0
1a0017a4:	d13d      	bne.n	1a001822 <__divdi3+0x9e>
1a0017a6:	428a      	cmp	r2, r1
1a0017a8:	d959      	bls.n	1a00185e <__divdi3+0xda>
1a0017aa:	fab2 f382 	clz	r3, r2
1a0017ae:	b13b      	cbz	r3, 1a0017c0 <__divdi3+0x3c>
1a0017b0:	f1c3 0220 	rsb	r2, r3, #32
1a0017b4:	409f      	lsls	r7, r3
1a0017b6:	fa20 f202 	lsr.w	r2, r0, r2
1a0017ba:	409d      	lsls	r5, r3
1a0017bc:	4317      	orrs	r7, r2
1a0017be:	409c      	lsls	r4, r3
1a0017c0:	0c29      	lsrs	r1, r5, #16
1a0017c2:	0c22      	lsrs	r2, r4, #16
1a0017c4:	fbb7 fef1 	udiv	lr, r7, r1
1a0017c8:	b2a8      	uxth	r0, r5
1a0017ca:	fb01 771e 	mls	r7, r1, lr, r7
1a0017ce:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a0017d2:	fb00 f30e 	mul.w	r3, r0, lr
1a0017d6:	42bb      	cmp	r3, r7
1a0017d8:	d90a      	bls.n	1a0017f0 <__divdi3+0x6c>
1a0017da:	197f      	adds	r7, r7, r5
1a0017dc:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0017e0:	f080 8105 	bcs.w	1a0019ee <__divdi3+0x26a>
1a0017e4:	42bb      	cmp	r3, r7
1a0017e6:	f240 8102 	bls.w	1a0019ee <__divdi3+0x26a>
1a0017ea:	f1ae 0e02 	sub.w	lr, lr, #2
1a0017ee:	442f      	add	r7, r5
1a0017f0:	1aff      	subs	r7, r7, r3
1a0017f2:	b2a4      	uxth	r4, r4
1a0017f4:	fbb7 f3f1 	udiv	r3, r7, r1
1a0017f8:	fb01 7713 	mls	r7, r1, r3, r7
1a0017fc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001800:	fb00 f003 	mul.w	r0, r0, r3
1a001804:	42b8      	cmp	r0, r7
1a001806:	d908      	bls.n	1a00181a <__divdi3+0x96>
1a001808:	197f      	adds	r7, r7, r5
1a00180a:	f103 32ff 	add.w	r2, r3, #4294967295
1a00180e:	f080 80f0 	bcs.w	1a0019f2 <__divdi3+0x26e>
1a001812:	42b8      	cmp	r0, r7
1a001814:	f240 80ed 	bls.w	1a0019f2 <__divdi3+0x26e>
1a001818:	3b02      	subs	r3, #2
1a00181a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a00181e:	2200      	movs	r2, #0
1a001820:	e003      	b.n	1a00182a <__divdi3+0xa6>
1a001822:	428b      	cmp	r3, r1
1a001824:	d90f      	bls.n	1a001846 <__divdi3+0xc2>
1a001826:	2200      	movs	r2, #0
1a001828:	4613      	mov	r3, r2
1a00182a:	1c34      	adds	r4, r6, #0
1a00182c:	bf18      	it	ne
1a00182e:	2401      	movne	r4, #1
1a001830:	4260      	negs	r0, r4
1a001832:	f04f 0500 	mov.w	r5, #0
1a001836:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a00183a:	4058      	eors	r0, r3
1a00183c:	4051      	eors	r1, r2
1a00183e:	1900      	adds	r0, r0, r4
1a001840:	4169      	adcs	r1, r5
1a001842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001846:	fab3 f283 	clz	r2, r3
1a00184a:	2a00      	cmp	r2, #0
1a00184c:	f040 8086 	bne.w	1a00195c <__divdi3+0x1d8>
1a001850:	428b      	cmp	r3, r1
1a001852:	d302      	bcc.n	1a00185a <__divdi3+0xd6>
1a001854:	4584      	cmp	ip, r0
1a001856:	f200 80db 	bhi.w	1a001a10 <__divdi3+0x28c>
1a00185a:	2301      	movs	r3, #1
1a00185c:	e7e5      	b.n	1a00182a <__divdi3+0xa6>
1a00185e:	b912      	cbnz	r2, 1a001866 <__divdi3+0xe2>
1a001860:	2301      	movs	r3, #1
1a001862:	fbb3 f5f2 	udiv	r5, r3, r2
1a001866:	fab5 f085 	clz	r0, r5
1a00186a:	2800      	cmp	r0, #0
1a00186c:	d13b      	bne.n	1a0018e6 <__divdi3+0x162>
1a00186e:	1b78      	subs	r0, r7, r5
1a001870:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001874:	fa1f fc85 	uxth.w	ip, r5
1a001878:	2201      	movs	r2, #1
1a00187a:	fbb0 f8fe 	udiv	r8, r0, lr
1a00187e:	0c21      	lsrs	r1, r4, #16
1a001880:	fb0e 0718 	mls	r7, lr, r8, r0
1a001884:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a001888:	fb0c f308 	mul.w	r3, ip, r8
1a00188c:	42bb      	cmp	r3, r7
1a00188e:	d907      	bls.n	1a0018a0 <__divdi3+0x11c>
1a001890:	197f      	adds	r7, r7, r5
1a001892:	f108 31ff 	add.w	r1, r8, #4294967295
1a001896:	d202      	bcs.n	1a00189e <__divdi3+0x11a>
1a001898:	42bb      	cmp	r3, r7
1a00189a:	f200 80bd 	bhi.w	1a001a18 <__divdi3+0x294>
1a00189e:	4688      	mov	r8, r1
1a0018a0:	1aff      	subs	r7, r7, r3
1a0018a2:	b2a4      	uxth	r4, r4
1a0018a4:	fbb7 f3fe 	udiv	r3, r7, lr
1a0018a8:	fb0e 7713 	mls	r7, lr, r3, r7
1a0018ac:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0018b0:	fb0c fc03 	mul.w	ip, ip, r3
1a0018b4:	45bc      	cmp	ip, r7
1a0018b6:	d907      	bls.n	1a0018c8 <__divdi3+0x144>
1a0018b8:	197f      	adds	r7, r7, r5
1a0018ba:	f103 31ff 	add.w	r1, r3, #4294967295
1a0018be:	d202      	bcs.n	1a0018c6 <__divdi3+0x142>
1a0018c0:	45bc      	cmp	ip, r7
1a0018c2:	f200 80a7 	bhi.w	1a001a14 <__divdi3+0x290>
1a0018c6:	460b      	mov	r3, r1
1a0018c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0018cc:	e7ad      	b.n	1a00182a <__divdi3+0xa6>
1a0018ce:	4252      	negs	r2, r2
1a0018d0:	ea6f 0606 	mvn.w	r6, r6
1a0018d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0018d8:	e75d      	b.n	1a001796 <__divdi3+0x12>
1a0018da:	4240      	negs	r0, r0
1a0018dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0018e0:	f04f 36ff 	mov.w	r6, #4294967295
1a0018e4:	e754      	b.n	1a001790 <__divdi3+0xc>
1a0018e6:	f1c0 0220 	rsb	r2, r0, #32
1a0018ea:	fa24 f102 	lsr.w	r1, r4, r2
1a0018ee:	fa07 f300 	lsl.w	r3, r7, r0
1a0018f2:	4085      	lsls	r5, r0
1a0018f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018f8:	40d7      	lsrs	r7, r2
1a0018fa:	4319      	orrs	r1, r3
1a0018fc:	fbb7 f2fe 	udiv	r2, r7, lr
1a001900:	0c0b      	lsrs	r3, r1, #16
1a001902:	fb0e 7712 	mls	r7, lr, r2, r7
1a001906:	fa1f fc85 	uxth.w	ip, r5
1a00190a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a00190e:	fb0c f702 	mul.w	r7, ip, r2
1a001912:	429f      	cmp	r7, r3
1a001914:	fa04 f400 	lsl.w	r4, r4, r0
1a001918:	d907      	bls.n	1a00192a <__divdi3+0x1a6>
1a00191a:	195b      	adds	r3, r3, r5
1a00191c:	f102 30ff 	add.w	r0, r2, #4294967295
1a001920:	d274      	bcs.n	1a001a0c <__divdi3+0x288>
1a001922:	429f      	cmp	r7, r3
1a001924:	d972      	bls.n	1a001a0c <__divdi3+0x288>
1a001926:	3a02      	subs	r2, #2
1a001928:	442b      	add	r3, r5
1a00192a:	1bdf      	subs	r7, r3, r7
1a00192c:	b289      	uxth	r1, r1
1a00192e:	fbb7 f8fe 	udiv	r8, r7, lr
1a001932:	fb0e 7318 	mls	r3, lr, r8, r7
1a001936:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00193a:	fb0c f708 	mul.w	r7, ip, r8
1a00193e:	429f      	cmp	r7, r3
1a001940:	d908      	bls.n	1a001954 <__divdi3+0x1d0>
1a001942:	195b      	adds	r3, r3, r5
1a001944:	f108 31ff 	add.w	r1, r8, #4294967295
1a001948:	d25c      	bcs.n	1a001a04 <__divdi3+0x280>
1a00194a:	429f      	cmp	r7, r3
1a00194c:	d95a      	bls.n	1a001a04 <__divdi3+0x280>
1a00194e:	f1a8 0802 	sub.w	r8, r8, #2
1a001952:	442b      	add	r3, r5
1a001954:	1bd8      	subs	r0, r3, r7
1a001956:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a00195a:	e78e      	b.n	1a00187a <__divdi3+0xf6>
1a00195c:	f1c2 0320 	rsb	r3, r2, #32
1a001960:	fa2c f103 	lsr.w	r1, ip, r3
1a001964:	fa0e fe02 	lsl.w	lr, lr, r2
1a001968:	fa20 f703 	lsr.w	r7, r0, r3
1a00196c:	ea41 0e0e 	orr.w	lr, r1, lr
1a001970:	fa08 f002 	lsl.w	r0, r8, r2
1a001974:	fa28 f103 	lsr.w	r1, r8, r3
1a001978:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a00197c:	4338      	orrs	r0, r7
1a00197e:	fbb1 f8f5 	udiv	r8, r1, r5
1a001982:	0c03      	lsrs	r3, r0, #16
1a001984:	fb05 1118 	mls	r1, r5, r8, r1
1a001988:	fa1f f78e 	uxth.w	r7, lr
1a00198c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001990:	fb07 f308 	mul.w	r3, r7, r8
1a001994:	428b      	cmp	r3, r1
1a001996:	fa0c fc02 	lsl.w	ip, ip, r2
1a00199a:	d909      	bls.n	1a0019b0 <__divdi3+0x22c>
1a00199c:	eb11 010e 	adds.w	r1, r1, lr
1a0019a0:	f108 39ff 	add.w	r9, r8, #4294967295
1a0019a4:	d230      	bcs.n	1a001a08 <__divdi3+0x284>
1a0019a6:	428b      	cmp	r3, r1
1a0019a8:	d92e      	bls.n	1a001a08 <__divdi3+0x284>
1a0019aa:	f1a8 0802 	sub.w	r8, r8, #2
1a0019ae:	4471      	add	r1, lr
1a0019b0:	1ac9      	subs	r1, r1, r3
1a0019b2:	b280      	uxth	r0, r0
1a0019b4:	fbb1 f3f5 	udiv	r3, r1, r5
1a0019b8:	fb05 1113 	mls	r1, r5, r3, r1
1a0019bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0019c0:	fb07 f703 	mul.w	r7, r7, r3
1a0019c4:	428f      	cmp	r7, r1
1a0019c6:	d908      	bls.n	1a0019da <__divdi3+0x256>
1a0019c8:	eb11 010e 	adds.w	r1, r1, lr
1a0019cc:	f103 30ff 	add.w	r0, r3, #4294967295
1a0019d0:	d216      	bcs.n	1a001a00 <__divdi3+0x27c>
1a0019d2:	428f      	cmp	r7, r1
1a0019d4:	d914      	bls.n	1a001a00 <__divdi3+0x27c>
1a0019d6:	3b02      	subs	r3, #2
1a0019d8:	4471      	add	r1, lr
1a0019da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0019de:	1bc9      	subs	r1, r1, r7
1a0019e0:	fba3 890c 	umull	r8, r9, r3, ip
1a0019e4:	4549      	cmp	r1, r9
1a0019e6:	d309      	bcc.n	1a0019fc <__divdi3+0x278>
1a0019e8:	d005      	beq.n	1a0019f6 <__divdi3+0x272>
1a0019ea:	2200      	movs	r2, #0
1a0019ec:	e71d      	b.n	1a00182a <__divdi3+0xa6>
1a0019ee:	4696      	mov	lr, r2
1a0019f0:	e6fe      	b.n	1a0017f0 <__divdi3+0x6c>
1a0019f2:	4613      	mov	r3, r2
1a0019f4:	e711      	b.n	1a00181a <__divdi3+0x96>
1a0019f6:	4094      	lsls	r4, r2
1a0019f8:	4544      	cmp	r4, r8
1a0019fa:	d2f6      	bcs.n	1a0019ea <__divdi3+0x266>
1a0019fc:	3b01      	subs	r3, #1
1a0019fe:	e7f4      	b.n	1a0019ea <__divdi3+0x266>
1a001a00:	4603      	mov	r3, r0
1a001a02:	e7ea      	b.n	1a0019da <__divdi3+0x256>
1a001a04:	4688      	mov	r8, r1
1a001a06:	e7a5      	b.n	1a001954 <__divdi3+0x1d0>
1a001a08:	46c8      	mov	r8, r9
1a001a0a:	e7d1      	b.n	1a0019b0 <__divdi3+0x22c>
1a001a0c:	4602      	mov	r2, r0
1a001a0e:	e78c      	b.n	1a00192a <__divdi3+0x1a6>
1a001a10:	4613      	mov	r3, r2
1a001a12:	e70a      	b.n	1a00182a <__divdi3+0xa6>
1a001a14:	3b02      	subs	r3, #2
1a001a16:	e757      	b.n	1a0018c8 <__divdi3+0x144>
1a001a18:	f1a8 0802 	sub.w	r8, r8, #2
1a001a1c:	442f      	add	r7, r5
1a001a1e:	e73f      	b.n	1a0018a0 <__divdi3+0x11c>

1a001a20 <__udivdi3>:
1a001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001a24:	2b00      	cmp	r3, #0
1a001a26:	d144      	bne.n	1a001ab2 <__udivdi3+0x92>
1a001a28:	428a      	cmp	r2, r1
1a001a2a:	4615      	mov	r5, r2
1a001a2c:	4604      	mov	r4, r0
1a001a2e:	d94f      	bls.n	1a001ad0 <__udivdi3+0xb0>
1a001a30:	fab2 f782 	clz	r7, r2
1a001a34:	460e      	mov	r6, r1
1a001a36:	b14f      	cbz	r7, 1a001a4c <__udivdi3+0x2c>
1a001a38:	f1c7 0320 	rsb	r3, r7, #32
1a001a3c:	40b9      	lsls	r1, r7
1a001a3e:	fa20 f603 	lsr.w	r6, r0, r3
1a001a42:	fa02 f507 	lsl.w	r5, r2, r7
1a001a46:	430e      	orrs	r6, r1
1a001a48:	fa00 f407 	lsl.w	r4, r0, r7
1a001a4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a50:	0c23      	lsrs	r3, r4, #16
1a001a52:	fbb6 f0fe 	udiv	r0, r6, lr
1a001a56:	b2af      	uxth	r7, r5
1a001a58:	fb0e 6110 	mls	r1, lr, r0, r6
1a001a5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001a60:	fb07 f100 	mul.w	r1, r7, r0
1a001a64:	4299      	cmp	r1, r3
1a001a66:	d909      	bls.n	1a001a7c <__udivdi3+0x5c>
1a001a68:	195b      	adds	r3, r3, r5
1a001a6a:	f100 32ff 	add.w	r2, r0, #4294967295
1a001a6e:	f080 80ec 	bcs.w	1a001c4a <__udivdi3+0x22a>
1a001a72:	4299      	cmp	r1, r3
1a001a74:	f240 80e9 	bls.w	1a001c4a <__udivdi3+0x22a>
1a001a78:	3802      	subs	r0, #2
1a001a7a:	442b      	add	r3, r5
1a001a7c:	1a5a      	subs	r2, r3, r1
1a001a7e:	b2a4      	uxth	r4, r4
1a001a80:	fbb2 f3fe 	udiv	r3, r2, lr
1a001a84:	fb0e 2213 	mls	r2, lr, r3, r2
1a001a88:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a001a8c:	fb07 f703 	mul.w	r7, r7, r3
1a001a90:	4297      	cmp	r7, r2
1a001a92:	d908      	bls.n	1a001aa6 <__udivdi3+0x86>
1a001a94:	1952      	adds	r2, r2, r5
1a001a96:	f103 31ff 	add.w	r1, r3, #4294967295
1a001a9a:	f080 80d8 	bcs.w	1a001c4e <__udivdi3+0x22e>
1a001a9e:	4297      	cmp	r7, r2
1a001aa0:	f240 80d5 	bls.w	1a001c4e <__udivdi3+0x22e>
1a001aa4:	3b02      	subs	r3, #2
1a001aa6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001aaa:	2600      	movs	r6, #0
1a001aac:	4631      	mov	r1, r6
1a001aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001ab2:	428b      	cmp	r3, r1
1a001ab4:	d847      	bhi.n	1a001b46 <__udivdi3+0x126>
1a001ab6:	fab3 f683 	clz	r6, r3
1a001aba:	2e00      	cmp	r6, #0
1a001abc:	d148      	bne.n	1a001b50 <__udivdi3+0x130>
1a001abe:	428b      	cmp	r3, r1
1a001ac0:	d302      	bcc.n	1a001ac8 <__udivdi3+0xa8>
1a001ac2:	4282      	cmp	r2, r0
1a001ac4:	f200 80cd 	bhi.w	1a001c62 <__udivdi3+0x242>
1a001ac8:	2001      	movs	r0, #1
1a001aca:	4631      	mov	r1, r6
1a001acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001ad0:	b912      	cbnz	r2, 1a001ad8 <__udivdi3+0xb8>
1a001ad2:	2501      	movs	r5, #1
1a001ad4:	fbb5 f5f2 	udiv	r5, r5, r2
1a001ad8:	fab5 f885 	clz	r8, r5
1a001adc:	f1b8 0f00 	cmp.w	r8, #0
1a001ae0:	d177      	bne.n	1a001bd2 <__udivdi3+0x1b2>
1a001ae2:	1b4a      	subs	r2, r1, r5
1a001ae4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ae8:	b2af      	uxth	r7, r5
1a001aea:	2601      	movs	r6, #1
1a001aec:	fbb2 f0fe 	udiv	r0, r2, lr
1a001af0:	0c23      	lsrs	r3, r4, #16
1a001af2:	fb0e 2110 	mls	r1, lr, r0, r2
1a001af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001afa:	fb07 f300 	mul.w	r3, r7, r0
1a001afe:	428b      	cmp	r3, r1
1a001b00:	d907      	bls.n	1a001b12 <__udivdi3+0xf2>
1a001b02:	1949      	adds	r1, r1, r5
1a001b04:	f100 32ff 	add.w	r2, r0, #4294967295
1a001b08:	d202      	bcs.n	1a001b10 <__udivdi3+0xf0>
1a001b0a:	428b      	cmp	r3, r1
1a001b0c:	f200 80ba 	bhi.w	1a001c84 <__udivdi3+0x264>
1a001b10:	4610      	mov	r0, r2
1a001b12:	1ac9      	subs	r1, r1, r3
1a001b14:	b2a4      	uxth	r4, r4
1a001b16:	fbb1 f3fe 	udiv	r3, r1, lr
1a001b1a:	fb0e 1113 	mls	r1, lr, r3, r1
1a001b1e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001b22:	fb07 f703 	mul.w	r7, r7, r3
1a001b26:	42a7      	cmp	r7, r4
1a001b28:	d908      	bls.n	1a001b3c <__udivdi3+0x11c>
1a001b2a:	1964      	adds	r4, r4, r5
1a001b2c:	f103 32ff 	add.w	r2, r3, #4294967295
1a001b30:	f080 808f 	bcs.w	1a001c52 <__udivdi3+0x232>
1a001b34:	42a7      	cmp	r7, r4
1a001b36:	f240 808c 	bls.w	1a001c52 <__udivdi3+0x232>
1a001b3a:	3b02      	subs	r3, #2
1a001b3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001b40:	4631      	mov	r1, r6
1a001b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001b46:	2600      	movs	r6, #0
1a001b48:	4630      	mov	r0, r6
1a001b4a:	4631      	mov	r1, r6
1a001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001b50:	f1c6 0420 	rsb	r4, r6, #32
1a001b54:	fa22 f504 	lsr.w	r5, r2, r4
1a001b58:	40b3      	lsls	r3, r6
1a001b5a:	432b      	orrs	r3, r5
1a001b5c:	fa20 fc04 	lsr.w	ip, r0, r4
1a001b60:	fa01 f706 	lsl.w	r7, r1, r6
1a001b64:	fa21 f504 	lsr.w	r5, r1, r4
1a001b68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a001b6c:	ea4c 0707 	orr.w	r7, ip, r7
1a001b70:	fbb5 f8fe 	udiv	r8, r5, lr
1a001b74:	0c39      	lsrs	r1, r7, #16
1a001b76:	fb0e 5518 	mls	r5, lr, r8, r5
1a001b7a:	fa1f fc83 	uxth.w	ip, r3
1a001b7e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a001b82:	fb0c f108 	mul.w	r1, ip, r8
1a001b86:	42a9      	cmp	r1, r5
1a001b88:	fa02 f206 	lsl.w	r2, r2, r6
1a001b8c:	d904      	bls.n	1a001b98 <__udivdi3+0x178>
1a001b8e:	18ed      	adds	r5, r5, r3
1a001b90:	f108 34ff 	add.w	r4, r8, #4294967295
1a001b94:	d367      	bcc.n	1a001c66 <__udivdi3+0x246>
1a001b96:	46a0      	mov	r8, r4
1a001b98:	1a6d      	subs	r5, r5, r1
1a001b9a:	b2bf      	uxth	r7, r7
1a001b9c:	fbb5 f4fe 	udiv	r4, r5, lr
1a001ba0:	fb0e 5514 	mls	r5, lr, r4, r5
1a001ba4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a001ba8:	fb0c fc04 	mul.w	ip, ip, r4
1a001bac:	458c      	cmp	ip, r1
1a001bae:	d904      	bls.n	1a001bba <__udivdi3+0x19a>
1a001bb0:	18c9      	adds	r1, r1, r3
1a001bb2:	f104 35ff 	add.w	r5, r4, #4294967295
1a001bb6:	d35c      	bcc.n	1a001c72 <__udivdi3+0x252>
1a001bb8:	462c      	mov	r4, r5
1a001bba:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a001bbe:	ebcc 0101 	rsb	r1, ip, r1
1a001bc2:	fba4 2302 	umull	r2, r3, r4, r2
1a001bc6:	4299      	cmp	r1, r3
1a001bc8:	d348      	bcc.n	1a001c5c <__udivdi3+0x23c>
1a001bca:	d044      	beq.n	1a001c56 <__udivdi3+0x236>
1a001bcc:	4620      	mov	r0, r4
1a001bce:	2600      	movs	r6, #0
1a001bd0:	e76c      	b.n	1a001aac <__udivdi3+0x8c>
1a001bd2:	f1c8 0420 	rsb	r4, r8, #32
1a001bd6:	fa01 f308 	lsl.w	r3, r1, r8
1a001bda:	fa05 f508 	lsl.w	r5, r5, r8
1a001bde:	fa20 f704 	lsr.w	r7, r0, r4
1a001be2:	40e1      	lsrs	r1, r4
1a001be4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001be8:	431f      	orrs	r7, r3
1a001bea:	fbb1 f6fe 	udiv	r6, r1, lr
1a001bee:	0c3a      	lsrs	r2, r7, #16
1a001bf0:	fb0e 1116 	mls	r1, lr, r6, r1
1a001bf4:	fa1f fc85 	uxth.w	ip, r5
1a001bf8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a001bfc:	fb0c f206 	mul.w	r2, ip, r6
1a001c00:	429a      	cmp	r2, r3
1a001c02:	fa00 f408 	lsl.w	r4, r0, r8
1a001c06:	d907      	bls.n	1a001c18 <__udivdi3+0x1f8>
1a001c08:	195b      	adds	r3, r3, r5
1a001c0a:	f106 31ff 	add.w	r1, r6, #4294967295
1a001c0e:	d237      	bcs.n	1a001c80 <__udivdi3+0x260>
1a001c10:	429a      	cmp	r2, r3
1a001c12:	d935      	bls.n	1a001c80 <__udivdi3+0x260>
1a001c14:	3e02      	subs	r6, #2
1a001c16:	442b      	add	r3, r5
1a001c18:	1a9b      	subs	r3, r3, r2
1a001c1a:	b2bf      	uxth	r7, r7
1a001c1c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001c20:	fb0e 3310 	mls	r3, lr, r0, r3
1a001c24:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a001c28:	fb0c f100 	mul.w	r1, ip, r0
1a001c2c:	4299      	cmp	r1, r3
1a001c2e:	d907      	bls.n	1a001c40 <__udivdi3+0x220>
1a001c30:	195b      	adds	r3, r3, r5
1a001c32:	f100 32ff 	add.w	r2, r0, #4294967295
1a001c36:	d221      	bcs.n	1a001c7c <__udivdi3+0x25c>
1a001c38:	4299      	cmp	r1, r3
1a001c3a:	d91f      	bls.n	1a001c7c <__udivdi3+0x25c>
1a001c3c:	3802      	subs	r0, #2
1a001c3e:	442b      	add	r3, r5
1a001c40:	1a5a      	subs	r2, r3, r1
1a001c42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a001c46:	4667      	mov	r7, ip
1a001c48:	e750      	b.n	1a001aec <__udivdi3+0xcc>
1a001c4a:	4610      	mov	r0, r2
1a001c4c:	e716      	b.n	1a001a7c <__udivdi3+0x5c>
1a001c4e:	460b      	mov	r3, r1
1a001c50:	e729      	b.n	1a001aa6 <__udivdi3+0x86>
1a001c52:	4613      	mov	r3, r2
1a001c54:	e772      	b.n	1a001b3c <__udivdi3+0x11c>
1a001c56:	40b0      	lsls	r0, r6
1a001c58:	4290      	cmp	r0, r2
1a001c5a:	d2b7      	bcs.n	1a001bcc <__udivdi3+0x1ac>
1a001c5c:	1e60      	subs	r0, r4, #1
1a001c5e:	2600      	movs	r6, #0
1a001c60:	e724      	b.n	1a001aac <__udivdi3+0x8c>
1a001c62:	4630      	mov	r0, r6
1a001c64:	e722      	b.n	1a001aac <__udivdi3+0x8c>
1a001c66:	42a9      	cmp	r1, r5
1a001c68:	d995      	bls.n	1a001b96 <__udivdi3+0x176>
1a001c6a:	f1a8 0802 	sub.w	r8, r8, #2
1a001c6e:	441d      	add	r5, r3
1a001c70:	e792      	b.n	1a001b98 <__udivdi3+0x178>
1a001c72:	458c      	cmp	ip, r1
1a001c74:	d9a0      	bls.n	1a001bb8 <__udivdi3+0x198>
1a001c76:	3c02      	subs	r4, #2
1a001c78:	4419      	add	r1, r3
1a001c7a:	e79e      	b.n	1a001bba <__udivdi3+0x19a>
1a001c7c:	4610      	mov	r0, r2
1a001c7e:	e7df      	b.n	1a001c40 <__udivdi3+0x220>
1a001c80:	460e      	mov	r6, r1
1a001c82:	e7c9      	b.n	1a001c18 <__udivdi3+0x1f8>
1a001c84:	3802      	subs	r0, #2
1a001c86:	4429      	add	r1, r5
1a001c88:	e743      	b.n	1a001b12 <__udivdi3+0xf2>
1a001c8a:	bf00      	nop

1a001c8c <memset>:
1a001c8c:	4402      	add	r2, r0
1a001c8e:	4603      	mov	r3, r0
1a001c90:	4293      	cmp	r3, r2
1a001c92:	d002      	beq.n	1a001c9a <memset+0xe>
1a001c94:	f803 1b01 	strb.w	r1, [r3], #1
1a001c98:	e7fa      	b.n	1a001c90 <memset+0x4>
1a001c9a:	4770      	bx	lr
1a001c9c:	1234aabb 	.word	0x1234aabb
1a001ca0:	2345bbcc 	.word	0x2345bbcc
1a001ca4:	3456ccdd 	.word	0x3456ccdd
1a001ca8:	45faddee 	.word	0x45faddee
1a001cac:	00000001 	.word	0x00000001
1a001cb0:	0000002b 	.word	0x0000002b
1a001cb4:	00000016 	.word	0x00000016
1a001cb8:	000001b0 	.word	0x000001b0
1a001cbc:	0000028d 	.word	0x0000028d
1a001cc0:	00000002 	.word	0x00000002
1a001cc4:	00000377 	.word	0x00000377
1a001cc8:	0000002f 	.word	0x0000002f
1a001ccc:	0000003a 	.word	0x0000003a
1a001cd0:	00000141 	.word	0x00000141

1a001cd4 <UART_PClock>:
1a001cd4:	00820081 00a200a1                       ........

1a001cdc <UART_BClock>:
1a001cdc:	01a201c2 01620182                       ......b.

1a001ce4 <InitClkStates>:
1a001ce4:	00010100 00010909 0001090a 01010701     ................
1a001cf4:	00010902 00010906 0101090c 0001090d     ................
1a001d04:	0001090e 0001090f 00010910 00010911     ................
1a001d14:	00010912 00010913 00011114 00011119     ................
1a001d24:	0001111a 0001111b                       ........

1a001d2c <periph_to_base>:
1a001d2c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001d3c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001d4c:	000100e0 01000100 01200003 00060120     .......... . ...
1a001d5c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001d6c:	01820013 00120182 01a201a2 01c20011     ................
1a001d7c:	001001c2 01e201e2 0202000f 000e0202     ................
1a001d8c:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a001d9c:	0f0f0f03 000000ff                       ........

1a001da4 <InitClkStates>:
1a001da4:	00010308 00010307 01010f01              ............

1a001db0 <pinmuxing>:
1a001db0:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a001dc0:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a001dd0:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a001de0:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a001df0:	00f71001 00f31101 00b31201 00f01301     ................
1a001e00:	00b31401 00b60707 00f20000 00b60100     ................

1a001e10 <ExtRateIn>:
1a001e10:	00000000                                ....

1a001e14 <OscRateIn>:
1a001e14:	00b71b00                                ....

1a001e18 <gpioLEDBits>:
1a001e18:	0b010e00 00050c01 02050105              ............
